[
 {
  "index": 0,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(InactiveAndDisinterestedMemberOfTheirCommunity(x), x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsTheSchool(Bonnie)) or (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsTheSchool(Bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(Bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(x, InactiveAndDisinterestedMemberOfCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: BonnieEither(attend, engagedWithSchoolEvents, studentWhoAttendsSchool)\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(x, InactiveAndDisinterestedMemberOfTheirCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildAndTeenager(x) & WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsTheSchool(Bonnie)) or (NotAttendAndNotEngagedWithSchoolEvents(Bonnie) & NotStudentWhoAttendsTheSchool(Bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(Bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(x, InactiveAndDisinterestedMemberOfCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either BothAttendsAndIsVeryEngagedWithSchoolEventsAndIsStudentWhoAttendsSchool(bonnie) | -BothAttendsAndIsVeryEngagedWithSchoolEventsAndIsStudentWhoAttendsSchool(bonnie)\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> InactiveAndDisinterestedMemberOfTheirCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsTheSchool(bonnie)) | (-AttendAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Or(InactiveAndDisinterestedMemberOfTheirCommunity(x), x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsTheSchool(Bonnie)) or (NotAttendAndNotEngagedWithSchoolEvents(Bonnie) & NotStudentWhoAttendsTheSchool(Bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(Bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Or(Inactive(x), DisinterestedMemberOfCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & DisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(x, InactiveAndDisinterestedMemberOfTheirCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsTheSchool(bonnie)) | (-AttendAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(x, InactiveAndDisinterestedMemberOfTheirCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsTheSchool(bonnie)) | (-AttendAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Or(InactiveAndDisinterestedMemberOfTheirCommunity(x), AttendAndEngagedWithSchoolEvents(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsTheSchool(Bonnie)) or (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsTheSchool(Bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(Bonnie)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(x, InactiveAndDisinterestedMemberOfCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfTheirCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildAndTeenager(x) & WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either -AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsTheSchool(Bonnie) | Bonnie either AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsTheSchool(Bonnie)\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(Bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(ActiveInCommunity(x), InactiveAndDisinterested(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) or (NotAttendAndNotEngagedWithSchoolEvents(bonnie) & NotStudentWhoAttendsSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfTheirCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either -AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsTheSchool(bonnie) | Bonnie either -AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie)\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(InactiveAndDisinterestedMemberOfTheirCommunity(x), x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: all x. (Bonnie(x) -> Either(AttendAndEngagedWithSchoolEvents(x), StudentWhoAttendsTheSchool(x)) | (-AttendAndEngagedWithSchoolEvents(x) & -StudentWhoAttendsTheSchool(x)))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfTheirCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsTheSchool(bonnie)) or (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> InactiveAndDisinterestedMemberOfTheirCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either -AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsTheSchool(bonnie) | Bonnie neither -AttendAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie)\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(ActiveInCommunity(x), InactiveAndDisinterested(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: BonnieEither.all x. (AttendAndEngagedWithSchoolEvents(x) & StudentWhoAttendsSchool(x)) | (-AttendAndEngagedWithSchoolEvents(x) & -StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: BonniePerformsInSchoolTalentShowsOften.all x. (PerformInSchoolTalentShowsOften(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (-InactiveAndDisinterestedMemberOfTheirCommunity(x)) | InactiveAndDisinterestedMemberOfTheirCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsTheSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(InactiveAndDisinterestedMemberOfTheirCommunity(x)) | -PerformInSchoolTalentShowsOften(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either BothAttendsAndIsVeryEngagedWithSchoolEventsAndIsStudentWhoAttendsTheSchool(bonnie) | -BothAttendsAndIsVeryEngagedWithSchoolEventsAndIsStudentWhoAttendsTheSchool(bonnie)\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Or(InactiveAndDisinterestedMemberOfTheirCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildAndTeenagerWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either -AttendAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie) | Bonnie neither -AttendAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie)\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Or(InactiveAndDisinterestedMemberOfTheirCommunity(x), AttendAndEngagedWithSchoolEvents(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendTheSchool(bonnie)) or (-AttendAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendTheSchool(bonnie))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(InactiveAndDisinterestedMemberOfCommunity(x), x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: all x. (Bonnie(x) -> Either(AttendAndEngagedWithSchoolEvents(x), StudentWhoAttendsSchool(x)))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> EitherInactiveDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: all x. (BonnieAttendsAndEngagedWithSchoolEvents(x) & StudentWhoAttendsSchool(x)) | -BonnieAttendsAndEngagedWithSchoolEvents(x) & -StudentWhoAttendsSchool(x)\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(ActiveInCommunity(x), InactiveAndDisinterested(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: all x. (Bonnie & (AttendAndEngagedWithSchoolEvents(x) & StudentWhoAttendsSchool(x)))\n\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 1,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Or(InactiveAndDisinterestedMemberOfCommunity(x), AttendAndEngagedWithSchoolEvents(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsSchool(Bonnie)) or (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie) & StudentWhoAttendsSchool(Bonnie)) or (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie) & -StudentWhoAttendsSchool(Bonnie))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(x, InactiveAndDisinterestedMemberOfCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsSchool(Bonnie)) or (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie) & StudentWhoAttendsSchool(Bonnie)) or (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie) & -StudentWhoAttendsSchool(Bonnie))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (ChaperoneHighSchoolDances(bonnie) & YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) -> StudentWhoAttendsSchool(bonnie)) | (-ChaperoneHighSchoolDances(bonnie) & -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) -> InactiveAndDisinterestedMemberOfCommunity(bonnie))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Or(InactiveAndDisinterestedMemberOfCommunity(x), x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either both AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie) or neither AttendAndEngagedWithSchoolEvents(bonnie) & neither StudentWhoAttendsSchool(bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either both YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie) or neither YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & neither StudentWhoAttendsSchool(bonnie)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either -AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsSchool(Bonnie) | Bonnie neither -AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & StudentWhoAttendsSchool(Bonnie) | Bonnie neither -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -StudentWhoAttendsSchool(Bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (-InactiveAndDisinterestedMemberOfCommunity(x)) | (InactiveAndDisinterestedMemberOfCommunity(x)) )\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendAndEngagedWithSchoolEvents(bonnie) & (-StudentWhoAttendsSchool(bonnie)))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & (-ChaperoneHighSchoolDances(bonnie) & (-StudentWhoAttendsSchool(bonnie))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either -AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie) | Bonnie either AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsSchool(Bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie) | Bonnie either YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie)",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either both AttendsAndEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie) or -AttendsAndEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either both YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie) & StudentWhoAttendsSchool(bonnie) or -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie) & -StudentWhoAttendsSchool(bonnie)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either both AttendsSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie) or -AttendsSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either both YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie) or -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (-InactiveAndDisinterestedMemberOfCommunity(x)) | (InactiveAndDisinterestedMemberOfCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie) -> (StudentWhoAttendsSchool(bonnie) & EngagedWithSchoolEvents(bonnie))) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie) -> (InactiveAndDisinterestedMemberOfCommunity(bonnie) & NotStudentWhoAttendsSchool(bonnie)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (-InactiveAndDisinterestedMemberOfTheirCommunity(x)) | InactiveAndDisinterestedMemberOfTheirCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsTheSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsTheSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (ChaperoneHighSchoolDances(bonnie) & YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) -> StudentWhoAttendsTheSchool(bonnie)) | (-ChaperoneHighSchoolDances(bonnie) & -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) -> InactiveAndDisinterestedMemberOfTheirCommunity(bonnie))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Or(InactiveAndDisinterestedMemberOfCommunity(x), x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsSchool(Bonnie)) or (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie) & StudentWhoAttendsSchool(Bonnie)) or (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie) & -StudentWhoAttendsSchool(Bonnie))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either -AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie) | Bonnie either AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsSchool(Bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie) | Bonnie either YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either both AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie) or -AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either both (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie)) or -(YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either both AttendsSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie) or -AttendsSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either both YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie) or -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie) -> (StudentWhoAttendsSchool(bonnie) & EngagedWithSchoolEvents(bonnie)) or (InactiveAndDisinterestedMemberOfCommunity(bonnie) & NotStudentWhoAttendsSchool(bonnie))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> Either(x, InactiveAndDisinterestedMemberOfCommunity(x)))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsSchool(Bonnie)) or (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie) & StudentWhoAttendsSchool(Bonnie)) or (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie) & -StudentWhoAttendsSchool(Bonnie))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either -AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie) | Bonnie neither -AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie) | Bonnie neither -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveAndDisinterestedMemberOfTheirCommunity(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsTheSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfTheirCommunity(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsTheSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either (AttendAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsTheSchool(Bonnie)) or (-AttendAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsTheSchool(Bonnie))\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & ChaperoneHighSchoolDances(Bonnie) & StudentWhoAttendsTheSchool(Bonnie)) or (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(Bonnie) & -ChaperoneHighSchoolDances(Bonnie) & -StudentWhoAttendsTheSchool(Bonnie))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))\n\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> -InactiveDisinterestedCommunityMember(x))\n\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))\n\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterestedCommunityMember(x) -> ChaperoneHighSchoolDances(x))\n\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\n\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie either both AttendsSchoolEvents(bonnie) & EngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie) or -AttendsSchoolEvents(bonnie) & -EngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)\n\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: Bonnie either both YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & ChaperoneHighSchoolDances(bonnie) or -YoungChildOrTeenagerWhoWishesToFurtherAcademicCareerAndEducationalOpportunities(bonnie) & -ChaperoneHighSchoolDances(bonnie) -> (StudentWhoAttendsSchool(bonnie) & EngagedWithSchoolEvents(bonnie)) or (InactiveDisinterestedCommunityMember(bonnie) & NotStudentWhoAttendsSchool(bonnie))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 2,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompanyToday(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemoteFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) & WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: none x. (Manager(x) & WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either James is Manager(james) & AppearInCompanyToday(james) or James is not Manager(james)\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) -> WorkRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & (-AppearInCompanyToday(james))))\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either James is Manager(james) & AppearInCompany(james) or not James is Manager(james) & not AppearInCompany(james)\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompanyToday(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | (-Manager(james) & -AppearInCompanyToday(james)))\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (LunchInCompany(x) | LunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x hasLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(x) & AppearInCompanyToday(x) | (-Manager(x) & -AppearInCompanyToday(x)))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompanyToday(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingSchedule(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (LunchInCompany(x) | LunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x hasLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | (-Manager(james) & -AppearInCompanyToday(james)))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x hasLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either (Manager(james) & AppearInCompany(james)) or (not Manager(james) & not AppearInCompany(james))\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompanyToday(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) & WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: -Manager(x) & WorkingRemotelyFromHome(x)\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x has lunchAtHome(x) then (WorkingRemotelyFromHome(x) | x is in other countries)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | (not Manager(james)) & (not AppearInCompanyToday(james)))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompanyToday(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Lunch(x) -> EitherHaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) & WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & NeitherAppearInCompanyToday(james)))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & NeitherAppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either (Manager(james) & AppearInCompany(james)) or (not Manager(james) & not AppearInCompany(james))\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompanyToday(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (LunchInCompany(x) | LunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x hasLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Lunch(x) -> Either(HaveLunchInCompany(x), HaveLunchAtHome(x)))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either (Manager(james) & AppearInCompanyToday(james)) or (not Manager(james) & not AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x has lunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x hasLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x has lunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & (-AppearInCompanyToday(james))))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x has lunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | (-Manager(james) & -AppearInCompanyToday(james)))\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingSchedule(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (LunchInCompany(x) | LunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x hasLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either James is Manager(james) & AppearInCompany(james) or -James is Manager(james) & -AppearInCompany(james)\n\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x has lunchAtHome(x) then x isWorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x has lunchAtHome(x) then -WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 3,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either James is Manager(james) & AppearInCompany(james) or -James is Manager(james) & -AppearInCompany(james)\n\nTEXT: James does not have lunch in the company.\nFOL: no lunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\n\nTEXT: James does not have lunch in the company.\nFOL: no lunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) & WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: -Manager(x) -> -WorkingRemotelyFromHome(x)\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x has lunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | (-Manager(james) & (-AppearInCompanyToday(james)))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x hasLunchAtHome(x) then WorkingRemoteFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: no x. (HaveLunchInCompany(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x haveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: no x. (HaveLunchInCompany(james))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | (-Manager(james) & NeitherAppearInCompanyToday(james)))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) & WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either (Manager(james) & AppearInCompany(james)) or (not Manager(james) & not AppearInCompany(james))\n\nTEXT: James does not have lunch in the company.\nFOL: no lunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x hasLunchAtHome(x) then WorkingRemoteFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) & WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James either (Manager(james) & AppearInCompany(james)) or (not Manager(james) & not AppearInCompany(james))\n\nTEXT: James does not have lunch in the company.\nFOL: not HaveLunchInCompany(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) & WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either (Manager(james) & AppearInCompany(james)) or (not Manager(james) & not AppearInCompany(james))\n\nTEXT: James does not have lunch in the company.\nFOL: no lunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompanyToday(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingSchedule(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Lunch(x) -> Either(HomeLunch(x), CompanyLunch(x)))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HomeLunch(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (Country(x) & HomeLunch(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingSchedule(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (LunchInCompany(x) | LunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemoteFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) -> WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompany(james) | (-Manager(james) & -AppearInCompany(james)))\n\nTEXT: James does not have lunch in the company.\nFOL: no x. (LunchInCompany(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemoteFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: no x. (HaveLunchInCompany(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: no x. (HaveLunchInCompany(james))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemoteFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) & WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompany(james) | -Manager(james) & -AppearInCompany(james))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingSchedule(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Lunch(x) -> Either(HomeLunch(x), CompanyLunch(x)))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HomeLunch(x) -> WorkingRemotely(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) -> WorkingRemotely(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemotely(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & NeitherAppearInCompany(james)))\n\nTEXT: James does not have lunch in the company.\nFOL: No lunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemoteFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (Location(x) & -InCompany(x) -> WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompany(james) | -Manager(james) & -AppearInCompany(james))\n\nTEXT: James does not have lunch in the company.\nFOL: no x. (HaveLunchInCompany(james))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemoteFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: exists x. (InOtherCountry(x) & WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) & WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: no x. (HaveLunchInCompany(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: either x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if x has lunchAtHome(x) then WorkingRemoteFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemoteFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemoteFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) & WorkingRemoteFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: either James is Manager(james) & AppearInCompany(james) or -Manager(james) & -AppearInCompany(james)\n\nTEXT: James does not have lunch in the company.\nFOL: no lunchInCompany(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetings(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (HaveLunchInCompany(x) | HaveLunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: if HaveLunchAtHome(x) then WorkingRemotelyFromHome(x)\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: No managers work remotely from home.\nFOL: no x. (Manager(x) -> WorkingRemotelyFromHome(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompanyToday(james) | -Manager(james) & -AppearInCompanyToday(james))\n\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (MeetingSchedule(x) -> AppearInCompany(x))\n\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingSchedule(x))\n\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (LunchInCompany(x) -> LunchAtHome(x))\n\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotely(x))\n\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotely(x))\n\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotely(x))\n\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: all x. (Manager(james) & AppearInCompany(james) | (-Manager(james) & -AppearInCompany(james)))\n\nTEXT: James does not have lunch in the company.\nFOL: no x. (LunchInCompany(james))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 4,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> virus(x) & infectious(x)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(x) -> occursIn(x, animals)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammal(x)\n\nTEXT: Mammals are animals.\nFOL: mammal(x) -> animal(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptons(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(x) -> feelTired(x, glu)\n\nTEXT: There is an animal.\nFOL: exists(x) -> animal(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox -> InfectiousDisease(monkeypox)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: monkeypoxVirus -> CanOccurIn(monkeypoxVirus, Animals)\n\nTEXT: Humans are mammals.\nFOL: humans -> Mammal(humans)\n\nTEXT: Mammals are animals.\nFOL: Mammal -> Animal(Mammal)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptonsOfMonkeypox -> (Fever(symptonsOfMonkeypox) & Headache(symptonsOfMonkeypox) & MusclePains(symptonsOfMonkeypox) & FeelingTired(symptonsOfMonkeypox))\n\nTEXT: People feel tired when they get a glu.\nFOL: peopleFeelTired -> (GetGlu(peopleFeelTired) & FeelTired(peopleFeelTired))\n\nTEXT: There is an animal.\nFOL: exists Animal -> (Animal(exists Animal) & Not(Nothing(exists Animal)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & MonkeypoxVirus(x) -> (Animals(x) & Humans(x)))\n\nTEXT: Humans are mammals.\nFOL: Humans(x) -> Mammals(x)\n\nTEXT: Mammals are animals.\nFOL: Mammals(x) -> Animals(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptoms(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x) & -On(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> infectiousDisease(x) & causedBy(x, monkeypoxVirus)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: monkeypoxVirus(x) -> occursIn(x, animals) & includesHumans(x)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammals(x)\n\nTEXT: Mammals are animals.\nFOL: mammals(x) -> animals(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptomsOfMonkeypox(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: people(x) -> feelsTired(x, glu)\n\nTEXT: There is an animal.\nFOL: exists(x) -> animal(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, MonkeypoxVirus))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Animal) & Monkeypox(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) -> MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, \"animals\"))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, MonkeypoxVirus))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) | (Fever(x) & Headache(x) & -MusclePains(x) & -FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> infectiousDisease(x) & causedBy(monkeypox virus, x)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: monkeypoxVirus(x) -> occurIn(certainAnimals, x) & includeHumans(x)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammals(x)\n\nTEXT: Mammals are animals.\nFOL: mammals(x) -> animals(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptonsOfMonkeypox(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: people(x) -> feelTired(x) & get(glu, x)\n\nTEXT: There is an animal.\nFOL: animal(x) -> exists(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> infectiousDisease(x) & causedBy(monkeypox(x), virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: monkeypoxVirus(x) -> canOccurIn(x, animals) & includesHumans(x)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammals(x)\n\nTEXT: Mammals are animals.\nFOL: mammals(x) -> animals(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptomsOfMonkeypox(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: people(x) -> feelTired(x) & get(x, glu)\n\nTEXT: There is an animal.\nFOL: exists(x) -> animal(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) -> MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, MonkeypoxVirus))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> infectiousDisease(x) & causedBy(x, monkeypoxVirus)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: monkeypoxVirus(x) -> occurIn(x, animals) & -exclude(x, humans)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammal(x)\n\nTEXT: Mammals are animals.\nFOL: mammals(x) -> animal(x)\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: monkeypox(x) -> symptoms(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: people(x) -> feelTired(x) -> getGlu(x)\n\nTEXT: There is an animal.\nFOL: animal(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(X) -> virus(X) & infectious(X)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(X) -> occursIn(X, animal) & includes(X, human)\n\nTEXT: Humans are mammals.\nFOL: human(X) -> mammal(X)\n\nTEXT: Mammals are animals.\nFOL: mammal(X) -> animal(X)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptons(X) -> (fever(X) & headache(X) & musclePains(X) & feelingTired(X))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(X) -> feelsTired(X, glu)\n\nTEXT: There is an animal.\nFOL: animal(X) -> exists(X)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 5,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Exist(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & MonkeypoxVirus(x) -> Animal(x) & Human(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) & Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) -> Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & Animals(x) & Humans(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Humans(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptoms(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & MonkeypoxVirus(x) & Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) -> Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(X) -> infectiousDisease(X) & virus(X)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(X) -> occursIn(X, animal) & includes(X, human)\n\nTEXT: Humans are mammals.\nFOL: human(X) -> mammal(X)\n\nTEXT: Mammals are animals.\nFOL: mammal(X) -> animal(X)\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptoms(X) -> (fever(X) & headache(X) & musclePains(X) & feelingTired(X))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(X) -> feelsTired(X) & gets(X, glu)\n\nTEXT: No one gets flu.\nFOL: noOne(X) -> noGets(X, flu)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(X) -> virus(X) & infectious(X)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(X) -> canOccurIn(X, animal)\n\nTEXT: Humans are mammals.\nFOL: human(X) -> mammal(X)\n\nTEXT: Mammals are animals.\nFOL: mammal(X) -> animal(X)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptoms(X) -> (fever(X) & headache(X) & musclePains(X) & feelingTired(X))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(X) -> feelTired(X, glu)\n\nTEXT: No one gets flu.\nFOL: noOne(X) -> noFlu(X)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Any(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) & Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (-GetFlu(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & MonkeypoxVirus(x) & Animal(x) & -Human(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) -> MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Animals))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) )\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Any(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> virus(x) & infectious(x)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(x) -> canOccurIn(x, animals)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammal(x)\n\nTEXT: Mammals are animals.\nFOL: mammal(x) -> animal(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptons(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(x) -> feelTired(x, glu)\n\nTEXT: No one gets flu.\nFOL: noOne(x) -> -getFlu(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & MonkeypoxVirus(x) & Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelingTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Any(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Exist(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & MonkeypoxVirus(x) & Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelingTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) -> Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Exist(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Exist(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, MonkeypoxVirus))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (Flu(x) -> -GetFlu(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (-GetFlu(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & CanOccurIn(x, \"animals\"))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Any(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: No one gets flu.\nFOL: all x. (GetFlu(x) -> -Exist(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox -> InfectiousDisease(monkeypox)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: monkeypox -> Virus(monkeypox) -> CanOccurIn(animals, humans)\n\nTEXT: Humans are mammals.\nFOL: humans -> Mammal(humans)\n\nTEXT: Mammals are animals.\nFOL: mammals -> Animal(mammals)\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: monkeypox -> Symptoms(monkeypox) -> (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & FeelingTired(monkeypox))\n\nTEXT: People feel tired when they get a glu.\nFOL: people -> FeelTired(people) -> (GetGlu(people) -> Tired(people))\n\nTEXT: No one gets flu.\nFOL: no one -> NoGetFlu(no one)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 6,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x) & Monkeypox(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) -> Animal(x) & Human(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptoms(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Animal(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelingTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptoms(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x) & Monkeypox(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) -> MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) -> (Animals(x) & -Humans(x)) | (-Virus(x) & Animals(x) & Humans(x)))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) | (-Symptom(x) & Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptoms of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x) & Monkeypox(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> virus(x) & infectious(x)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(x) -> occursIn(x, Animal) & includes(x, Human)\n\nTEXT: Humans are mammals.\nFOL: Human(x) -> Mammal(x)\n\nTEXT: Mammals are animals.\nFOL: Mammal(x) -> Animal(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: monkeypox(x) -> symptoms(x) & (fever(x) & headache(x) & musclePains(x) & feelingTired(x) & soOn(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(x) -> feelsTired(x, glu)\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: monkeypox(x) -> symptoms(x) & coughing(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Animal(x)))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: Symptoms of Monkeypox include coughing.\nFOL: all x. (Symptom(x) -> Coughing(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x) & Monkeypox(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) & Animal(x) & -Human(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) -> MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) -> (Animals(x) & Humans(x)))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Humans(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptoms(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptoms(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> virus(x) & infectiousDisease(x)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(x) -> canOccurIn(x, animals)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammal(x)\n\nTEXT: Mammals are animals.\nFOL: mammal(x) -> animal(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptons(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(x) -> feelTired(x, glu)\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: symptons(x) -> coughing(x)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> virus(x) & infectiousDisease(x)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(x) -> canOccurIn(x, animals)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammal(x)\n\nTEXT: Mammals are animals.\nFOL: mammal(x) -> animal(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: monkeypox(x) -> symptoms(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(x) -> get(x, glu) -> feelingTired(x)\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: monkeypox(x) -> symptoms(x) -> coughing(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> virus(x) & infectious(x)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(x) -> canOccurIn(x, animals)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammal(x)\n\nTEXT: Mammals are animals.\nFOL: mammal(x) -> animal(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptons(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: people(x) -> feelTired(x, glu)\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: symptons(x) -> coughing(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & MonkeypoxVirus(x) & Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) & Monkeypox(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Symptom(x) -> Coughing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) & MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, MonkeypoxVirus))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Symptom(x) -> Coughing(x) & Monkeypox(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) -> Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Symptom(x) -> (Coughing(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: monkeypox(x) -> virus(x) & infectiousDisease(x)\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: virus(x) -> canOccurIn(x, animals)\n\nTEXT: Humans are mammals.\nFOL: humans(x) -> mammal(x)\n\nTEXT: Mammals are animals.\nFOL: mammal(x) -> animal(x)\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: symptons(x) -> (fever(x) & headache(x) & musclePains(x) & feelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: person(x) -> feelTired(x, glu)\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: symptons(x) -> coughing(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x) & Monkeypox(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) -> Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) & Animal(x) & -Human(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelingTired(x))\n\nTEXT: Symptoms of Monkeypox include coughing.\nFOL: all x. (Symptom(x) -> (Coughing(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x) & Monkeypox(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (MonkeypoxVirus(x) & Animal(x) & -Human(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Symptom(x) -> (Coughing(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x) & Virus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) & Monkeypox(x) & Animal(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Symptom(x) -> (Coughing(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Monkeypox(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) -> CanOccurIn(x, Monkeypox))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Animal(x) -> Mammal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)) & Monkeypox(x))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> FeelTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptom(x) & Monkeypox(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: all x. (InfectiousDisease(x) -> Virus(x) -> MonkeypoxVirus(x))\n\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Virus(x) -> (Animals(x) & Human(x)))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\n\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptoms(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\n\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (Coughing(x) -> Symptoms(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 7,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SoldMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SomeNumberGreaterThanOneMillion(LegendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (GameInTop10List(x) & LegendOfZelda(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> (SellMoreThanOneMillion Copies(x) & InTop10List(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> SoldMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10List(legendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10(x) -> GameCompany(x) & Japanese(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (SellMoreThanOneMillion(x) & GameInTop10(x, \"The Legend of Zelda\"))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10List(theLegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SellMoreThanOneMillion Copies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (LegendOfZelda(x) & Top10List(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> SelectIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (SellMoreThanOneMillionCopies(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (GameInTop10List(x) & GameName(x) -> LegendOfZelda(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (MadeByJapaneseCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (SellMoreThanOneMillion Copies(x) -> (TheLegendOfZelda(x) & MoreThanOneMillionCopiesSold(x)))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (InTop10List(x) & TheLegendOfZelda(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SellMoreThanOneMillion Copies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (LegendOfZelda(x) & Top10List(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SellMoreThanOneMillionCopies(x) -> GetSelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10ListContains(LegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> SoldMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10ListContains(legendOfZelda)\n\n</EVALUATE>"
   ],
   [
    "  \"<EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & Top10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillionCopies(x) -> Top10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10List(legendOfZelda)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SoldMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SoldMoreThanOneMillion Copies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (LegendOfZelda(x) & Top10List(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (MadeByJapaneseGameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> (SoldMoreThanOneMillion Copies(x) & InTop10List(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & Top10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> (SellMoreThanOneMillion Copies(x) & Top10List(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10List(legendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SoldMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (SoldMoreThanOneMillionCopies(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (GameInTop10List(x) & GameName(x) -> LegendOfZelda(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\")\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (SellMoreThanOneMillion Copies(x) & Game(x) -> \"The Legend of Zelda\")\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (InTop10List(x) & Game(x) -> \"The Legend of Zelda\")\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SoldMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SoldMoreThanOneMillion Copies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (LegendOfZelda(x) & GameInTop10(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\")).\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x))).\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> InTop10List(x)).\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (SellMoreThanOneMillion Copies(x) & Game(x) -> \"The Legend of Zelda\")).\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (InTop10List(x) & Game(x) -> \"The Legend of Zelda\")).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\") )\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SoldMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (SoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (LegendOfZelda(x) & InTop10List(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellCopies(x) -> SelectedInTop10(x, \"The Legend of Zelda\"))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (SellCopies(x) -> MoreThanOneMillion(x, \"The Legend of Zelda\"))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (Top10List(x) -> ContainsGame(x, \"The Legend of Zelda\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: exists x. (LegendOfZelda(x) & InTop10List(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(TheLegendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(TheLegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (Top10List(x) & GameCompany(x) & JapaneseGameCompany(x)))\n\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> Top10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: moreThanOneMillionCopiesSold(TheLegendOfZelda)\n\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10List(TheLegendOfZelda)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 8,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> Created(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (Top10List(x) & GameCompany(x)))]\n\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. ((SellMoreThanOneMillion(x) & Game(x)) -> Top10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (SellMoreThanOneMillion(x) & Game(x) & MoreThanOneMillionSold(x))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (GameCompany(x) & Game(x) & FIFA22(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> (x = \"The Legend of Zelda\"))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) & = \"FIFA 22\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\") )\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10(x)) )\n\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Sold(x, \"More Than One Million Copies\") & InTop10(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x, \"FIFA 22\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & Top10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> (SellMoreThanOneMillion Copies(x) & Top10List(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & VideoGameCompany(x) & MadeGame(x, \"FIFA 22\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (Sell Copies(x) -> SelectedInTop10(x, \"The Legend of Zelda\"))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (SellCopies(x) -> MoreThanOneMillion(x, \"The Legend of Zelda\"))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) & -\"The Legend of Zelda\"(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(theLegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) & EqualTo(\"FIFA 22\")\n\n</EVALUATE>\n\nNote: In FOL, the \"exists\" quantifier is used to indicate that the statement is true for at least one instance of the variable x. For example, \"exists x. (Game(x) & Created(x, \"The Legend of Zelda\"))\" means that there exists at least one game that was created by a Japanese game company and has the name \"The Legend of Zelda\".",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion(x) -> InTop10(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionSold(TheLegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) & EqualTo(\"FIFA 22\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (GameCompany(x) & MadeGame(x) & GameName(x) -> FIFA22(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> SoldMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) -> MadeByJapaneseVideoGameCompany(x) & x = FIFA22)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SomeNumberGreaterThanOneMillion(LegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (GameCompany(x) & MadeGame(x) & GameName(x) -> FIFA22(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellCopies(x) -> SelectedInTop10(x, \"The Legend of Zelda\"))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SellCopies(x) -> MoreThanOneMillion(x, \"The Legend of Zelda\"))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) & -TheLegendOfZelda(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (SellMoreThanOneMillion Copies(x) -> LegendOfZelda(x))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (VideoGameCompany(x) & MadeGame(x, \"FIFA 22\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) -> FIFA22(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> (SoldMoreThanOneMillion(x) & InTop10(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionSold(TheLegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x, \"FIFA 22\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (Top10List(x) & GameCompany(x) & JapaneseGameCompany(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> Top10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (SoldMoreThanOneMillion Copies(x) -> TheLegendOfZelda(x))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (VideoGameCompany(x) & MadeGame(x, \"FIFA 22\"))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (SoldMoreThanOneMillion Copies(x) -> TheLegendOfZelda(x))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) & = \"FIFA 22\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\")).\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x))).\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillionCopies(x) -> InTop10List(x)).\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(theLegendOfZelda).\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) & = \"FIFA 22\").\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SomeNumberGreaterThanOneMillion(TheLegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (VideoGameCompany(x) & MadeGame(x, \"FIFA 22\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (GameCompany(x) & MadeGame(x, \"FIFA 22\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: moreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (GameCompany(x) & MadeGame(x) & GameName(x) -> FIFA22(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\")).\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x))).\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10List(x))).\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(theLegendOfZelda).\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & MadeByJapaneseCompany(x) & EqualTo(\"FIFA 22\")).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & MadeGameInTop10(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SoldMoreThanOneMillionCopies(x) -> SelectedIntoTop10(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: Some x. (SoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x))\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (VideoGameCompany(x) & MadeGameFIFA22(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\")).\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10(x))).\n\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> InTop10(x))).\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: moreThanOneMillionSold(legendOfZelda).\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (GameCompany(x) & Made(x, \"FIFA 22\")).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> (SellMoreThanOneMillion Copies(x) & InTop10List(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (Game(x) & (GameCompany(x) & =(\"EA Sports\") & =(\"FIFA 22\"))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SomeNumberGreaterThanOneMillion(TheLegendOfZelda)\n\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: exists x. (GameCompany(x) & MadeGame(x, \"FIFA 22\"))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 9,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SoldMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(LegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(LegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\")).\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x))).\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillionCopies(x) -> InTop10List(x))).\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x)).\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(LegendOfZelda).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (Sell Copies(x) -> (InTop10List(x) & >1Million(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThan1Million(theLegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(theLegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> SoldMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -SelectedIntoTop10List(legendOfZelda)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SoldMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(LegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) -> (SellMoreThanOneMillion Copies(x) & InTop10List(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(legendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (Top10List(x) & GameCompany(x) & JapaneseGameCompany(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> Top10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SellMoreThanOneMillion Copies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: not exists x. (Top10List(x) & LegendOfZelda(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x)) -> InTop10List(x)\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(TheLegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(TheLegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellCopies(x) -> (InTop10List(x) & >1Million(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreCopiesSold(TheLegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(TheLegendOfZelda)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(LegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(LegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\")\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(legendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(legendOfZelda)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (GameInTop10List(x) -> GameMadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SoldMoreThanOneMillionCopies(x) -> SelectIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(LegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(LegendOfZelda)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (Top10List(x) & GameCompany(x) -> JapaneseGameCompany(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> Top10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (SellMoreThanOneMillion Copies(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10List(LegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\")).\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x))).\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillion Copies(x) -> InTop10List(x)).\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda).\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(legendOfZelda).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & Created(x, \"The Legend of Zelda\")\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (SoldMoreThanOneMillionCopies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SoldMoreThanOneMillionCopies(\"The Legend of Zelda\")\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(\"The Legend of Zelda\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x) & GameName(x) -> LegendOfZelda(x))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & Top10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: exists x. (Game(x) & SoldMoreThanOneMillionCopies(x) -> Top10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(LegendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10List(LegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\")).\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x))).\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellCopies(x) -> (InTop10List(x) & MoreThanOneMillion(x))).\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: exists x. (SellCopies(x) & MoreThanOneMillion(x) & Game(x) -> TheLegendOfZelda(x)).\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: exists x. (InTop10List(x) -> (-TheLegendOfZelda(x))).\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (GameCompany(x) & CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (GameCompany(x) & InTop10List(x)))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(legendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> (Top10List(x) & GameCompany(x) & JapaneseGameCompany(x)))\n\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. ((SellMoreThanOneMillion Copies(x) -> Top10List(x)))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: moreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: notInTop10List(legendOfZelda)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SellMoreThanOneMillionCopies(x) & Game(x) -> TheLegendOfZelda(x))\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -SelectedIntoTop10List(TheLegendOfZelda)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseGameCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: some x. (SoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x))\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -SelectedIntoTop10List(LegendOfZelda)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (GameCompany(x) -> CreatedGame(x, \"The Legend of Zelda\"))\n\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Game(x) -> MadeByJapaneseCompany(x))\n\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion Copies(x) -> SelectedIntoTop10List(x))\n\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopiesSold(legendOfZelda)\n\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: NotInTop10List(legendOfZelda)\n\n</EVALUATE>\""
   ]
  ]
 },
 {
  "index": 10,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\n\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\n\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 11,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: exists x. (Rock(x) -> Still(x))\n\nTEXT: Rock is a turtle.\nFOL: exists x. (Rock(x) -> Turtle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is a turtle.\nFOL: all x. (Rock(x) -> Turtle(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)) )\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: exists x. (Rock(x) -> Still(x))\n\nTEXT: Rock is a turtle.\nFOL: exists x. (Rock(x) -> Turtle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my response:\n\n<EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(rock) -> Still(rock)\n\nTEXT: Rock is a turtle.\nFOL: Rock(rock) -> Turtle(rock)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is a turtle.\nFOL: exists x. (Rock(x) & Turtle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)) )\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 12,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is not a turtle.\nFOL: all x. (Rock(x) -> NotTurtle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the FOL translation for each sentence in SENTENCES:\n\n<EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(rock) -> Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: Rock(rock) -> NotTurtle(rock)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or if you'd like me to translate any other sentences.",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: exists x. (Rock(x) -> Still(x))\n\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> exists y. (Turtle(y)))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is not a turtle.\nFOL: all x. (Rock(x) -> NotTurtle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: exists x. (Rock(x) -> Still(x))\n\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> exists y. (Turtle(y)))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> either (Rabbit(x)) (Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is not a turtle.\nFOL: not exists x. (Rock(x) & Turtle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is not a turtle.\nFOL: all x. (Rock(x) -> NotTurtle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: exists x. (Rock(x) -> Still(x))\n\nTEXT: Rock is not a turtle.\nFOL: exists x. (Rock(x) -> NotTurtle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is not a turtle.\nFOL: all x. (Rock(x) -> NotTurtle(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> exists y. (Rock(y) & Not(Turtle(y)))))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> Not(Still(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: Not(Turtle(rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: still Rock\n\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is not a turtle.\nFOL: NotTurtle(rock)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 13,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: exists x. (Rock(x) -> (Turtle(x) | Cute(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: exists x. (Rock(x) -> (Turtle(x) | Cute(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: Rock either Turtle() or Cute()\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Rock(x) -> Turtle(x) | Cute(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: all x. (Rock(x) -> Still(x))\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: Rock(rock) -> (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: exists x. (Rock(x) -> (Turtle(x) | Cute(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: Rock(rock) -> (Turtle(rock) | Cute(rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: exists x. (Turtle(x) | Cute(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: Rock(rock) -> (Turtle(rock) | Cute(rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))(rock)",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: Rock(rock) -> (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: exists x. (Rock(x) -> (Turtle(x) | Cute(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: exists x. (Turtle(x) & Cute(x) | -Turtle(x) & -Cute(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: exists x. (Rock(x) -> Either(Turtle(x), Cute(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: Rock either Turtle() or Cute()\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: NotSkittish(rock)\n\nTEXT: Rock is a turtle or cute.\nFOL: either x. (Turtle(x) | Cute(x))(rock)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 14,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (Turtle(x) & Squirrel(x) -> (-Cute(x) & -Skittish(x)) | (Cute(x) & Skittish(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. ((-Turtle(x) & -Squirrel(x)) | (Cute(x) & Skittish(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(x) -> Still(x)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (-Turtle(x) & -Squirrel(x) | (Cute(x) | Skittish(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (Rock -> (Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: either x. (Rock -> (Cute(x) | Skittish(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: Rock -> Either(Cute(Rock), Skittish(Rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (Rock -> (Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(x) -> Still(x)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (!(Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(x) -> Still(x)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (-Turtle(x) & -Squirrel(x)) -> (Cute(x) | Skittish(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: Rock -> Either(Cute(Rock), Skittish(Rock))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(x) -> Still(x)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (Rock(x) & (-Turtle(x) & -Squirrel(x)) | (Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: all x. (Turtle(x) & Squirrel(x) -> (Cute(x) | Skittish(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(rock) -> Still(rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (Rock(x) & (-Turtle(x) & -Squirrel(x)) | (Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (Rock -> (Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(x) -> Still(x)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. ((-Turtle(x) & -Squirrel(x)) | (Cute(x) & Skittish(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: Rock is either Cute(rock) or Skittish(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(rock) -> Still(rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (!(Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: all x. ((-Turtle(Rock) & -Squirrel(Rock)) | (Cute(Rock) & Skittish(Rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (Rock -> (Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x))))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(rock) -> Still(rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (-Turtle(x) & -Squirrel(x)) -> (Cute(x) | Skittish(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(rock) -> Still(rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (-Turtle(x) & -Squirrel(x)) -> (Cute(x) | Skittish(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: all x. ((-Turtle(Rock) & -Squirrel(Rock)) | (-Turtle(Rock) & Squirrel(Rock))) -> (Cute(Rock) | Skittish(Rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: all x. (Rock -> (Cute(x) | Skittish(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: all x. ((-Turtle(Rock) & -Squirrel(Rock)) | (-Turtle(Rock) & Squirrel(Rock))) -> Either(Cute(Rock), Skittish(Rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock(rock) -> Still(rock)\n\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: exists x. (-Turtle(x) & -Squirrel(x) | (Cute(x) | Skittish(x)))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 15,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: Cute(rock) & Still(rock) -> Turtle(rock) & Skittish(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. (Cute(rock) & Still(rock) -> Turtle(rock) & Skittish(rock))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Rock -> Still(Rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: Rock -> (Cute(Rock) & Still(Rock)) -> Turtle(Rock) & Skittish(Rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> Either(Rabbit(x), Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. (Cute(rock) & Still(rock) -> Turtle(rock) & Skittish(rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: cute(rock) & still(rock) -> turtle(rock) & skittish(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: exists x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: cute(rock) & still(rock) -> turtle(rock) & skittish(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: cute(rock) & still(rock) -> Turtle(rock) & Skittish(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: exists x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: cute(rock) & Still(rock) -> Turtle(rock) & Skittish(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: Cute(rock) & Still(rock) -> Turtle(rock) & Skittish(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. (Cute(rock) & Still(rock) -> Turtle(rock) & Skittish(rock))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. (Cute(rock) & Still(rock) -> Turtle(rock) & Skittish(rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x) -> Exist(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: cute(rock) & Still(rock) -> Turtle(rock) & Skittish(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All rabbits are cute.\nFOL: all x. (Cute(x) -> Rabbit(x))\n\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\n\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: exists x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> NotStill(x))\n\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nTEXT: Rock is still.\nFOL: Still(rock)\n\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: all x. ((Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 16,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularNetflixShow(x) -> StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(Karen, StrangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularNetflixShow(x) -> StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(\"Stranger Things\", Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularNetflixShow(x) -> StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(Karen, StrangerThings, Lisa)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularNetflixShow(x) -> StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: all x. (Download(x) -> -BlackMirror(x))\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: all x. (BlackMirror(x) -> NetflixShow(x))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(StrangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x) & StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: exists x. (Download(x, Karen) -> -BlackMirror(x))\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: all x. (BlackMirror(x) -> NetflixShow(x))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(StrangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: shareToLisa(Karen, strangerThings)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (Popular(StrangerThings) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(show) -> BingeWatch(Karen, show))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(Karen, show) -> Download(Karen, show))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(NetflixShow)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(Karen, show) -> Share(Karen, show, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(Karen, StrangerThings, Lisa)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (NetflixShow(x) -> Popular(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(x) -> BingeWatch(Karen, x))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(Karen, x) & NetflixShow(x)) -> Download(Karen, x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(Karen, x) -> Share(Karen, x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(Karen, StrangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x) & StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(Karen, StrangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, x) -> -blackMirror(x)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: shareToLisa(Karen, strangerThings)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror is NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: shareToLisa(Karen, strangerThings)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: exists x. (NetflixShow(x) & -BlackMirror(x))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, x) -> -BlackMirror(x)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: shareToLisa(Karen, strangerThings)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x) & StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: exists x. (-Download(x, Karen) & BlackMirror(x))\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: all x. (BlackMirror(x) -> NetflixShow(x))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(StrangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: shareToLisa(Karen, strangerThings)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x) & StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(StrangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularNetflixShow(x) -> StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: exists x. (NetflixShow(x) & Download(x, Karen) -> -BlackMirror(x))\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: all x. (NetflixShow(x) -> BlackMirror(x))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(StrangerThings, Lisa)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) -> Download(x)) & BingeWatch(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(\"Stranger Things\", Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, x) -> -BlackMirror(x)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: share(Karen, Lisa, strangerThings)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: exists x. (Download(x) -> -BlackMirror(x))\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: all x. (BlackMirror(x) -> NetflixShow(x))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(StrangerThings, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror is NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: shareToLisa(Karen, strangerThings)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (Popular(StrangerThings) & NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(show) -> BingeWatch(Karen, show))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(Karen, show) -> Download(Karen, show)) & BingeWatch(Karen, show))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(NetflixShow)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(Karen, show) -> Share(Karen, show, Lisa))\n\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(Karen, StrangerThings, Lisa)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 17,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x) & StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: BlackMirror(x) -> PopularShow(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popular(blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> netflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popular(blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: BlackMirror(x) -> PopularShow(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (NetflixShow(x) -> Popular(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(x) -> BingeWatch(Karen, x))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(Karen, x) & NetflixShow(x)) -> Download(Karen, x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(Karen, x) -> Share(Karen, x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(BlackMirror)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularShow(blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (NetflixShow(x) -> Popular(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(x) -> BingeWatch(Karen, x))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(Karen, x) & NetflixShow(x)) -> Download(Karen, x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(Karen, x) -> Share(Karen, x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: all x. (Popular(x) -> BlackMirror(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularShow(blackMirror)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popular(blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror is NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popular(blackMirror)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (Popular(StrangerThings) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(show) -> BingeWatch(Karen, show))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(Karen, show) -> Download(Karen, show))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(NetflixShow(BlackMirror))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(Karen, show) -> Share(Karen, show, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: BlackMirror(Popular(BlackMirror))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x) & StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: all x. (Download(x) -> -BlackMirror(x))\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: all x. (BlackMirror(x) -> NetflixShow(x))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: all x. (PopularShow(x) -> BlackMirror(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (NetflixShow(x) -> Popular(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(x) -> BingeWatch(Karen, x))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((Karen(x) & BingeWatch(Karen, x)) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(Karen, x) -> Share(Karen, x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularShow(blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x) & StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: BlackMirror(x) -> PopularShow(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, \"Black Mirror\") -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: netflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularNetflixShow(BlackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popular(blackMirror)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (NetflixShow(x) -> Popular(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(x) -> BingeWatch(Karen, x))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(Karen, x) & NetflixShow(x)) -> Download(Karen, x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(Karen, x) -> Share(Karen, x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: all x. (Popular(x) & NetflixShow(x) & BlackMirror(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, \"Black Mirror\")\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularShow(\"Black Mirror\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (Popular(StrangerThings) & NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(show) -> BingeWatch(Karen, show))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(Karen, show) -> Download(Karen, show))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror is NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(Karen, show) -> Share(Karen, show, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: BlackMirror is Popular(BlackMirror)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularShow(blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularShow(blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x) & StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: BlackMirror(x) -> Popular(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularShow(blackMirror)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: \"Black Mirror\" is popular.\nFOL: popularShow(blackMirror)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 18,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularNetflixShow(x) -> StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> ShareToLisa(x))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(\"Black Mirror\", Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: share(Karen, Lisa, blackMirror)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: share(Karen, Lisa, blackMirror) -> true\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(\"Black Mirror\", Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: share(Karen, Lisa, blackMirror) -> true\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (NetflixShow(x) -> Popular(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(x) -> BingeWatch(Karen, x))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(Karen, x) -> Download(Karen, x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, \"Black Mirror\")\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(Karen, Lisa, \"Black Mirror\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: share(Karen, Lisa, blackMirror)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularNetflixShow(x) -> StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: exists x. (Download(x, Karen) & -NetflixShow(x) & BlackMirror(x))\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (NetflixShow(x) -> Popular(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(x) -> BingeWatch(Karen, x))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(Karen, x) & NetflixShow(x)) -> Download(Karen, x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(NetflixShow)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(Karen, x) -> Share(Karen, Lisa, x))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(Karen, Lisa, BlackMirror)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: share(Karen, Lisa, blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(BlackMirror, Lisa)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, \"Black Mirror\") -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: netflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: shareToLisa(Karen, \"Black Mirror\") -> true\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: share(Karen, Lisa, blackMirror)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror is NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: shareToLisa(Karen, blackMirror)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: shareToLisa(Karen, blackMirror)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, \"Black Mirror\") -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: netflixShow(BlackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: shareToLisa(Karen, \"Black Mirror\")\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((ingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (ingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(\"Black Mirror\", Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularNetflixShow(x) -> StrangerThings(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, Karen)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: all x. (PopularShow(x) -> NetflixShow(x))\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularShow(x) -> BingeWatch(x, Karen))\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x))\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror)\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: all x. (NetflixShow(x) -> BlackMirror(x))\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, Karen) -> Share(x, Lisa))\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, Lisa)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror(x) -> NetflixShow(x)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> share(Karen, Lisa, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: share(Karen, Lisa, blackMirror) -> true\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: popularNetflixShow(strangerThings)\n\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: popularNetflixShow(x) -> bingeWatch(Karen, x)\n\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: bingeWatch(Karen, x) -> download(Karen, x)\n\nTEXT: Karen does not download \"Black Mirror\".\nFOL: download(Karen, blackMirror) -> false\n\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: blackMirror is NetflixShow(blackMirror)\n\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: bingeWatch(Karen, x) -> shareToLisa(Karen, x)\n\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: shareToLisa(Karen, blackMirror)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 19,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedGames(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedGames(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympicsGames(x) & WinterParalympicsGames(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x) -> Universities(x))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (HostedGames(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x, 2008) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x, Summer) & Hosted(x, Winter) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x, AsiaPacific) & RankedAmongBest(x, World))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x, 2008) & Hosted(x, Winter))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulous(Beijing) -> NationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: located(Beijing) -> NorthernChina(Beijing)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing) -> SummerOlympics(2008) & SummerParalympicsGames(2008)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing) -> SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many(Beijing) -> Universities(Beijing) -> Rank(Beijing) -> AsiaPacific & World\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: hosted(Beijing) -> SummerOlympics(2008) & WinterOlympics(Beijing)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulous(Beijing) -> NationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: located(Beijing) -> NorthernChina(Beijing)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing) -> SummerOlympics(2008) & SummerParalympicsGames(2008)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing) -> SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many(Beijing) -> Universities(Beijing) -> RankAmong(best, AsiaPacific, world)\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: hosted(Beijing) -> SummerOlympics(2008) & WinterOlympics\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing) -> Beijing\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympicsGames) -> Beijing\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics) -> Beijing\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (consistentlyRank(Beijing, bestInAsiaPacific) & consistentlyRank(Beijing, bestInTheWorld))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, winterOlympics) -> Beijing\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (CapitalOfChina(x) -> Beijing(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedOlympicsAndParalympics(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedBothSummerAndWinterOlympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBestUniversities(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (HostedOlympicsAndWinterOlympics(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capitalOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hostedOlympicsAndParalympicsGames(Beijing, 2008)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hostedOlympicsAndParalympics(Beijing, bothSummerWinter)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: rankedAmongBestUniversities(Beijing, AsiaPacific, world)\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: hostedOlympics(Beijing, 2008, winter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing) -> Beijing\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympicsGames) -> Beijing\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics) -> Beijing\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (consistentlyRank(Beijing, bestInAsiaPacific) & consistentlyRank(Beijing, bestInWorld))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, winterOlympics) -> Beijing\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x, \"2008 Summer Olympics\") & Hosted(x, \"2008 Summer Paralympics Games\"))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x, \"Summer Olympics\") & Hosted(x, \"Winter Olympics\")) & (Hosted(x, \"Summer Paralympics\") & Hosted(x, \"Winter Paralympics\"))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x, \"Asia-Pacific\") & RankedAmongBest(x, \"world\"))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x, \"2008 Summer Olympics\") & Hosted(x, \"winter Olympics\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedSummerOlympicsAndSummerParalympicsGames(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedSummerAndWinterOlympics(x) & HostedSummerAndWinterParalympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBestInAsiaPacificAndWorld(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (HostedSummerOlympicsAnd(x) & HostedWinterOlympics(x) -> Beijing(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedIn(x, \"Northern China\") -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x, \"2008 Summer Olympics\") & Hosted(x, \"2008 Summer Paralympics Games\")) -> Beijing(x)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x, \"Summer Olympics\") & Hosted(x, \"Winter Olympics\")) | (Hosted(x, \"Summer Paralympics\") & Hosted(x, \"Winter Paralympics\")) -> Beijing(x)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x, \"Asia-Pacific\") & RankedAmongBest(x, \"world\")) -> Beijing(x)\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x, \"2008 Summer Olympics\") & Hosted(x, \"winter Olympics\")) -> Beijing(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Host(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Host(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Host(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedGames(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedGames(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympicsGames(x) & WinterParalympicsGames(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedUniversities(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (HostedGames(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (CapitalOfChina(x) -> Beijing(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedOlympicsAndParalympics(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedBothSummerAndWinterOlympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBestUniversities(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (HostedOlympicsAndWinterOlympics(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedSummerOlympicsAndSummerParalympicsGames(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedSummerAndWinterOlympics(x) & HostedSummerAndWinterParalympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (ConsistentlyRankAmongTheBest(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (HostedSummerOlympics(x) & HostedWinterOlympics(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 20,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (NorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (SummerOlympics(x) & SummerParalympicsGames(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (SummerOlympics(x) & WinterOlympics(x) & SummerParalympics(x) & WinterParalympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Universities(x) -> (RankAmongBest(x) & AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (SouthernChina(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (CapitalOfChina(x) -> Beijing(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (MostPopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedOlympicsAndParalympicsGames(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedBothSummerAndWinterOlympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBestUniversities(x) -> Beijing(x))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (LocatedInSouthernChina(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (CapitalOfChina(x) -> Beijing(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (MostPopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedOlympicsAndParalympicsGames(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedBothSummerAndWinterOlympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBestUniversities(x) -> Beijing(x))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (LocatedInSouthernChina(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Host(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Host(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)) & (University(x) & -NotConsistentlyRankedAmongTheBest(x)))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankAmongBest(x) -> Universities(x))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> World(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008, SummerOlympics & 2008, SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> rankAmong(bestInAsiaPacific & bestInTheWorld)\n\nTEXT: Beijing is located in southern China.\nFOL: locatedIn(Beijing, SouthernChina)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Host(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Host(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> World(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing) -> NorthernChina(Beijing)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, SummerOlympics2008, SummerParalympicsGames2008) -> Games(Beijing, SummerOlympics2008, SummerParalympicsGames2008)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics, WinterOlympics, SummerParalympics, WinterParalympics) -> Games(Beijing, SummerOlympics, WinterOlympics, SummerParalympics, WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> RankAmongBest(Beijing, Asia-Pacific, World)\n\nTEXT: Beijing is located in southern China.\nFOL: locatedInSouthernChina(Beijing) -> SouthernChina(Beijing)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedIn(x, \"Northern China\") -> China(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x, \"2008 Summer Olympics\") & Hosted(x, \"2008 Summer Paralympics Games\"))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x, \"Summer Olympics\") & Hosted(x, \"Winter Olympics\")) | (Hosted(x, \"Summer Paralympics\") & Hosted(x, \"Winter Paralympics\"))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x, \"Asia-Pacific\") & RankedAmongBest(x, \"world\"))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (LocatedIn(x, \"southern China\") -> China(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (CapitalOfChina(x) -> Beijing(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedOlympicsAndParalympics(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedBothSummerAndWinterOlympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBestUniversities(x) -> Beijing(x))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (LocatedInSouthernChina(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (NorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (SummerOlympics(x) & SummerParalympicsGames(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. ((SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankAmongBest(x) -> Universities(x))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (SouthernChina(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (CapitalOfChina(x) -> Beijing(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (NorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedOlympicsAndParalympics(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedBothSummerAndWinterOlympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBestUniversities(x) -> Beijing(x))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (SouthernChina(x) -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capitalOf(Beijing, People'sRepublicOfChina)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008, SummerOlympics & 2008, SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: rankedAmongBest(Beijing, universities, Asia-Pacific & world)\n\nTEXT: Beijing is located in southern China.\nFOL: locatedIn(Beijing, SouthernChina)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capitalOf(Beijing, People'sRepublicOfChina)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, SummerOlympics, 2008) & hosted(Beijing, SummerParalympics, 2008)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) & rankAmong(universities, Asia-Pacific, world)\n\nTEXT: Beijing is located in southern China.\nFOL: locatedIn(Beijing, SouthernChina)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulous(Beijing) -> NationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: location(Beijing) -> NorthernChina(Beijing)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing) -> SummerOlympics(2008) & SummerParalympicsGames(2008)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing) -> SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many(Beijing) -> Universities(Beijing) -> rank(among) -> best(in) -> AsiaPacific & world\n\nTEXT: Beijing is located in southern China.\nFOL: location(Beijing) -> SouthernChina(Beijing)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousCapitalCity(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: location(Beijing) -> NorthernChina(Beijing)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: bothSummerAndWinterOlympics(Beijing) & bothSummerAndWinterParalympics(Beijing)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (consistentlyRank(Beijing, Asia-Pacific) & consistentlyRank(Beijing, world))\n\nTEXT: Beijing is located in southern China.\nFOL: location(Beijing) -> SouthernChina(Beijing)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankAmongBest(x) -> Universities(x) & AsiaPacific(x) & World(x))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing) -> Beijing\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympicsGames) -> Beijing\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics) -> Beijing\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (consistentlyRank(universities, Asia-Pacific) & consistentlyRank(universities, world)) -> Beijing\n\nTEXT: Beijing is located in southern China.\nFOL: locatedInSouthernChina(Beijing) -> Beijing\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Host(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Host(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is located in southern China.\nFOL: all x. (Location(x) -> SouthernChina(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing) -> Beijing\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympicsGames) -> Beijing\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics) -> Beijing\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (rankAmongTheBest(universities) & locatedInAsiaPacific(universities)) -> Beijing\n\nTEXT: Beijing is located in southern China.\nFOL: locatedInSouthernChina(Beijing) -> Beijing\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics, 2008SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics, WinterOlympics, SummerParalympics, WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (consistentlyRank(universities, bestInAsiaPacific) & consistentlyRank(universities, bestInTheWorld))\n\nTEXT: Beijing is located in southern China.\nFOL: locatedIn(Beijing, SouthernChina)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 21,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing) -> Beijing\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympicsGames) -> Beijing\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics) -> Beijing\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (consistentlyRank(universities, AsiaPacific) & consistentlyRank(universities, world)) -> Beijing\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCityByUrbanPopulation(Beijing) -> Beijing\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedGames(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedBothGames(x) -> SummerOlympics(x) & WinterOlympics(x) & SummerParalympicsGames(x) & WinterParalympicsGames(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x) -> Universities(x) & AsiaPacific(x) & World(x))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (LargestChineseCity(x) -> UrbanPopulation(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympicsAndSummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x) -> Universities(x))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x) -> SecondLargestChineseCity(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x, \"2008 Summer Olympics\") & Hosted(x, \"2008 Summer Paralympics Games\")) -> Beijing(x)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x, \"Summer Olympics\") & Hosted(x, \"Winter Olympics\")) | (Hosted(x, \"Summer Paralympics\") & Hosted(x, \"Winter Paralympics\")) -> Beijing(x)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x, \"Asia-Pacific\") & RankedAmongBest(x, \"world\")) -> Beijing(x)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x, \"Chinese city\") -> SecondLargest(x)) -> Beijing(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing) -> Beijing\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympicsGames) -> Beijing\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics) -> Beijing\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) & rankedAmongBest(universities, Asia-Pacific) & rankedAmongBest(universities, world) -> Beijing\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing) -> urbanPopulation(Beijing)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008, SummerOlympics) & hosted(Beijing, 2008, SummerParalympics)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (consistentlyRank(universities, Asia-Pacific) & consistentlyRank(universities, world))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing) -> urbanPopulation(Beijing)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> World(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008, SummerOlympics & 2008, SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> rankAmongBest(Beijing, AsiaPacific & World)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing) -> urbanPopulation(Beijing)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x, \"2008 Summer Olympics\") & Hosted(x, \"2008 Summer Paralympics Games\")) -> Beijing(x)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x, \"Summer Olympics\") & Hosted(x, \"Winter Olympics\")) | (Hosted(x, \"Summer Paralympics\") & Hosted(x, \"Winter Paralympics\")) -> Beijing(x)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x, \"Asia-Pacific\") & RankedAmongBest(x, \"world\")) -> Beijing(x)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x, \"second largest Chinese city\") -> Beijing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (Population(x) -> UrbanPopulation(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> World(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics & 2008SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> rankAmong(bestInAsiaPacific & bestInWorld)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing) -> urbanPopulation(Beijing)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capitalOf(Beijing, People'sRepublicOfChina)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008, SummerOlympics & 2008, SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: rankedAmongBest(Beijing, universities, Asia-Pacific & world)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: largestChineseCityByUrbanPopulation(Beijing, second)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capitalOf(Beijing, People'sRepublicOfChina)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008, SummerOlympics) & hosted(Beijing, 2008, SummerParalympics)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hostedBoth(Beijing, SummerOlympics) & hostedBoth(Beijing, WinterOlympics) & hostedBoth(Beijing, SummerParalympics) & hostedBoth(Beijing, WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) & rankAmong(universities, Asia-Pacific) & rankAmong(universities, world)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing, urbanPopulation)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capitalOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedInNorthernChina(Beijing)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hostedSummerOlympicsAndSummerParalympicsGames(Beijing, 2008)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hostedBothSummerAndWinterOlympicsAndSummerAndWinterParalympics(Beijing)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversitiesConsistentlyRankAmongTheBestInTheAsiaPacificAndTheWorld(Beijing, 91)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCityByUrbanPopulation(Beijing)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympicsOrSummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x) -> Universities(x))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x) -> SecondLargestChineseCity(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedIn(x, \"Northern China\") -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x, \"2008 Summer Olympics\") & Hosted(x, \"2008 Summer Paralympics Games\")) -> Beijing(x)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x, \"Summer Olympics\") & Hosted(x, \"Winter Olympics\")) | (Hosted(x, \"Summer Paralympics\") & Hosted(x, \"Winter Paralympics\")) -> Beijing(x)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x, \"Asia-Pacific\") & RankedAmongBest(x, \"world\")) -> Beijing(x)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x, \"Chinese city\") -> SecondLargest(x)) -> Beijing(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x, \"Summer Olympics\") & Hosted(x, \"Summer Paralympics Games\") -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x, \"Summer Olympics\") & Hosted(x, \"Winter Olympics\") & Hosted(x, \"Summer Paralympics\") & Hosted(x, \"Winter Paralympics\") -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankedAmongBest(x, \"Asia-Pacific\") & RankedAmongBest(x, \"world\") -> Beijing(x))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x) -> SecondLargestChineseCity(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capitalOf(Beijing, People'sRepublicOfChina)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, SummerOlympics, 2008) & hosted(Beijing, SummerParalympics, 2008)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) & rankedAmongBest(universities, Asia-Pacific) & rankedAmongBest(universities, world)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing, urbanPopulation)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> People'sRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> World(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics & 2008SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> rankAmong(bestInAsiaPacific & bestInWorld)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing) -> urbanPopulation(Beijing)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Host(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Host(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Rank(x) -> (AsiaPacific(x) & World(x)))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x) -> SecondLargestChineseCity(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (LocatedInNorthernChina(x) -> Beijing(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (HostedSummerOlympicsAndSummerParalympicsGames(x) -> Beijing(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (HostedBothSummerAndWinterOlympics(x) -> Beijing(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (ConsistentlyRankAmongTheBest(x) -> ManyUniversities(x))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (LargestChineseCityByUrbanPopulation(x) -> Beijing(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> People'sRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankAmongBest(x) -> Universities(x))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x) -> SecondLargestChineseCity(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (PopulousNationalCapitalCity(x) -> Beijing(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympicsAndSummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> SummerOlympicsOrWinterOlympics(x) & WinterOlympicsOrSummerParalympics(x))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (Ranked(x) -> BestInAsiaPacificAndTheWorld(x))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x) -> SecondLargestChineseCity(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capitalOf(Beijing, People'sRepublicOfChina)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing)\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008, SummerOlympics) & hosted(Beijing, 2008, SummerParalympics)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> rankAmong(universities, Asia-Pacific) & rankAmong(universities, world)\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing, urbanPopulation)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: capital(Beijing) -> PeopleRepublicOfChina(Beijing)\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: mostPopulousNationalCapitalCity(Beijing) -> Beijing\n\nTEXT: Beijing is located in Northern China.\nFOL: locatedIn(Beijing, NorthernChina)\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: hosted(Beijing, 2008SummerOlympics & 2008SummerParalympicsGames)\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: hosted(Beijing, SummerOlympics & WinterOlympics & SummerParalympics & WinterParalympics)\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: manyUniversities(Beijing) -> (consistentlyRank(universities, bestInAsiaPacific) & consistentlyRank(universities, bestInWorld))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: secondLargestChineseCity(Beijing) -> urbanPopulation(Beijing)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: all x. (Capital(x) -> PeopleRepublicOfChina(x))\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (Populous(x) -> NationalCapitalCity(x))\n\nTEXT: Beijing is located in Northern China.\nFOL: all x. (Location(x) -> NorthernChina(x))\n\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympicsGames(x))\n\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nFOL: all x. (Hosted(x) -> (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))\n\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (RankAmongBest(x) -> Universities(x))\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (UrbanPopulation(x) -> SecondLargestChineseCity(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 22,
  "responses": [
   [
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) & Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Exists(marvin, Earth) & -Exists(marvin, Mars)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Exists(marvin, Earth) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Exists(marvin, Earth) & -Exists(marvin, Mars)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Exists(marvin, Earth) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: exists x. ((Earth(x) & Mars(x)) -> -Marvin(x))\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: exists x. (-Earth(marvin) -> Extraterrestrial(marvin))\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: neither Marvin nor Human nor Mars\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: exists x. (!(Earth(x) & Mars(x)))\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: exists x. (!Earth(marvin) -> Extraterrestrial(marvin))\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: neither Marvin nor Human nor Mars\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: exists x. (-Earth(x) & -Mars(x))\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: neither Human(marvin) nor Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\n\nTEXT: If someone is from Mars, then they are aliens.\nFOL: exists x. (Mars(x) -> Alien(x))\n\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\n\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\n\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Mars(marvin) & -Earth(marvin)\n\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 23,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is a Grand Slam champion.\nDjokovic is either famous or an athlete.\nFamous(Djokovic) -> WellPaid(Djokovic)\nAthlete(Djokovic) -> WellPaid(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is a Grand Slam champion.\nFOL: (Famous(Djokovic) & Athlete(Djokovic)) -> TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(Djokovic) & Athlete(Djokovic) -> TaxHaven(Djokovic))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous or an athlete. (Djokovic -> (Famous & Athlete)) & (Famous & Athlete -> LiveInTaxHaven(Djokovic))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: Djokovic is a GrandSlamChampion(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> TaxHaven(Djokovic))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic(x) & Famous(x) & Athlete(x)) -> TaxHaven(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> LiveInWellPaid(Djokovic))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> LiveInWellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic(x) & Famous(x) & Athlete(x)) -> TaxHaven(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> LiveInWellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> LiveInWellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(Djokovic) & Athlete(Djokovic) -> WellPaid(Djokovic))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> LiveInWellPaid(Djokovic))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: all x. (Djokovic(x) -> (Famous(x) & Athlete(x)) -> LiveInWellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: Djokovic(x) -> GrandSlamChampion(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is a Grand Slam champion.\nFOL: (Djokovic is famous & Djokovic is an athlete) -> (WellPaid(Djokovic) | TaxHaven(Djokovic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and an athlete, or lives in well paid.\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: Djokovic is GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) -> OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic is famous) & (Djokovic is an athlete) -> (WellPaid(Djokovic) -> Djokovic lives in))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: Djokovic is GrandSlamChampion(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> LiveInWellPaid(Djokovic))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> LiveInWellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: all x. (Djokovic(x) -> (Famous(x) & Athlete(x)) -> LiveInWellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(Djokovic)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 24,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and an athlete or lives in well paid.\n\nTEXT: Djokovic lives in a tax haven.\nFOL: Djokovic lives in a tax haven or lives in well paid.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and an athlete or lives in well paid.\n\nTEXT: Djokovic lives in a tax haven.\nFOL: Djokovic lives in a TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and athlete or lives in well paid.\n\nTEXT: Djokovic lives in a tax haven.\nFOL: Djokovic lives in -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic(x) & Famous(x) & Athlete(x)) -> TaxHaven(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic(x) & Famous(x) & Athlete(x)) -> TaxHaven(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic(x) & Famous(x) & Athlete(x)) -> TaxHaven(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: all x. (Djokovic(x) -> (Famous(x) & Athlete(x)) -> TaxHaven(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic(x) & Famous(x) & Athlete(x)) -> TaxHaven(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: if (Djokovic is famous & Djokovic is athlete) then Djokovic lives in WellPaid(Djokovic)\n\nTEXT: Djokovic lives in a tax haven.\nFOL: Djokovic lives in TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous or athlete. (Djokovic -> Famous | Djokovic -> Athlete) & (Famous & Athlete -> WellPaid(Djokovic))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: Djokovic lives in TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and an athlete or lives in well paid.\n\nTEXT: Djokovic lives in a tax haven.\nFOL: Djokovic lives in -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(Djokovic)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 25,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) -> Or(OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and an athlete or lives in well paid.\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) -> OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and athlete or lives in well paid.\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) -> OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) -> OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic(x) & Famous(x) & Athlete(x)) -> TaxHaven(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: not Djokovic. TaxHaven(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and an athlete or lives in well paid.\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: not Djokovic. TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: not exists x. (Djokovic & TaxHaven(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: all x. ((Famous(Djokovic) & Athlete(Djokovic)) -> TaxHaven(Djokovic))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: not TaxHaven(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) -> OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: if (Djokovic is famous & Djokovic is athlete) then Djokovic lives in WellPaid.\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: not Djokovic lives in TaxHaven.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous or athlete. (Djokovic -> Famous(Djokovic) & Athlete(Djokovic)) & WellPaid(Djokovic)\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: not Djokovic. TaxHaven(Djokovic)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. ((Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: not TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous and an athlete or lives in well paid.\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: exists x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: exists x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: exists x. (Djokovic & Famous(x) & Athlete(x) -> WellPaid(x))\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))\n\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\n\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\n\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\n\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\n\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\n\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\n\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Djokovic is either famous or athlete. (Djokovic -> Famous(Djokovic) & Athlete(Djokovic)) & WellPaid(Djokovic)\n\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(Djokovic)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 26,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine)))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & (CreedBrothers(y) | IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x y. (Imperium(x) & (Feud(x, y) | DiamondMine(y)))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) -> DiamondMine(x)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & (CreedBrothers(y) | IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x y. (Imperium(x) & Feud(x, y))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong) -> ProfessionalWrestlingStable(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine)))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: exists x. (RoderickStrong(x) & ProfessionalWrestlingStable(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: all x. (WrestlingStable(x) -> FormedInWWE(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: RoderickStrong(leads) -> WrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: all x. (WrestlingStable(x) -> Includes(x, CreedBrothers) & Includes(x, IvyNile))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: all x. (WrestlingStable(x) -> Feud(x, Imperium))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: RoderickStrong(leads) -> WrestlingStable(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(DiamondMine) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(RoderickStrong)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: all x. (WrestlingStable(x) -> FormedInWWE(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: all x. (Leads(x) -> RoderickStrong(x))\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: all x. (Includes(x) -> (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: all x. (Feud(x) -> (Imperium(x) & DiamondMine(x)))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: all x. (Leads(x) -> RoderickStrong(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & (CreedBrothers(y) | IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x y. (Imperium(x) & Feud(x, y) & DiamondMine(y))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, WWE))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & (CreedBrothers(y) | IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x y. (Imperium(x) & Feud(x, y, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, -)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: all x. (WWE(x) -> ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: all x. (Leads(x) -> RoderickStrong(x))\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: all x. (Includes(x) -> CreedBrothers(x) & IvyNile(x))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: all x. (Feud(x) -> Imperium(x) -> DiamondMine(x))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: all x. (Leads(x) -> RoderickStrong(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(DiamondMine) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(DiamondMine) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(RoderickStrong)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: all x. (DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, -)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine)))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x y. (Imperium(x) & Feud(x, y) & DiamondMine(y))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: exists x. (Leader(RoderickStrong, x) & ProfessionalWrestlingStable(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(x) & Includes(x, CreedBrothers) & Includes(x, IvyNile))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & (CreedBrothers(y) | IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & -CreedBrothers(x) & -IvyNile(x) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x y. (Imperium(x) & -DiamondMine(x) & Feud(x, y))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, -DiamondMine)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: all x. (WWE(x) -> ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: all x. (Leads(RoderickStrong, x) -> ProfessionalWrestlingStable(x))\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: all x. (Includes(DiamondMine, x) -> ProfessionalWrestlingStable(x))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: all x. (Feud(Imperium, x) -> ProfessionalWrestlingStable(x))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: all x. (Leads(RoderickStrong, x) -> ProfessionalWrestlingStable(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: all x. (WrestlingStable(x) -> FormedInWWE(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: all x. (Leads(x) -> RoderickStrong(x))\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: all x. (Includes(x) -> CreedBrothers(x) & IvyNile(x))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: all x. (Feud(x) -> Imperium(x) -> DiamondMine(x))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: all x. (Leads(x) -> RoderickStrong(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) -> DiamondMine(x)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine(x)))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong) -> ProfessionalWrestlingStable(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: exists x. (RoderickStrong(x) & ProfessionalWrestlingStable(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(RoderickStrong, ProfessionalWrestlingStable)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 27,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & (CreedBrothers(y) & IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, \"WWE\"))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x y. (Imperium(x) & Feud(x, y, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>\"",
    "  \"<EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>\"\n\nPlease let me know if you have any questions or need further clarification.",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) -> DiamondMine(x)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x) & DiamondMine(x)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) -> CreedBrothers(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (ProfessionalWrestlingStable(x) & ProfessionalWrestlingStable(y) & Includes(x, y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(CreedBrothers)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) -> DiamondMine(x)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & Includes(x, CreedBrothers) & Includes(x, IvyNile))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine(x)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) -> CreedBrothers(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: all x. (WrestlingStable(x) -> FormedInWWE(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: all x. (Leads(x) -> RoderickStrong(x))\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: all x. (Includes(x) -> CreedBrothers(x) & IvyNile(x))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: all x. (Feud(x) -> Imperium(x) & DiamondMine(x))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: all x. (Leads(x) -> RoderickStrong(x) & CreedBrothers(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & DiamondMine(RoderickStrong)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine(x)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) & CreedBrothers(RoderickStrong)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) -> DiamondMine(RoderickStrong)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine(x)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) -> CreedBrothers(RoderickStrong)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>\"\n\nNote: In FOL, we use the \"exists\" operator to indicate that a certain relation holds between two entities. For example, \"exists x. (WWE(x) & ProfessionalWrestlingStable(x))\" means \"there exists an entity x such that WWE(x) and ProfessionalWrestlingStable(x) both hold\".",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, \"WWE\"))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & DiamondMine(RoderickStrong)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & (CreedBrothers(y) | IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine(x)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) & CreedBrothers(RoderickStrong)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, WWE))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & Includes(x, y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & DiamondMine(RoderickStrong)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine(x)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) & CreedBrothers(RoderickStrong)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & Includes(x, CreedBrothers) & Includes(x, IvyNile))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & DiamondMine(RoderickStrong)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & (CreedBrothers(y) | IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine(x)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) & CreedBrothers(RoderickStrong)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & DiamondMine(RoderickStrong)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & -CreedBrothers(x) & IvyNile(x y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x y. (Imperium(x) & -DiamondMine(x y))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong) & CreedBrothers(RoderickStrong)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine)))\n\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leader(RoderickStrong, CreedBrothers)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 28,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: RoderickStrong(leaderOf) -> DiamondMine(x)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(y)) & (CreedBrothers(y) | IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x)) & Feud(x, DiamondMine(x))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x)) & (!(IvyNile(x)) & Feud(x, DiamondMine(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & -(IvyNile(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & (ProfessionalWrestlingStable(x) & -IvyNile(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & (!(DiamondMine(x) & IvyNile(x))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(x) & Includes(x, CreedBrothers) & Includes(x, IvyNile))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(x) & Includes(x, IvyNile) & -Feud(x, Imperium))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(DiamondMine) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & -IvyNile(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Feud(x, Imperium) & (ProfessionalWrestlingStable(x) & IvyNile(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(x) & (CreedBrothers(y) & ProfessionalWrestlingStable(y)) | (IvyNile(y) & ProfessionalWrestlingStable(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x y. (Imperium(x) & ProfessionalWrestlingStable(x) & (IvyNile(y) & ProfessionalWrestlingStable(y)) -> Not(Feud(x, y)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & (Feud(x, DiamondMine)))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & (NoFeud(x, ProfessionalWrestlingStable(x)) & IvyNile(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: RoderickStrong(leaderOf) DiamondMine\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & -IvyNile(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(x) & (CreedBrothers(y) | IvyNile(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x y. (Imperium(x) & ProfessionalWrestlingStable(x) & (IvyNile(y) & -Feud(x, y)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & (ProfessionalWrestlingStable(x) & -IvyNile(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(x) & Includes(x, y) & Athlete(y) & CreedBrothers(y) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & Feud(x, x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x y. (Imperium(x) & ProfessionalWrestlingStable(x) & Includes(x, y, IvyNile) & -Feud(x, y, DiamondMine))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x, x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & (! (IvyNile(x) & ProfessionalWrestlingStable(x)))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & -(IvyNile(x) & ProfessionalWrestlingStable(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(x) & (CreedBrothers(y) & ProfessionalWrestlingStable(y))) | exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(x) & (IvyNile(y) & ProfessionalWrestlingStable(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x y. (Imperium(x) & ProfessionalWrestlingStable(x) & (IvyNile(y) & -Feud(x, y)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(x) & Includes(x, CreedBrothers) & Includes(x, IvyNile))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -exists x. (Feud(x, Imperium) & ProfessionalWrestlingStable(x) & Includes(x, IvyNile))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (-Imperium(x) & ProfessionalWrestlingStable(x) & IvyNile(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x) & FormedIn(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong) & ProfessionalWrestlingStable(DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (ProfessionalWrestlingStable(x) & Includes(x, CreedBrothers) & Includes(x, IvyNile))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (-Feud(x, DiamondMine) & ProfessionalWrestlingStable(x) & Includes(x, IvyNile))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) & IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & -IvyNile(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(y) & -Leader(x, y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Feud(x, DiamondMine) & -(IvyNile(x) & ProfessionalWrestlingStable(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & (!(IvyNile(x) & ProfessionalWrestlingStable(x)))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(x) & (CreedBrothers(y) & ProfessionalWrestlingStable(y)) & IvyNile(y))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x y. (Imperium(x) & ProfessionalWrestlingStable(x) & (IvyNile(y) & ProfessionalWrestlingStable(y)) & -Feud(x, y))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x y. (DiamondMine(x) & ProfessionalWrestlingStable(x) & (CreedBrothers(y) & ProfessionalWrestlingStable(y)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & ProfessionalWrestlingStable(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x y. (Imperium(x) & ProfessionalWrestlingStable(x) & (IvyNile(y) & ProfessionalWrestlingStable(y))) -> -Feud(x, y)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: exists x. (WWE(x) & ProfessionalWrestlingStable(x))\n\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(RoderickStrong, DiamondMine)\n\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: exists x. (DiamondMine(x) & (CreedBrothers(x) | IvyNile(x)))\n\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: exists x. (Imperium(x) & Feud(x, DiamondMine))\n\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: exists x. (Imperium(x) & (!(ProfessionalWrestlingStable(x) & IvyNile(x))))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 29,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Write(x) & MusicPiece(x) -> Beethoven(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: some x. (Premiere(x) & MusicPiece(x) -> ViennaMusicSociety(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(x) & ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Lead(x) & ViennaMusicSociety(x) -> Beethoven(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: some x. (Compose(x) & Beethoven(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & WroteMusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredMusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> LeadsOrchestra(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: Orchestra(x) -> LedByConductor(x)\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(x) -> Composer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & Composed(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & Premiered(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Leads(x, ViennaMusicSociety(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(x) -> Composer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(composer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: is(Beethoven, Composer)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Conductor(x) -> Orchestras(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(composer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: orchestra(ViennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Conductor(x) -> leads(x, orchestra))\n\nTEXT: Beethoven is a composer.\nFOL: composer(Beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Conductor(x) -> Orchesta(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(composer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: leads(Orchestra, Conductor)\n\nTEXT: Beethoven is a composer.\nFOL: is(Beethoven, Composer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Compose(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Society(x) -> Premiere(x, SymphonyNo9(x)))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Society(x) -> Orchestra(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Lead(x) -> Beethoven(x) & Society(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: exists x. (Compose(x) -> Beethoven(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(writeSymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(premiereSymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(isOrchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(leadViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(isComposer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Compose(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Orchestra(x) -> Premiere(x, SymphonyNo9))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Lead(x) -> Beethoven(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: exists x. (Compose(x) -> Beethoven(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> WrittenSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Premiere(x) & ViennaMusicSociety(x) & SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(x) & ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Lead(x) & Beethoven(x) & ViennaMusicSociety(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: exists x. (Compose(x) & Beethoven(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) & LeadsViennaMusicSociety(beethoven)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadsConductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(beethoven) & Composer(beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Conductor(x) -> leads(x, Orchestra))\n\nTEXT: Beethoven is a composer.\nFOL: is(Beethoven, Composer)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> LeadsViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(x) -> Composer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Wrote(Beethoven, SymphonyNo9))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Premiere(ViennaMusicSociety, SymphonyNo9))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety = Orchestra\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven = Leader(ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven = Composer\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety) -> Orchestra(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) -> LeadsViennaMusicSociety(beethoven)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(beethoven) -> Composer(beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadConductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: is(Beethoven, Composer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Conductor(x) -> Orchestras(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(compose)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadConductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: is(Beethoven, Composer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: all x. (Write(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: all x. (Premiere(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: all x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: all x. (Lead(x) -> Beethoven(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: all x. (Compose(x) -> Beethoven(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) & Leads(beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(beethoven) & Composer(beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: orchestra(ViennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Conductor(x) -> leads(x, Orchestral))\n\nTEXT: Beethoven is a composer.\nFOL: composer(Beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Wrote(x, SymphonyNo9) -> Beethoven(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Premiered(x, SymphonyNo9) -> ViennaMusicSociety(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) & Leads(beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Leads(x, Orchestra) -> Conductor(x))\n\nTEXT: Beethoven is a composer.\nFOL: Beethoven(beethoven)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 30,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> Premiere(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x) -> ViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: Orchestra(x) -> Lead(x)\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) -> Premiere(x) -> MusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & Composed(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & Premiered(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Leads(x, ViennaMusicSociety(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & Premiered(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) -> PremieredMusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: exists x. (Composer(Beethoven) & MusicPiece(SymphonyNo9))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Orchestra(ViennaMusicSociety) & MusicPiece(SymphonyNo9) & Premiere(ViennaMusicSociety, SymphonyNo9))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(ViennaMusicSociety))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Leader(Beethoven) & Orchestra(ViennaMusicSociety))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & Premiere(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> Premiere(x, SymphonyNo9(x)))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x, ViennaMusicSociety(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: Orchestra(x) -> Lead(x, Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) -> Premiere(x, MusicPiece(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & premiered(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Conductor(x) -> leads(x, Orchestra))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Premiered(x) & Orchestra(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & WroteMusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredMusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> LeadsOrchestra(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadConductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & PremieredMusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: all x. (Write(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: all x. (Premiere(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: all x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: all x. (Lead(x) -> Beethoven(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. -Premiere(x) & -MusicPiece(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety) -> Orchestra(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) -> LeadsViennaMusicSociety(beethoven)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & PremieredMusicPiece(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(Orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. -PremieredMusicPiece(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(leads) & ViennaMusicSociety(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & PremieredMusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & WroteMusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredMusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety) -> Orchestra(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) -> LeadsOrchestra(beethoven, viennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadsConductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & PremieredMusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Orchestra(x) -> Premiere(x, SymphonyNo9(x)))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Beethoven(x) & Orchestra(x) -> Lead(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x) -> Lead(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & Premiere(x, MusicPiece(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x) -> ViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: Orchestra(x) -> Lead(x)\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) -> Premiered(x) -> MusicPiece(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) & SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> Premiere(x, SymphonyNo9(x)))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x, ViennaMusicSociety(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Lead(x, Conductor(x)))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & Premiere(x, MusicPiece(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & WriteMusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremiereMusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> LeadOrchestra(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadConductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & PremiereMusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety) -> Orchestra(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) -> LeadsViennaMusicSociety(beethoven)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & PremieredMusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> Premiered(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x) -> ViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: Orchestra(x) -> Lead(x) -> Conductor(x)\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) -> Premiered(x) -> MusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Orchestra(x) & Premiered(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Leads(x) & Orchestra(x) -> Beethoven(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Premiered(x) & Orchestra(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: exists x. (Compose(x) & MusicPiece(x) -> BeethovenWrote(x, SymphonyNo9))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Orchestra(x) & MusicPiece(x) -> Premiere(x, SymphonyNo9))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Lead(x) & Orchestra(x) -> BeethovenLeads(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Lead(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) -> PremieredMusicPiece(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & Premiered(x) & SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (ViennaMusicSociety(x) & Orchestra(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Beethoven(x) & Leads(x) & ViennaMusicSociety(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Premiered(x) & Orchestra(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) & SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & MusicPiece(x) & SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety) -> Orchestra(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) -> Lead(beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Lead(x, Conductor(x)))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) -> Premiere(x, MusicPiece(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: all x. (Write(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: all x. (Premiere(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: all x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: all x. (Lead(x) -> Beethoven(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. -Premiere(x) & Exists y. (Orchestra(y) & -Premiere(y))\n\n</EVALUATE>\n\nNote: In FOL, we use the \"all x\" syntax to indicate that the statement holds for all values of x. We also use the \"exists x\" syntax to indicate that the statement holds for at least one value of x.",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (-Orchestra(x) & premiered(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 31,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(leads) & ViennaMusicSociety(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Conductor(x) -> Orchestras(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: all x. (Write(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: all x. (Premiere(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: all x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: all x. (Lead(x) -> Beethoven(x) & ViennaMusicSociety(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: all x. (Conductor(x) -> -Beethoven(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> LeadsViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(x) -> NotAConductor(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(writeSymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(premiereSymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(isOrchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(leadsViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadConductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(notAConductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Write(x) & MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Premiere(x) & MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: orchestra(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: lead(beethoven, viennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Lead(x, Conductor(x)))\n\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> LeadsViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(x) -> NotAConductor(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Write(x) & MusicPiece(x) -> Beethoven(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Premiere(x) & MusicPiece(x) -> ViennaMusicSociety(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x) & ViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) & Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(leadsViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadConductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(notConductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(viennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(beethoven) & LeadsViennaMusicSociety(beethoven)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadConductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: -Beethoven(beethoven) & -LeadConductor(beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) & WroteSymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & PremieredSymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) & Orchesta(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) & LeadsViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: Orchesta(x) & LeadsConductor(x)\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(x) & NotConductor(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) & SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) & MusicPiece(x) & SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x) & ViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Lead(x) & Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(x) -> -Conductor(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(writeSymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(premiereSymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(isOrchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(leadsViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(isNotConductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: not(Beethoven, Conductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(conductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: orchestra(ViennaMusicSociety)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: not(Beethoven, Conductor)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Beethoven(x) -> MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (ViennaMusicSociety(x) -> Premiere(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x) -> ViennaMusicSociety(x)\n\nTEXT: Orchestras are led by conductors.\nFOL: Orchestra(x) -> Lead(x) -> Conductor(x)\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(x) -> -Conductor(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(premieredSymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(isOrchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(leadsViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(notAConductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: not(Beethoven, Conductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: not(Beethoven, Conductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: all x. (Write(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: all x. (Premiere(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: all x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: all x. (Lead(x) -> ViennaMusicSociety(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: all x. (Conductor(x) -> -Beethoven(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Write(x) & MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Premiere(x) & MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(x) & MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Lead(x) & Orchestra(x) -> Beethoven(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) & Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: exists x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: wrote(Beethoven, SymphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: premiered(ViennaMusicSociety, SymphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: is(ViennaMusicSociety, Orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: leads(Beethoven, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(Beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(symphonyNo9)\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(symphonyNo9)\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(orchestra)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(orchestra)\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Wrote(x, SymphonyNo9) -> Beethoven(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Premiere(x, SymphonyNo9) -> ViennaMusicSociety(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(x) -> Orchestra(x)\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(x) -> Lead(x, ViennaMusicSociety)\n\nTEXT: Orchestras are led by conductors.\nFOL: Orchestra(x) -> Lead(x, Conductor)\n\nTEXT: Beethoven is not a conductor.\nFOL: Beethoven(x) -> -Lead(x, Conductor)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Symphony No. 9 is a music piece.\nFOL: all x. (MusicPiece(x) -> SymphonyNo9(x))\n\nTEXT: Composers write music pieces.\nFOL: all x. (Compose(x) -> MusicPiece(x))\n\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: some x. (Compose(x) & SymphonyNo9(x) -> Beethoven(x))\n\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: exists x. (Orchestra(x) & Premiere(x) -> SymphonyNo9(x))\n\nTEXT: Vienna Music Society is an orchestra.\nFOL: exists x. (Orchestra(x) -> ViennaMusicSociety(x))\n\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: exists x. (Lead(x) & Orchestra(x) -> Beethoven(x))\n\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Lead(x) -> Conductor(x))\n\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 32,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x) -> Timeless(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Timeless(x) & -Timeless(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x) -> Evocative(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x) -> Dreamy(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(x) & MassProductDesign(x)) -> (Evocative(x) & -Not(x)))]\n\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n\n</EVALUATE>\n\nNote: In FOL, the `all x` and `exists x` notations are used to indicate that the statement holds for all or some values of the variable `x`, respectively. The `-` symbol is used to negate a statement, and the `->` symbol is used to indicate a logical implication.",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> Good(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> Good(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> Good(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) = ZahaHadid)\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) -> DesignStyle(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(x) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x) & DesignByMax(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(x) -> DesignByMax(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (DesignByMax(x) & MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Timeless(Max(x)) & MassProductDesign(x) & Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: all x. (MassProductDesign(x) -> Max(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Timeless(x) & MassProductDesign(x) & Evocative(x) -> Max(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x) -> Max(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)) Or (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Timeless(x) & DesignByMax(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x) & DesignByMax(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (Max(x) & MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (Max(x) & MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) = ZahaHadid)\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (x = ZahaHadid & y = KellyWearstler) or x = KellyWearstler & y = ZahaHadid))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(x) & MassProductDesign(x)) -> (Evocative(x) & DesignStyle(x) = Max)))\n\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: all x. (MassProductDesign(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x) -> Timeless(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x) -> Evocative(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x) -> Dreamy(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(x) & MassProductDesign(x)) -> (Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: if x y. (Timeless(Max(x)) & (MassProductDesign(x) -> Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x) & -Evocative(x))\n\n</EVALUATE>\n\nNote: In FOL, the \"all x\" and \"exists x\" phrases are used to indicate that the statement applies to all or exists values of the variable x, respectively. The \"->\" symbol is used to indicate the logical implication of one statement from another.",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: all x. (MassProductDesign(x) -> Max(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: all x. (MassProductDesign(x) -> Max(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: all x. (MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Timeless(Max(x)) & MassProductDesign(x) & Evocative(x))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x) -> Timeless(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x) -> Evocative(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x) -> Dreamy(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (DesignByMax(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (DesignByMax(x) & MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: all x. (MassProductDesign(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is a mass product design.\nFOL: exists x. (Max(x) & MassProductDesign(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 33,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x) -> Timeless(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)) Or (ZahaHadid(x) & -KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x) -> Evocative(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x) -> Dreamy(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (DesignByMax(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. ((DesignByMax(x) & Evocative(x)) & (DesignByMax(x) & Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(Max(x)) & Dreamy(Max(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(x) & Dreamy(x) -> DesignByMax(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Max(x) & Evocative(x) & Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> Good(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> Good(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> Good(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(Max(x)) & Dreamy(Max(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. ((Evocative(Max(x)) & Dreamy(x)) -> DesignStyle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) = ZahaHadid)\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) -> DesignStyle(y) & (x = ZahaHadid & y = KellyWearstler) or x = KellyWearstler & y = ZahaHadid))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(x) & Dreamy(x) -> DesignStyle(x) = Max)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(Max(x)) & Dreamy(Max(x)) -> DesignStyle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) = ZahaHadid)\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (x = ZahaHadid & y = KellyWearstler) Or (x = KellyWearstler & y = ZahaHadid))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(x) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(x) & Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. ((Evocative(Max(x)) & Dreamy(Max(x))) -> DesignStyle(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> Good(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> Good(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> Good(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(Max(x)) & Dreamy(Max(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(x) -> MassProductDesign(x) & Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(x) & Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x) -> Timeless(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x) -> Evocative(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x) -> Dreamy(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: exists x. (DesignByMax(x) -> (Evocative(x) & Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x) -> Timeless(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x) -> Evocative(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x) -> Dreamy(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (DesignByMax(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. ((DesignByMax(x) & Evocative(x)) -> Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(Max(x)) & Dreamy(Max(x)) -> DesignStyle(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(Max(x)) & Dreamy(Max(x)) -> DesignStyle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)) Or (KellyWearstler(x) & ZahaHadid(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(x) -> (MassProductDesign(x) & Evocative(x)) Or (MassProductDesign(x) & -Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(x) & Dreamy(x) -> DesignByMax(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) = ZahaHadid)\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) -> DesignStyle(y) & (x = ZahaHadid & y = KellyWearstler) Or (x = KellyWearstler & y = ZahaHadid))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(x) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(x) & Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> Good(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> Good(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> Good(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(Max(x)) & Dreamy(Max(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)) | (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(x) -> MassProductDesign(x) -> Evocative(x))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Evocative(x) & Dreamy(x) -> DesignByMax(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. ((Evocative(Max(x)) & Dreamy(Max(x))) -> DesignStyle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> Good(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> Good(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> Good(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. (Max(x) & Evocative(x) & Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x) -> Timeless(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x) -> Evocative(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x) -> Dreamy(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (DesignByMax(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: exists x. (DesignByMax(x) -> (Evocative(x) & Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) -> Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. ((Evocative(x) & Dreamy(x)) -> DesignByMax(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is evocative and dreamy.\nFOL: all x. ((Evocative(Max(x)) & Dreamy(Max(x))) -> DesignStyle(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 34,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x) -> Timeless(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x) -> Evocative(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x) -> Dreamy(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (DesignByMax(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(x) | Dreamy(x)) & DesignByMax(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(Max(x)) | Dreamy(Max(x))) -> DesignStyle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> GoodDesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> GoodDesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> GoodDesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(Max(x)) | Dreamy(Max(x))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> Good(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> Good(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> Good(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((-Evocative(x) & Dreamy(x)) | (Evocative(x) & -Dreamy(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (Evocative(x) | Dreamy(y)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> GoodDesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y) -> GoodDesignStyle(x) | GoodDesignStyle(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> GoodDesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> GoodDesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Timeless(Max(x)) & MassProductDesign(x) & Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (Max(x) -> Evocative(x) | Max(x) -> Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) -> ZahaHadid(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) -> KellyWearstler(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(x) & Dreamy(x)) | (-Evocative(x) & -Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (Max(x) -> (Evocative(x) | Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(x) | Dreamy(x)) -> DesignByMax(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(x) | Dreamy(x)) -> DesignByMax(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> GoodDesign(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> GoodDesign(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> GoodDesign(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (Max(x) -> (Evocative(x) | Dreamy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (DesignByMax(x) & DesignByMax(y) -> (Evocative(x) | Dreamy(y)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. (Either Evocative(x) & Dreamy(x) | -Either Evocative(x) & Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> GoodDesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> GoodDesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> GoodDesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. (Either Evocative(x) & Dreamy(x) | -Either Evocative(x) & -Dreamy(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) = ZahaHadid)\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (x = ZahaHadid & y = KellyWearstler) | (x = KellyWearstler & y = ZahaHadid))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: exists x. (Timeless(x) & MassProductDesign(x) & Evocative(x) -> Max = x)\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. (Evocative(x) | Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(x) & Dreamy(x)) | (-Evocative(x) & -Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: if x y. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (Max(x) -> (Evocative(x) | Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) -> KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: if x y. (Timeless(Max(x)) & MassProductDesign(x) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (Max(x) -> (Evocative(x) | Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Timeless(Max(x)) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (Evocative(x) | Dreamy(y)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> (ZahaHadid(x) & KellyWearstler(y)))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(Max(x)) & Dreamy(x)) | (-Evocative(x) & -Dreamy(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. (Either Evocative(x) & Dreamy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(x) -> DesignStyle(x) = ZahaHadid)\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) -> DesignStyle(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(x) -> DesignStyle(x) = KellyWearstler)\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) -> Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. (Max(x) -> either (Evocative(x) & Dreamy(x)) | (Not(Evocative(x)) & Not(Dreamy(x)))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (DesignStyle(x) & DesignStyle(y) -> -Or(x, y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. (Either(Evocative(x), Dreamy(x)) -> DesignByMax(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (Timeless(ZahaHadid(x)) -> DesignStyle(x))\n\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\n\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: either x y. (ZahaHadid(x) & KellyWearstler(y) -> DesignStyle(x) & DesignStyle(y))\n\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (Evocative(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (Dreamy(KellyWearstler(x)) -> DesignStyle(x))\n\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. ((Timeless(Max(x)) & MassProductDesign(x)) -> Evocative(x))\n\nTEXT: A design by Max is either evocative or dreamy.\nFOL: all x. ((Evocative(Max(x)) | Dreamy(Max(x))) -> Design(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 35,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) -> MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((HighlyRankedByWTA(x) & Player(x) -> -MaleRolandGarrosPlayer(x)) | (-HighlyRankedByWTA(x) & Player(x) -> -RafaelNadal(x)))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: all x. (ActivePlayer(x) -> CocoGauff(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleRolandGarrosPlayer(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x))).\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActiveInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((RankedHighlyByWTA(x) & -MaleRolandGarrosPlayer(x)) | (-RankedHighlyByWTA(x) & MaleRolandGarrosPlayer(x)))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActiveInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActiveInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) -> MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) & -MaleRolandGarrosPlayer(cocoGauff)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(activePlayer(cocoGauff))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: exists x. (-LostToIgaSwietk(x) & HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) -> -MaleRolandGarrosPlayer(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) & ActiveInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((HighlyRankedByWTA(x) | LostToRafaelNadal(x)) & -MaleRolandGarrosPlayer(x))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: all x. (ActiveInMajorTennis(cocoGauff) & -MaleRolandGarrosPlayer(cocoGauff))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: exists x. (LostToIgaSwietek(x) & HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: exists x. (CocoGauff(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) & NotMaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: exists x. (CocoGauff(x) & ActivePlayer(x) & MostActivePlayers(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!HighlyRankedByWTA(x) &!LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActivePlayer(x) & MostActivePlayers(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) -> -MaleRolandGarrosPlayer(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) & ActiveInMajorTennis(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((HighlyRankedByWTA(x) | LostToRafaelNadal(x)) -> NotMaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: all x. (CocoGauff(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (RankedHighlyByWTA(x) | LostToRafaelNadal(x) -> NotMaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActivePlayer(x) & MostActivePlayers(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleRolandGarrosPlayer(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x))).\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActivePlayer(x) & MostActivePlayers(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!HighlyRankedByWTA(x) &!LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActivePlayer(x) & MostActivePlayers(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) &!MaleRolandGarrosPlayer(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActiveInMajorTennis(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) -> -MaleRolandGarrosPlayer(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) & ActiveInMajorTennis(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleRolandGarrosPlayer(x) & MaleRolandGarrosPlayer(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleRolandGarrosPlayer(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x))).\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActiveInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (RankedHighlyByWTA(x) & LostToRafaelNadal(x) -> -MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: all x. (ActiveInMajorTennis(x) -> CocoGauff(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleTennisPlayerAtRolandGarros2022(x) & RankedHighlyByWTA(x) | LostToRafaelNadal(x)))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActivePlayer(x) & MostActivePlayers(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActiveInMajorTennis(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!MaleTennisPlayerAtRolandGarros2022(x) & RankedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x)))\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActivePlayerInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: exists x. (-LostToIgaSwiatek(x) & RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: exists x. (-RankedHighlyByWomensTennisAssociation(x) & -LostToRafaelNadal(x)) & -IsMaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: exists x. (CocoGauff(x) -> ActivePlayerInMajorTennis(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayer(x) -> MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (RankedHighlyByWTA(x) | LostToRafaelNadal(x)) -> MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActivePlayer(x) -> MostActivePlayers(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x)) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(x) -> ActivePlayerInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) -> NotMaleRolandGarrosPlayer(cocoGauff)\n\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: CocoGauff(activeInMajorTennis)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 36,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((HighlyRankedByWTA(x) & PlayerWhoLostToRafaelNadal(x)) | (-HighlyRankedByWTA(x) & -PlayerWhoLostToRafaelNadal(x)))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (RankedHighlyByWTA(x) | LostToRafaelNadal(x)) & -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: exists x. (LostToIgaSwietk(x) & HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleTennisPlayerAtRolandGarros2022(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x))).\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: CocoGauff(x) & LostToRafaelNadal(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((HighlyRankedByWTA(x) | LostToRafaelNadal(x)) & -MaleRolandGarrosPlayer(x))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x)) -> NotMaleTennisPlayerAtRolandGarros2022(cocoGauff)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) & -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayersInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayersAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayersAtRolandGarros2022(x) | MaleTennisPlayersAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayersAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleTennisPlayerAtRolandGarros2022(x) & RankedHighlyByWomensTennisAssociation(x) | -RafaelNadal(x)))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: CocoGauff(x) -> LostToRafaelNadal(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: CocoGauff(x) -> LostToRafaelNadal(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: CocoGauff(x) -> LostToRafaelNadal(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((RankedHighlyByWTA(x) & PlayerWhoLostToRafaelNadal(x)) | (-RankedHighlyByWTA(x) & -PlayerWhoLostToRafaelNadal(x)))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarros2022(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarros2022(x) | MaleRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) -> NotMaleRolandGarros2022(cocoGauff)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((RankedHighlyByWTA(x) & PlayerWhoLostToRafaelNadal(x)) | (-RankedHighlyByWTA(x) & -PlayerWhoLostToRafaelNadal(x)))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (RankedHighlyByWTA(x) & PlayerWhoLostToRafaelNadal(x) -> NotMaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (RankedHighlyByWTA(x) | LostToRafaelNadal(x)) &!MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: CocoGauff(x) -> LostToRafaelNadal(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((RankedHighlyByWTA(x) & PlayerWhoLostToRafaelNadal(x)) | (-RankedHighlyByWTA(x) & -PlayerWhoLostToRafaelNadal(x)))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: CocoGauff(x) -> LostToRafaelNadal(x)\n</EVALUATE>\n\nNote: In FOL, the variables are capitalized (e.g. \"x\") and the predicates are in parentheses. The \"->\" symbol indicates the arrow of inference, which is used to derive the conclusion from the premises.",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: CocoGauff(x) & LostToRafaelNadal(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: exists x. (-LostToIgaSwietk(x) & HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleTennisPlayerAtRolandGarros2022(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x))).\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: CocoGauff(x) -> LostToRafaelNadal(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) & -MaleRolandGarrosPlayer(x)\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) & (!MaleRolandGarrosPlayer(x))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (RankedHighlyByWTA(x) & PlayerWhoLostToRafaelNadal(x) -> NotMaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleTennisPlayerAtRolandGarros2022(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x))).\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. ((RankedHighlyByWTA(x) & PlayerWhoLostToRafaelNadal(x)) | (-RankedHighlyByWTA(x) & -PlayerWhoLostToRafaelNadal(x)))\n\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 37,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietk(x) & -ActiveInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomenTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWomenTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: all x. (RankedHighlyByWomenTennisAssociation(x) | LostToRafaelNadal(x)) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwietek(cocoGauff) & -ActivePlayerInMajorTennis(cocoGauff)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) & MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwiatek(x) & -ActivePlayerInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomen'sTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWomen'sTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietk(x) & -ActivePlayerInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & MostActivePlayersInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!HighlyRankedByWTA(x) &!LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwiatek(x) &!MostActivePlayersInMajorTennis(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!MaleTennisPlayerAtRolandGarros2022(x) & (HighlyRankedByWTA(x) | LostToRafaelNadal(x))).\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwietek(x) & (!ActiveInMajorTennis(x) | FemaleTennisPlayerAtRolandGarros2022(x))).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayer(x) -> MostActivePlayersInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (RankedHighlyByWTA(x) | LostToRafaelNadal(x)) -> MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietk(x) & -MostActivePlayersInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietek(x) & -ActivePlayerInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!RankedHighlyByWTA(x) &!LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwietek(x) &!ActivePlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietek(x) & -ActivePlayerInMajorTennis(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietk(x) & -ActivePlayerInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x) | -RankedHighlyByWTA(x) & LostToRafaelNadal(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietek(x) & -ActiveInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!MaleTennisPlayerAtRolandGarros2022(x) & RankedHighlyByWTA(x) | MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x)))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwietek(x) & ActivePlayerInMajorTennis(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietk(x) & -ActivePlayerInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!HighlyRankedByWTA(x) &!LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwiatek(x) &!ActiveInMajorTennis(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & AmongMostActivePlayersInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!HighlyRankedByWTA(x) &!LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwietek(x) &!ActivePlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & MostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleRolandGarrosPlayer(x) | MaleRolandGarrosPlayer(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (HighlyRankedByWTA(x) | LostToRafaelNadal(x)) & NotMaleRolandGarrosPlayer(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwiatek(x) & -MostActivePlayers(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & AmongMostActivePlayersInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!HighlyRankedByWTA(x) &!LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwietk(x) &!AmongMostActivePlayersInMajorTennis(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietek(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!MaleTennisPlayerAtRolandGarros2022(x) & RankedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x)))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwietek(x) &!ActivePlayerInMajorTennis(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActivePlayer(x) & AmongMostActivePlayers(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietk(x) & -ActivePlayer(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWomensTennisAssociation(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietk(x) & -ActivePlayerInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (HighlyRankedByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> HighlyRankedByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleRolandGarrosPlayer(x) & LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleRolandGarrosPlayer(x) & MaleRolandGarrosPlayer(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleRolandGarrosPlayer(x) & LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleRolandGarrosPlayer(x) & HighlyRankedByWTA(x) & -LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (-LostToIgaSwietk(x) & -ActiveInMajorTennis(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayerInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x y. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(y))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (-MaleTennisPlayerAtRolandGarros2022(x) & RankedHighlyByWTA(x) | -MaleTennisPlayerAtRolandGarros2022(x) & LostToRafaelNadal(x)))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (-LostToIgaSwiatek(x) & -ActivePlayerInMajorTennis(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwietk(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwietk(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> -MaleTennisPlayerAtRolandGarros2022(x)\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> -LostToIgaSwietk(x) & -ActiveInMajorTennis(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> ActivePlayer(x) & MostActivePlayersInMajorTennis(x))\n\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\n\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\n\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: either x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: CocoGauff(x) -> (!RankedHighlyByWTA(x) &!LostToRafaelNadal(x))\n\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: CocoGauff(x) -> (!LostToIgaSwiatek(x) &!ActivePlayer(x) &!MostActivePlayersInMajorTennis(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 38,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (-Cat(x) & Pet(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Cat(pet)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Cat(pet)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (-Cat(x) & Pet(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Cat(x) -> -Pet(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Cat(x) -> -Pet(x)\n\n</EVALUATE>\""
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (-Cat(x) & Pet(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (-Cat(x) & Pet(x))\n\n</EVALUATE>\"",
    "  \"<EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Cat(pet) & -Mammal(pet)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Cat(pet) & -Mammal(pet)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (-Cat(x) & Pet(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Mammal(x) -> Cat(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (-Cat(x) & Pet(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\n\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 39,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Cardinality(x, 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> NotSameAsEmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists y. (Year(y) & Season(y) in {Spring, Summer, Fall, Winter}))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all students x. (WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma x. (FavoriteSeason(x) -> Summer(x))\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia x. (FavoriteSeason(x) -> NotSameAsEmma(x))\n\nTEXT: James wants to have a long vacation.\nFOL: James x. (WantLongVacation(x))\n\nTEXT: James's favorite season is summer.\nFOL: James x. (FavoriteSeason(x) -> Summer(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Spring) & Exists(x, Summer) & Exists(x, Fall) & Exists(x, Winter))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummer(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma -> FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia -> FavoriteSeason(x) -> NotSameAs(Emma, x)\n\nTEXT: James wants to have a long vacation.\nFOL: James -> WantLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: James -> FavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) & Summer(x) & Fall(x) & Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> (-EmmaFavoriteSeason(x))\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4)\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(x) -> Not(Emma.FavoriteSeason(x))\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(true)\n\nTEXT: James's favorite season is summer.\nFOL: James.FavoriteSeason(summer)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Season))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> NotSameAsEmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation()\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> -Year(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> -EmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Cardinality(x, 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummer(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.LoveSummer(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.LoveSummer(not Emma.LoveSummer(summer))\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(true)\n\nTEXT: James's favorite season is summer.\nFOL: James.LoveSummer(summer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma -> FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia -> FavoriteSeason(not(Emma -> FavoriteSeason(summer)))\n\nTEXT: James wants to have a long vacation.\nFOL: James -> WantLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: James -> FavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Cardinality(x, 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> Vacation(x) -> Love(x, Summer))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(x) -> Not(Emma.FavoriteSeason(x))\n\nTEXT: James wants to have a long vacation.\nFOL: James.Wants(Vacation(x))\n\nTEXT: James's favorite season is summer.\nFOL: James.FavoriteSeason(summer)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Cardinality(x, 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x y. (Student(x) & WantLongVacation(x) -> LoveSummerMost(x, y))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> (EmmaFavoriteSeason(x) -> -Equal(x, MiaFavoriteSeason(x)))\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> NotSameAsEmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> (-EmmaFavoriteSeason(x))\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> (-EmmaFavoriteSeason(x))\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Spring) & Exists(x, Summer) & Exists(x, Fall) & Exists(x, Winter))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummer(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma -> FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia -> FavoriteSeason(x) -> Not(Emma -> FavoriteSeason(x))\n\nTEXT: James wants to have a long vacation.\nFOL: James -> WantLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: James -> FavoriteSeason(summer)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Season))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(x) -> Not(Emma.FavoriteSeason(x))\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(true)\n\nTEXT: James's favorite season is summer.\nFOL: James.FavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) & Summer(x) & Fall(x) & Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) - EmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> -Year(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> -EmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Season))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) - EmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4)\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma -> FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia -> FavoriteSeason(not Emma)\n\nTEXT: James wants to have a long vacation.\nFOL: James -> WantLongVacation(true)\n\nTEXT: James's favorite season is summer.\nFOL: James -> FavoriteSeason(summer)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Cardinality(x, 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia(summer) -> -Emma(summer)\n\nTEXT: James wants to have a long vacation.\nFOL: James(wantLongVacation)\n\nTEXT: James's favorite season is summer.\nFOL: James(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Cardinality(x, 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> NotSameAsEmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ordinal(x) & Season(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) - EmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: JamesFavoriteSeason(summer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Season))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: exists x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia(not(Emma(summer)))\n\nTEXT: James wants to have a long vacation.\nFOL: exists x. (WantLongVacation(x) & James(x))\n\nTEXT: James's favorite season is summer.\nFOL: James(summer)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(x) -> NotSameAsEmma(x)\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(x)\n\nTEXT: James's favorite season is summer.\nFOL: James.FavoriteSeason(summer)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 40,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ordinal(x) < 5)\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> NotSameAsEmma(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ordinal(x) & (1 -> 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> NotSameAsEmma(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ordinal(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> NotSameAsEmmaFavoriteSeason(summer)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Season))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummer(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(spring) -> NotSameAsEmma(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia.FavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Cardinality(x, 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x y. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x, y))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> NotSameAsEmmaFavoriteSeason(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ordinal(x) & (1 <= Season(x) <= 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x y. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x, y))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma = Summer\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia = Not(Summer)\n\nTEXT: James wants to have a long vacation.\nFOL: James = WantLongVacation\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia = Spring\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists y. (Year(y) & Season(y) in {Spring, Summer, Fall, Winter}))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> NotSameAsEmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ordinal(x) & (1 -> 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> Vacation(x) -> Love(x, Summer))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma -> FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia -> FavoriteSeason(spring) & (-FavoriteSeason(emma))\n\nTEXT: James wants to have a long vacation.\nFOL: James -> Want(longVacation)\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia -> FavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) & Summer(x) & Fall(x) & Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> (WantLongVacation(x) & LoveSummer(x)))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma. (FavoriteSeason(Emma) -> Summer(Emma))\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia. (FavoriteSeason(Mia) -> (-Emma(Mia)))\n\nTEXT: James wants to have a long vacation.\nFOL: James. (WantLongVacation(James))\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia. (FavoriteSeason(Mia) -> Spring(Mia))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ordinal(x) & Season(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> NotSameAsEmmaFavoriteSeason(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummer(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma -> FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia -> FavoriteSeason(spring) -> NotSameAsEmma(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: James -> WantLongVacation(x)\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia -> FavoriteSeason(spring)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Cardinality(x, 4))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x y. (Student(x) & WantLongVacation(x) -> LoveSummerMost(x, y))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> -EmmaFavoriteSeason(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Four(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> NotSameAsEmma(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> (!= EmmaFavoriteSeason(x))\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4)\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(spring) -> NotSameAsEmma(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia.FavoriteSeason(spring)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ord(x))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> -EmmaFavoriteSeason(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4)\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(spring) -> NotSameAsEmmaFavoriteSeason(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Equal(x, Spring) & Equal(x, Summer) & Equal(x, Fall) & Equal(x, Winter))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> NotEquivalent(x, EmmaFavoriteSeason(summer))\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) & Summer(x) & Fall(x) & Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> (WantLongVacation(x) & LoveSummer(x)))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(spring) -> (!= Emma.FavoriteSeason(summer))\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia.FavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Ordinal(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(spring) -> NotSameAsEmma(spring)\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia.FavoriteSeason(spring)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Season))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> NotSameAsEmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists y. (Year(y) & Season(y) in {Spring, Summer, Fall, Winter}))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all students. (WantLongVacation(student) -> LoveSummerTheMost(student))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma. (FavoriteSeason(emma) -> Summer(emma))\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia. (FavoriteSeason(mia) -> NotSameAsEmma(mia))\n\nTEXT: James wants to have a long vacation.\nFOL: James. (WantLongVacation(james))\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia. (FavoriteSeason(mia) -> Spring(mia))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> x in {Spring, Summer, Fall, Winter})\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummer(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma.FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia.FavoriteSeason(spring) -> NotSameAsEmma(Mia, Emma)\n\nTEXT: James wants to have a long vacation.\nFOL: James.WantLongVacation(true)\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia.FavoriteSeason(spring)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> Exists(x, Season))\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) -> WantLongVacation(x) -> LoveSummer(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: Emma -> FavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: Mia -> FavoriteSeason(spring) -> NotSameAsEmma(Mia, Emma)\n\nTEXT: James wants to have a long vacation.\nFOL: James -> WantLongVacation(James)\n\nTEXT: Mia's favorite season is spring.\nFOL: Mia -> FavoriteSeason(spring)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> x in {Spring, Summer, Fall, Winter})\n\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerTheMost(x))\n\nTEXT: Emma's favorite season is summer.\nFOL: EmmaFavoriteSeason(summer)\n\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: MiaFavoriteSeason(x) -> not EmmaFavoriteSeason(x)\n\nTEXT: James wants to have a long vacation.\nFOL: JamesWantsLongVacation(x)\n\nTEXT: Mia's favorite season is spring.\nFOL: MiaFavoriteSeason(spring)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 41,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((Object(x) & IsHardcoverBook(x)) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: all x. ((1984 & IsStreamingService(x)) -> IsHardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(1984) & HardcoverBook(1984)) -> PrintedText(1984))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (Object(x) & HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((1984 = StreamingService(x)) & HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((1984 = StreamingService(x)) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(1984) & HardcoverBook(1984)) -> PrintedText(1984))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(x) & 1984) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(x) & 1984) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (-StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((Object(x) & HardcoverBook(x)) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(x) & 1984) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(x) & 1984) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((Object(x) & HardcoverBook(x)) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(1984) & HardcoverBook(1984)) -> PrintedText(1984))\n\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 42,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (Object(x) & HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (StreamingService(1984) & HardcoverBook(1984) -> PrintedText(1984))\n\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((Object(x) & IsHardcoverBook(x)) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & IsHardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (MakeHardcoverBook(x) & PrintedText(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & MakeHardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: all x. ((StreamingService(1984) & HardcoverBook(1984)) -> PrintedText(1984))\n\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(1984) & HardcoverBook(x)) -> PrintedText(x))\n\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((Object(x) & IsHardcoverBook(x)) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & IsHardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((1984 = StreamingService(x)) -> (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(x)\n\n</EVALUATE>\n\nNote: In FOL, the `exists` keyword is used to specify that the statement is true for at least one value of the variable `x`. In this case, `exists x` means that there exists at least one object `x` for which the statement is true.",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((Object(x) & IsHardcoverBook(x)) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 == StreamingService(x) & IsHardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 == StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (HardcoverBook(x) -> PrintedText(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((Object(x) & IsHardcoverBook(x)) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & IsHardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (MakeHardcoverBook(x) & PrintedText(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: 1984 is a streaming service.\nFOL: 1984 is a hardcover book.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(1984) & HardcoverBook(x)) -> PrintedText(x))\n\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(1984) & HardcoverBook(1984)) -> PrintedText(1984))\n\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((Object(x) & IsHardcoverBook(x)) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: all x. ((1984 = StreamingService(x)) & IsHardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (Object(x) & HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((1984 = StreamingService(x)) & HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (PrintedText(x) & HardcoverBook(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is a streaming service.\nFOL: 1984 = StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. ((HardcoverBook(x) & PrintedText(x)) -> True)\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: 1984 is a streaming service.\nFOL: 1984 is a hardcover book.\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 43,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (MakeHardcoverBook(x) -> PrintedText(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (StreamingService(1984) & MakeHardcoverBook(1984))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  Sure, I can help you with that! Here's the translation of the given sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (MakeHardcoverBook(x) & PrintedText(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (StreamingService(1984) & MakeHardcoverBook(1984))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or if you'd like me to translate any other sentences.",
    "  Sure, I can help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) & HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or if you'd like me to translate any other sentences.",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (-StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (MakeHardcoverBook(x) & PrintedText(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 == StreamingService(x) & MakeHardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (MakeHardcoverBook(x) -> PrintedText(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> MakeHardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (Object(x) & HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 & StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(x) & 1984) -> HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: -StreamingService(1984) -> -HardcoverBook(1984)\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (-StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (-StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) -> HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (-StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Object(x) -> (PrintedText(x) & HardcoverBook(x)))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (Object(x) & HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(1984) & HardcoverBook(1984)) -> PrintedText(1984))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: exists x. (Object(x) & HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (-StreamingService(x) & 1984 = x) -> HardcoverBook(x)\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: -StreamingService(1984) -> -HardcoverBook(1984)\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. ((StreamingService(x) & 1984) -> HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\n\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\n\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\n\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\n\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: exists x. (1984 = StreamingService(x) & HardcoverBook(x))\n\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 44,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, LanguageFamily(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & RelatedTo(x, Language(spanish)))\n\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & RelatedTo(x, Language(anyLanguage)))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (Language(x) & RomanceLanguage(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-RelatedTo(x, x))\n\nTEXT: Basque is a Romance language.\nFOL: Basque(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> French(x) or Language(x) -> Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (RelatedTo(x) & Language(x) -> German(x) or Language(x) -> Spanish(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) -> NotRelatedTo(x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) -> Language(x) = Basque(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) -> Language(x) = Language(y)))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) -> RelatedTo(x, y) & Language(y) = Spanish)\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-RelatedTo(x, x) & -Language(x) = Basque)\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) = Basque)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> French(x) or Language(x) -> Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> RelatedTo(x, Spanish(x)))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) -> NotRelatedTo(x, x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) -> Language(x) -> Basque(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) & Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish -> RomanceLanguage(x, y)\n\nTEXT: German is related to Spanish.\nFOL: German & Spanish -> Related(x, y)\n\nTEXT: Basque is not related to any other language.\nFOL: Basque & Language(x) -> -Related(x, y)\n\nTEXT: Basque is a Romance language.\nFOL: Basque -> RomanceLanguage(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish -> RomanceLanguage(French, Spanish)\n\nTEXT: German is related to Spanish.\nFOL: German -> RelatedTo(German, Spanish)\n\nTEXT: Basque is not related to any other language.\nFOL: -RelatedTo(Basque, _ _)\n\nTEXT: Basque is a Romance language.\nFOL: Basque -> RomanceLanguage(Basque)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & RelatedTo(x, y) & Spanish(x) & German(y))\n\nTEXT: Basque is not related to any other language.\nFOL: none x. (Language(x) -> NotRelatedTo(x, x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (Language(x) & RomanceLanguage(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> RelatedTo(x, Spanish(x)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) -> NotRelatedTo(x, x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> Basque(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) & Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) & Language(x) -> (RomanceLanguage(y) & Language(y)))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & Related(x, y) & German(x) & Spanish(y))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) -> (-Related(x, y)) & (-Language(y)))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> Basque(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) & Language(x) = Language(y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & RelatedTo(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) &!RelatedTo(x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) = Basque)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) -> (Language(y) & Language(z) -> Related(x, z))))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) -> (French(x) & Spanish(x)))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (German(x) & Spanish(y) -> Related(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) -> (-Related(x, y)) & (x!= Basque))\n\nTEXT: Basque is a Romance language.\nFOL: Basque(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (RomanceLanguage(x) & RomanceLanguage(y) -> Equal(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> RelatedTo(x, Spanish(x)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-RelatedTo(x, x))\n\nTEXT: Basque is a Romance language.\nFOL: Basque(basque)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) & Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) & Language(x) -> (RomanceLanguage(y) & Language(y)))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) -> (Related(x, y) & German(x) & Spanish(y)))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) -> (-Related(x, y)) & (-Language(y)))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> Basque(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) -> Language(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) -> RelatedTo(y))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (-RelatedTo(x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> RomanceLanguage(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInFamily(x1, x2) -> RelatedLanguage(x1, x2))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (French(x) & Spanish(x) -> RomanceLanguage(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (German(x) & Spanish(y) -> RelatedLanguage(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -RelatedLanguage(x, _))\n\nTEXT: Basque is a Romance language.\nFOL: Basque(basque)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, LanguageFamily(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & RelatedTo(x, Language(spanish)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-RelatedTo(x, Language(anyLanguage)) & Language(x)!= anyLanguage)\n\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & Related(x) -> German(x) & Spanish(x))\n\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & Related(x) -> Basque(x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> Basque(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) -> Language(x) = Language(y)))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) -> RelatedTo(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) -> Language(x) = Basque))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x) & Language(y) -> Related(x, y))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x, y) for some Language(y))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish -> RomanceLanguage(x)\n\nTEXT: German is related to Spanish.\nFOL: German & Spanish -> Related(x, y)\n\nTEXT: Basque is not related to any other language.\nFOL: Basque & -Language(x) -> NotRelated(x, y)\n\nTEXT: Basque is a Romance language.\nFOL: Basque -> RomanceLanguage(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & RelatedTo(x, Spanish))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) & -RelatedTo(x, x))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (Language(x) & RomanceLanguage(x, x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> French(x) | Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (RelatedTo(German, Spanish))\n\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (RelatedTo(Basque, x))\n\nTEXT: Basque is a Romance language.\nFOL: Basque(basque)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> (Language(x) & IndoEuropean(x)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (RelatedTo(x, Language(y)) & Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (RomanceLanguage(x) & RomanceLanguage(y) & Language(x) = Language(y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & RelatedTo(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & RelatedTo(x, Language(y)))\n\nTEXT: Basque is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) = Basque)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (RomanceLanguage(x) & -NotAlone(x)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInFamily(x) -> (RelatedTo(x) & -NotAlone(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish - RomanceLanguage - EachOther\n\nTEXT: German is related to Spanish.\nFOL: German - LanguageInFamily - Spanish - RelatedTo\n\nTEXT: Basque is not related to any other language.\nFOL: Basque - NotInLanguageFamily - AnyOtherLanguage\n\nTEXT: Basque is a Romance language.\nFOL: Basque - RomanceLanguage - NotIndoEuropean\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x) & Language(y) -> Related(x, y))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x, y))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (RomanceLanguage(x) & RomanceLanguage(y) & Language(x) -> Language(y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & Related(x, y) & Language(x) -> Language(y) & Language(y) -> Related(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Related(x, y) & Language(x) & Language(y))\n\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 45,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) -> NotRelatedTo(x))\n\nTEXT: German is a Romance language.\nFOL: exists x. (German(x) & RomanceLanguage(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) -> French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x) -> RelatedTo(x, x))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (-RelatedTo(x, x))\n\nTEXT: German is a Romance language.\nFOL: German(german)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & -NotRelatedTo(x)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (RelatedTo(x) & -NotInDifferentLanguageFamily(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) -> (French(x) & Spanish(x)))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & RelatedTo(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: all x y. (Language(x) & Language(y) & NotRelatedTo(x, y))\n\nTEXT: German is a Romance language.\nFOL: exists x. (Language(x) & RomanceLanguage(x) & German(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) -> Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) -> (French(x) & Spanish(x)))\n\nTEXT: German is related to Spanish.\nFOL: all x. (Related(x, y) -> (German(x) & Spanish(y)))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (NotRelated(x, y) -> (Basque(x) & -AnyOtherLanguage(x, y)))\n\nTEXT: German is a Romance language.\nFOL: all x. (RomanceLanguage(x) -> (German(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, LanguageFamily(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & RelatedTo(x, Language(spanish)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) & NotRelatedTo(x, LanguageFamily(x)))\n\nTEXT: German is a Romance language.\nFOL: exists x. (Language(x) & RomanceLanguage(x, German))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) & Language(x) = Language(y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & Related(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) & NotRelated(x))\n\nTEXT: German is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) = German)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedToOtherLanguages(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> (French(x) & Spanish(x)))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> (German(x) & RelatedToSpanish(x)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) & NotRelatedToAnyOtherLanguage(x))\n\nTEXT: German is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> German(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> French(x) or Language(x) -> Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> RelatedTo(x, y) & Language(y) -> Spanish(y))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) -> NotRelatedTo(x, y) & Language(y) -> None)\n\nTEXT: German is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> German(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, LanguageFamily(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> RelatedTo(x, Spanish(x)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) -> NotRelatedTo(x, LanguageFamily(x)))\n\nTEXT: German is a Romance language.\nFOL: exists x. (Language(x) -> RomanceLanguage(x) & German(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInLanguageFamily(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) & SameLanguageFamily(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & RelatedTo(x, y) & SameLanguageFamily(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: -exists x y. (Language(x) & Language(y) & RelatedTo(x, y))\n\nTEXT: German is a Romance language.\nFOL: exists x. (Language(x) & RomanceLanguage(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> RomanceLanguage(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInFamily(x1, x2) -> Related(x1, x2))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish in RomanceLanguage.\n\nTEXT: German is related to Spanish.\nFOL: German in LanguageInFamily(German, Spanish).\n\nTEXT: Basque is not related to any other language.\nFOL: Basque not in LanguageInFamily(Basque, _).\n\nTEXT: German is a Romance language.\nFOL: German in RomanceLanguage.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & Related(x, y) & Spanish(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Related(x))\n\nTEXT: German is a Romance language.\nFOL: exists x. (Language(x) & RomanceLanguage(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) -> Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) -> Equal(x, y))\n\nTEXT: German is related to Spanish.\nFOL: related x y. (German(x) & Spanish(y) -> Equal(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: not x. (Related(x, y) -> NotEqual(x, y))\n\nTEXT: German is a Romance language.\nFOL: German(german) -> RomanceLanguage(german)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, LanguageFamily(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) -> French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & RelatedTo(x, Spanish(x)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Basque(x) & -RelatedTo(x, Language(x)))\n\nTEXT: German is a Romance language.\nFOL: exists x. (German(x) & RomanceLanguage(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Basque(x) & -Related(x))\n\nTEXT: German is a Romance language.\nFOL: exists x. (German(x) & RomanceLanguage(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x) & -NotAlone(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, LanguageFamily(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & RelatedTo(x, Language(spanish)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) & NotRelatedTo(x, LanguageFamily(x)))\n\nTEXT: German is a Romance language.\nFOL: Language(german) -> RomanceLanguage(german)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) -> Language(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) -> Language(y) & Related(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) -> NotRelated(x))\n\nTEXT: German is a Romance language.\nFOL: all x. (German(x) -> RomanceLanguage(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Basque(x) & Language(x))\n\nTEXT: German is a Romance language.\nFOL: German(german)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) & RomanceLanguage(x) & RomanceLanguage(y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & RelatedTo(x, y) & Language(y) = Spanish)\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-RelatedTo(x, y) & Language(y)!= Basque)\n\nTEXT: German is a Romance language.\nFOL: exists x. (Language(x) & RomanceLanguage(x) & German(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish in Language(x) -> Romance(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x) -> Related(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Basque(x) & -Related(x) & -Language(x))\n\nTEXT: German is a Romance language.\nFOL: German in Language(x) -> Romance(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> RomanceLanguage(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInFamily(x1, x2) -> Related(x1, x2))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) -> (French(x) & Spanish(x))));\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (German(x) & Spanish(y) -> Related(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: all x y. (LanguageInFamily(x, y) -> (NotRelated(x, y) | x = y));\n\nTEXT: German is a Romance language.\nFOL: German(x) -> RomanceLanguage(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & German & RelatedTo(x, Spanish))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) & -RelatedTo(x, x))\n\nTEXT: German is a Romance language.\nFOL: exists x. (Language(x) & German & RomanceLanguage(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) -> Equal(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (RelatedTo(x, y) & Language(x) = German & Language(y) = Spanish)\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (NotRelatedTo(x, y) & Language(x)!= Basque & Language(y)!= Basque)\n\nTEXT: German is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) = German)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x) & Language(y) -> -Distance(x, y))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> -Distance(x, y))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish in Language(x) -> Romance(x)\n\nTEXT: German is related to Spanish.\nFOL: German & Spanish in Language(x) -> Distance(x, y)\n\nTEXT: Basque is not related to any other language.\nFOL: Basque in Language(x) -> -Distance(x, y)\n\nTEXT: German is a Romance language.\nFOL: German in Language(x) -> Romance(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (RomanceLanguage(x) & RomanceLanguage(y) -> Equal(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> RelatedTo(x, Spanish(x)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-RelatedTo(x, x))\n\nTEXT: German is a Romance language.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> Equal(x, German(x)))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 46,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x) & Language(y) -> LanguageFamily(x, y))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) & Language(x) -> Language(y))\n\nTEXT: German is related to Spanish.\nFOL: related x y. (Language(x) -> Language(y) & German(x) -> Spanish(y))\n\nTEXT: Basque is not related to any other language.\nFOL: not related x y. (Language(x) -> Language(y) & Basque(x) -> -Language(y))\n\nTEXT: French is an Indo-European language.\nFOL: French x. (IndoEuropean(x) & Language(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x) & Language(y) & Related(x, y))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x, y))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) & RomanceLanguage(y) -> Language(x) = Language(y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & Related(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) -> NotRelated(x, y))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (IndoEuropeanLanguage(x) & Language(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. LanguageFamily(x)\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> Related(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) & Language(x) = Language(y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & Related(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Language(x) & NotRelated(x))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (Language(x) & IndoEuropean(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) & Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) & RomanceLanguage(y) -> (Language(x) & Language(y) -> SameLanguageFamily(x, y)))\n\nTEXT: German is related to Spanish.\nFOL: all x. (Language(x) -> (Related(x, y) & Language(y) & SameLanguageFamily(x, y)))\n\nTEXT: Basque is not related to any other language.\nFOL: -all x. (Language(x) -> (NotRelated(x, y) & Language(y)))\n\nTEXT: French is an Indo-European language.\nFOL: all x. (IndoEuropeanLanguage(x) -> Language(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x) & Language(y) -> LanguageFamily(x, y))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) & Language(x) -> Language(y))\n\nTEXT: German is related to Spanish.\nFOL: -Language(german) & Language(spanish) -> RelatedTo(german, spanish)\n\nTEXT: Basque is not related to any other language.\nFOL: -Language(basque) -> -RelatedTo(basque, Language(x)) for all Language(x)\n\nTEXT: French is an Indo-European language.\nFOL: Language(french) -> IndoEuropean(french)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) & RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & RelatedTo(x, y) & Language(y) = Spanish)\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) & -RelatedTo(x, y) & -Language(y))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (Language(x) & IndoEuropean(x) & -French(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x) & Language(y) -> LanguageFamily(x, y))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) & Language(x) -> Language(y))\n\nTEXT: German is related to Spanish.\nFOL: related x y. (Language(x) -> Language(y) & Language(x) -> German)\n\nTEXT: Basque is not related to any other language.\nFOL: not related x y. (Language(x) -> Language(y) & -Language(x) & -Language(y))\n\nTEXT: French is an Indo-European language.\nFOL: French x. (IndoEuropean(French) -> Language(French))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x, x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (RomanceLanguage(x) & RomanceLanguage(y) -> Equal(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> RelatedTo(x, Spanish(x)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-RelatedTo(x, x))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (IndoEuropeanLanguage(x) -> Language(x) = French(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & RelatedTo(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Basque(x) & -RelatedTo(x))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (French(x) & IndoEuropean(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) -> (Language(y) & Language(z) -> Related(x, z)))))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) & RomanceLanguage(y) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) -> (Related(x, y) & Language(x) = German & Language(y) = Spanish)))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) -> (-Related(x, y)) & (Language(x)!= Basque))\n\nTEXT: French is an Indo-European language.\nFOL: all x. (Language(x) -> IndoEuropean(x) & Language(x) = French))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (RomanceLanguage(x) & -NotRelatedTo(x)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (InLanguageFamily(x) -> RelatedTo(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (French(x) & Spanish(x) -> RomanceLanguage(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x) -> RelatedTo(x))\n\nTEXT: Basque is not related to any other language.\nFOL: -Exists x. (Basque(x) & Language(x) -> NotRelatedTo(x))\n\nTEXT: French is an Indo-European language.\nFOL: all x. (French(x) -> IndoEuropeanLanguage(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (RomanceLanguage(x) & -NotRelatedTo(x))));\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> (RelatedTo(x) & -NotRelatedTo(x))));\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) & French(x) & Spanish(x));\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & RelatedTo(x, Spanish(x))));\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (NotRelatedTo(Basque(x), x))));\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (French(x) & IndoEuropeanLanguage(x)));\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) -> Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x y. (RomanceLanguage(x) & RomanceLanguage(y) -> Language(x) = Language(y)))\n\nTEXT: German is related to Spanish.\nFOL: related x y. (Language(x) -> Language(y) & (German(x) & Spanish(y) -> Related(x, y)))\n\nTEXT: Basque is not related to any other language.\nFOL: not related x y. (Language(x) -> Language(y) & (Basque(x) & -AnyOtherLanguage(x, y)))\n\nTEXT: French is an Indo-European language.\nFOL: language x. (French(x) -> IndoEuropean(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> RomanceLanguage(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInFamily(x1, x2) -> Related(x1, x2))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: both x1, x2. (RomanceLanguage(x1) & RomanceLanguage(x2) -> French(x1) & Spanish(x2))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Related(x, Spanish(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Basque(x) & -Related(x, x))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (French(x) & IndoEuropeanLanguage(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & Language(x) -> French(x) & Spanish(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> RelatedTo(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) -> NotRelatedTo(x))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (IndoEuropeanLanguage(x) & Language(x) -> French(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> RomanceLanguage(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInLanguageFamily(x) -> RelatedToEachOther(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (French(x) & Spanish(x) -> RomanceLanguage(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x) -> RelatedToEachOther(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Basque(x) & -RelatedToAnyOtherLanguage(x))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (French(x) & IndoEuropeanLanguage(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (RomanceLanguage(x) & -NotRelatedTo(x)) & -NotRelatedTo(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> (RelatedTo(x) & -NotRelatedTo(x)) & -NotRelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (French(x) & Spanish(x) & RomanceLanguage(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x) & RelatedTo(x))\n\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) & -RelatedTo(x))\n\nTEXT: French is an Indo-European language.\nFOL: French(french) -> IndoEuropeanLanguage(french)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> Language(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (RomanceLanguage(x) & x = French OR RomanceLanguage(x) & x = Spanish)\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (Language(x) & Language(y) & RelatedTo(x, y) & x = German OR y = Spanish)\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) & -RelatedTo(x))\n\nTEXT: French is an Indo-European language.\nFOL: all x. (Language(x) & IndoEuropean(x) -> French(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) & Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (French(x) & Spanish(x) -> Related(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x y. (German(x) & Spanish(y) -> Related(x, y))\n\nTEXT: Basque is not related to any other language.\nFOL: -exists x y. (Basque(x) & Language(y) -> NotRelated(x, y))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (French(x) & IndoEuropean(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> (Language(x) & Language(y) -> Related(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Related(x, y) -> Language(y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) -> RomanceLanguage(x, y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) -> (Related(x, y) -> Language(y)))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Related(x, y) & Language(y))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (Language(x) -> IndoEuropean(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (RomanceLanguage(x) & Language(x)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (LanguageFamily(x) & Related(x, x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (French(x) & Spanish(x) -> RomanceLanguage(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x) -> Related(x, x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Basque(x) & Language(x) -> NotRelated(x, x))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (French(x) & IndoEuropeanLanguage(x) -> Language(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> Language(x) in x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x y. (Language(x) & Language(y) & RomanceLanguage(x) & RomanceLanguage(y))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & RelatedTo(x, y) & Language(y) = Spanish)\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-RelatedTo(x, y) & Language(y)!= Basque)\n\nTEXT: French is an Indo-European language.\nFOL: Language(french) -> IndoEuropean(french)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> RomanceLanguage(x))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInLanguageFamily(x) -> RelatedTo(x))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: all x. (French(x) & Spanish(x) -> RomanceLanguage(x))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (German(x) & Spanish(x) -> RelatedTo(x))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (-Basque(x) & RelatedTo(x))\n\nTEXT: French is an Indo-European language.\nFOL: all x. (French(x) -> IndoEuropeanLanguage(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\n\nTEXT: The Romance languages are a language family.\nFOL: all x. (LanguageFamily(x) -> (RomanceLanguage(x) & -NotAlone(x)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageInFamily(x) -> (Language(x) & -NotRelated(x)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish. (RomanceLanguage(french) & RomanceLanguage(spanish))\n\nTEXT: German is related to Spanish.\nFOL: German & Spanish. (Language(german) & Language(spanish))\n\nTEXT: Basque is not related to any other language.\nFOL: Basque & -AnyOtherLanguage. (Language(basque) & -Language(x) for all x)\n\nTEXT: French is an Indo-European language.\nFOL: French. IndoEuropeanLanguage(french)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Language(x) -> IndoEuropean(x))\n\nTEXT: The Romance languages are a language family.\nFOL: exists x. (LanguageFamily(x) -> (Language(x) & Language(y) -> LanguageFamily(x, y)))\n\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (Language(x) -> (Language(y) -> Related(x, y)))\n\nTEXT: French and Spanish are both Romance languages.\nFOL: exists x. (RomanceLanguage(x) & RomanceLanguage(y) -> (x = y or x = \"French\" or y = \"Spanish\"))\n\nTEXT: German is related to Spanish.\nFOL: exists x. (Language(x) & Language(y) -> (Related(x, y) & x = \"German\" or y = \"Spanish\"))\n\nTEXT: Basque is not related to any other language.\nFOL: exists x. (Language(x) -> (-Related(x, y) for any Language(y)))\n\nTEXT: French is an Indo-European language.\nFOL: exists x. (IndoEuropeanLanguage(x) & Language(x) -> (x = \"French\"))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 47,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x, y) -> (PlayFor(x, y) -> (Not(PlayFor(y, x)) | (PlayFor(x, y) & Not(PlayFor(y, x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (Soccer(x) | Football(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x, y) -> (Player(x) & Team(y) & NotPlayFor(x, y)))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (Soccer(x) | Football(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (PlayFor(x) & (Not(Team(x)) | Team(x) & NoLongerPlayFor(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> SoccerPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> (SoccerPlayer(x) | FootballPlayer(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (PlayForTeam(x) & NotPlayForTeam(x)))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (SoccerPlayer(x) -> Player(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (Striker(x) | Midfielder(x) | Defender(x)) )\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)) )\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayFor(x) -> (PlayedFor(x) & (Not(Left(x)) | (Left(x) & Not(Team(x)) ) )) )\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (SoccerPlayer(x) | FootballPlayer(x)) )\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (PlayFor(x) & (Not(Team(x)) | Team(x) & Not(PlayFor(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> SoccerPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & Player(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG(x) -> Athlete(x) & Player(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> -PlayFor(x, BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG(x) -> -PlayFor(x, x))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Athlete(x) & Player(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> (SoccerPlayer(x) | FootballPlayer(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (NotPlayFor(x) & Team(x)))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (SoccerPlayer(x) | FootballPlayer(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & Player(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Athlete(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x, BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, team) -> -PlayFor(x, team))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (SoccerPlayer(x) -> Athlete(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & BayernMunchen(x)) & (!(Player(x) & BayernMunchen(x)))))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x) -> (Player(x) & Left(x) -> (!(Player(x) & Left(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (Soccer(x) | Football(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) & (PlayingFor(x, \"Bayern Munchen\") & Not(PlayingFor(x, \"Bayern Munchen\")))))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (Striker(x) & (PlayingFor(x, \"Bayern Munchen\") | Not(PlayingFor(x, \"Bayern Munchen\")))))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x, \"Bayern Munchen\") -> Not(PlayingFor(x, \"Bayern Munchen\"))))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, \"team\") -> Not(PlayingFor(x, \"team\"))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> SoccerPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> (PlayFor(x) & (Not(Left(x))) | (Left(x) & Not(PlayFor(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> SoccerPlayer(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (Team(x) -> NoLongerPlayFor(x)))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> Soccer(x))\n\n</EVALUATE>\"\n\nExplanation:\n\n* In the first sentence, we use the FOL function \"all x\" to specify that the statement applies to all players. We then use the FOL function \"Striker\" to define the type of player that Robert Lewandowski is. Finally, we use the FOL function \"Player\" to specify that Robert Lewandowski is a player, and the FOL function \"Soccer\" or \"Football\" to indicate that he plays soccer or football, respectively.\n* In the second sentence, we use the FOL function \"all x\" again to apply the statement to all players. We then use the FOL function \"BG\" to define the background knowledge that strikers are soccer players, and the FOL function \"Player\" to specify that Robert Lewandowski is a player.\n* In the third sentence, we use the FOL function \"all x\" once again to apply the statement to all players. We then use the FOL function \"Left\" to define the event of a player leaving a team, and the FOL function \"Team\" and \"BayernMunchen\" to specify that Robert Lewandowski left Bayern Munchen.\n* In the fourth sentence, we use the FOL function \"all x\" once again to apply the statement to all players. We then use the FOL function \"Left\" to define the event of a player leaving a team, and the FOL function \"Team\" to specify that the player no longer plays for the team.\n* Finally, in the fifth sentence, we use the FOL function \"all x\" to apply the statement to all players. We then use the FOL function \"Player\" to specify that Robert Lewandowski is a player, and the FOL function \"Soccer\" to indicate that he plays soccer.\n\nNote: In FOL, we use the \"all x\" notation to specify that a statement applies to all players, and the \"x\" variable to represent the individual player in question.",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (Player(x) & Team(x) & (-PlayFor(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (Soccer(x) | Football(x))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (Striker(x) | Midfielder(x) | Defender(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> (Team(x) -> (PlayFor(x) -> -PlayFor(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> SoccerPlayer(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) & Position(x) -> Striker(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) & Position(x) -> Striker(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) -> BayernMunchen(x)) & (!(Player(x) & Team(x)))))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (Player(x) & Team(x) -> (!(Player(x) & Team(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (Soccer(x) & (Position(x) -> Striker(x)))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (Striker(x) | Forward(x)) )\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayedFor(x, y) -> (PlayedFor(y, x) | NotPlayingFor(x, y)) )\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (SoccerPlayer(x) | FootballPlayer(x)) )\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x) -> (Left(x) -> (NotPlayFor(x) & Team(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> Soccer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (PlayFor(x) & Not(PlayFor(x)))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> SoccerPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & -PlayFor(x)))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (Soccer(x) | Football(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x) -> (Player(x) & Team(x) & NotPlayFor(x)))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (Soccer(x) | Football(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x, y) -> (Player(x) & Team(y) & Not(PlayFor(x, y)))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> (Soccer(x) & (Not(Football(x)))))\n\n</EVALUATE>\n\nNote: In FOL, we are using the `all x` to indicate that the statement applies to all values of the variable `x`. We are also using the `TEXT:` and `FOL:` format to indicate the sentence and the FOL translation of the sentence, respectively.",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)) & (!(Player(x) & (Soccer(x) | Football(x)))))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG -> (!(Player(x) & (Soccer(x) | Football(x))) & (Team(x) & Left(x))))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (SoccerPlayer(x) -> Player(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> Athlete(x) & NoLongerPlayFor(x, BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG -> IfAthlete(x) & Left(x) -> NoLongerPlayFor(x, x))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (SoccerPlayer(x) -> Athlete(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) = BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) -> NoLongerPlayFor(x)))\n\nTEXT: Robert Lewandowski is a soccer player.\nFOL: all x. (Player(x) -> SoccerPlayer(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 48,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & (SoccerPlayer(x) -> Player(x)) & (Player(x) -> (Goalkeeper(x) | Forward(x)))))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (SoccerPlayer(x) -> (Forward(x) | Midfielder(x)))))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & (BayernMunchen(x) -> Team(x)))))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x) -> (Player(x) & (Team(x) -> (PlayFor(x) -> (Left(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(x) -> (Player(x) -> (Team(x) -> (Left(x) -> (Player(x) -> (Team(x) -> (PlayFor(",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Athlete(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayedFor(x, y) -> -PlayFor(x, y))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayedFor(robertLewandowski, BayernMunchen)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) = BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (-PlayFor(x, Team(x))) )\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlayFor(x, Team(x)) -> (Player(x) & Team(x) = BayernMunchen))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (Player(x) & Team(x) & -PlayFor(x)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (Player(x) & Team(x) & BayernMunchen(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & (SoccerPlayer(x) -> PlayerPosition(x) -> Striker(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (PlayerPosition(x) -> Striker(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) -> Team(x) & Team(x) = BayernMunchen)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> (Team(x) -> (If(Player(y) & Team(y) = x) -> Not(PlayFor(y, x)))))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlayFor(x, BayernMunchen) -> Player(x) = RobertLewandowski))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)) & (!(Player(x) & (Soccer(x) | Football(x)))))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (Player(x) & (Soccer(x) | Football(x))) -> (!(Team(x) & (Player(x) & (Soccer(x) | Football(x)))))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlaysFor(x) -> (Team(x) & BayernMunchen(x)) & (Player(x) & (Soccer(x) | Football(x)))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & Player(x)) & (NoLongerPlayFor(x) & Team(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG -> (Player(x) & (NoLongerPlayFor(x) & Team(x)))))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlaysFor(x) -> (Team(x) & Player(x)) & (BayernMunchen(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & Player(x)) & (NoLongerPlayFor(x) & Team(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (NoLongerPlayFor(x) -> (Team(x) & Player(x)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (Player(x) -> (Team(x) & BayernMunchen(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Players(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (If(x, Players(x), BayernMunchen(x))) & -Players(x))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlaysFor(x) -> BayernMunchen(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & Player(x)) & NoLongerPlayFor(x))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (NoLongerPlayFor(x) -> (Left(x) & Team(x)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (Player(x) -> (Team(x) & BayernMunchen(x)))\n\n</EVALUATE>"
   ],
   [
    "  \"<EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG(x) -> Player(x) & (Soccer(x) | Football(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG(x) -> (Player(x) & Team(x) & (Not(PlayFor(x)) | (PlayFor(x) & Not(Team(x))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlayFor(x) -> (Player(x) & Team(x) & BayernMunchen(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & -PlayFor(x)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlaysFor(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)) )\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (Player(x) & Team(x) & NotPlayFor(x)) )\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (Player(x) & Team(x) & BayernMunchen(x) )\n\n</EVALUATE>\n\nNote: In the FOL translations, I have used the built-in predicates \"Player\", \"Soccer\", \"Football\", \"Left\", \"NotPlayFor\", and \"Team\" to represent the concepts in the sentences.",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (Player(x) & Team(x) & -PlayFor(x)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (Player(x) & Team(x) & BayernMunchen(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & BayernMunchen(x)) )\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG(x) -> (Player(x) & (Not(PlayForTeam(x)) | (PlayForTeam(x) & Not(x)))) )\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlaysFor(x) -> (Player(x) & BayernMunchen(x)) )\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayedFor(x, y) -> (-PlayedFor(x, y) & Player(y)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayedFor(robertLewandowski, BayernMunchen)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayFor(x, y) -> (-PlayFor(x, z) & PlayFor(z, y)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n\n</EVALUATE>\"\n\nNote: In FOL, we use the \"all x\" syntax to specify that the statement applies to all values of x. The \"text:\" and \"FOL:\" formats are used to distinguish between the natural language sentence and the formal logic translation.",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -Player(robertLewandowski) & -Team(BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> (Team(y) & NotPlayFor(x, y)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: Player(robertLewandowski) & Team(BayernMunchen)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Players(x) & BayernMunchen(x)) & (!(Players(x) & RobertLewandowski(x)))))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (If(x, y) -> (Players(y) & (Not(Players(x)) | (Players(x) & Not(y)))))))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlaysFor(x) -> (BayernMunchen(x) & (Not(PlaysFor(x)) | (PlaysFor(x) & BayernMunchen(x)))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & Player(x)) & (NoLongerPlayFor(x) & Team(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG -> (If(x) -> (Left(x) & NoLongerPlayFor(x) & Team(x)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlaysFor(x) -> (Team(x) & Player(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & (SoccerPlayer(x) -> PlayFor(x, \"Bayern Munchen\"))))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (Striker(x) -> Athlete(x)) & (Athlete(x) -> PlayFor(x, \"Bayern Munchen\"))))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayFor(robertLewandowski, \"Bayern Munchen\")\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayFor(x, \"Bayern Munchen\") -> (-PlayFor(x, \"Bayern Munchen\") & Athlete(x)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, \"Bayern Munchen\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Athlete(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayFor(x, y) -> -PlayFor(x, y))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (Striker(x) | Midfielder(x) | Defender(x) | Goalkeeper(x))))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayedFor(x, y) -> (NotPlayingFor(x, y) & (x = y)))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayedFor(robertLewandowski, BayernMunchen)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & Player(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Athlete(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -Player(robertLewandowski & BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> -PlayForTeam(x, x))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: Player(robertLewandowski) & PlayForTeam(robertLewandowski, BayernMunchen)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> -PlayFor(x, BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG -> -PlayFor(x, x))\n\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: all x. (PlayFor(x, BayernMunchen) -> Athlete(x) & SoccerPlayer(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 49,
  "responses": [
   [
    "  \"<EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & -PlayFor(x)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x, BayernMunchen) -> NoLongerPlayFor(x, BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG -> If(x, Left(x, y), NoLongerPlayFor(x, y)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Athlete(x) & Good(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> Player(x) & Soccer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & (!PlayFor(x)) ))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n\n</EVALUATE>\n\nNote: In FOL, the \"all x\" in the FOL expressions means \"for all values of x\".",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -Player(robertLewandowski) & -Team(BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> (Team(x) & (-PlayFor(x)) | (PlayFor(x) & -Team(x)))))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: leftBayernMunchen(robertLewandowski)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (leftTeam(x) -> noLongerPlayFor(x, x))\n\nTEXT: Robert Lewandowski is a star.\nFOL: star(robertLewandowski)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x, BayernMunchen) -> NoLongerPlayFor(x, BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> If(Left(x, y), NoLongerPlayFor(x, y), False))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Athlete(x) & Good(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (Striker(x) | Forward(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (NotPlayFor(x) & Team(x)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) | Great(x)))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG(x) -> (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG(x) -> (If(Left(x), Then(NoLongerPlayFor(x)), Null)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) | Great(x)))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x, y) -> (Player(x) & Team(y) & NotPlayFor(x, y)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) | Great(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) & Position(x) = \"striker\"))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> (Position(x) = \"striker\" & Player(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayedFor(x, y) -> (NotPlayingFor(x, y) & PlayedFor(y, x)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) & Famous(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayedFor(x, y) -> (Not(PlayedFor(x, z)) & (PlayedFor(z, y) | Not(PlayedFor(z, x)))) )\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) | Great(x)) )\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedForBayernMunchen(robertLewandowski)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayedForTeam(x) -> NotPlayingForTeam(x))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (NotPlayFor(x) & Team(x)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & SoccerPlayer(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Athlete(x) & Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(robertLewandowski, BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (PlayedFor(x, y) -> -Play(x, y))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Athlete(x) & Good(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (PlayFor(x) & (Not(Team(x)) | (Team(x) & Not(PlayFor(x)))))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) | Great(x)))\n\n</EVALUATE>\"\n\nExplanation:\n\n* \"all x\" is used to indicate that the statement applies to all values of the variable x.\n* \"TEXT:\" is used to indicate the sentence to be evaluated.\n* \"FOL:\" is used to indicate the FOL expression that represents the meaning of the sentence.\n* \"all x. (...)\" is used to define a first-order logic formula that represents the meaning of the sentence.\n* \"&\" is used to indicate conjunction, meaning that both conditions must be true for the statement to be true.\n* \"!\" is used to indicate negation, meaning that the opposite of the statement is true.\n* \"Good(x) / Great(x)\" are used to indicate the different ways to express the concept of being a star.\n\nNote: FOL expressions are written in a format similar to the Python NLTK package's logic module, which is why the syntax may look familiar."
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) & Position(x) -> Forward(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Player(x) & (Soccer(x) & Position(x) -> Forward(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) -> BayernMunchen(x) & NoLongerPlayFor(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (Player(x) & Team(x) -> (NoLongerPlayFor(x) -> Left(x)))))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) & Famous(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Player(x) & Left(x, BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> (Left(x, y) -> (NotPlayFor(x, y) | PlayFor(x, y))))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (PlayFor(x) & (Not(Team(x)) | Team(x) & Not(PlayFor(x)))))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) | Great(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> (Team(x) -> NoLongerPlayFor(x)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) | Great(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)) )\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> (Soccer(x) | Football(x)) )\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)) )\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Bg(x) -> (Player(x) & (NotPlayFor(x, team) -> (Not(team)))))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) -> (Not(Bad(x))) ) )\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> (NoLongerPlayFor(x) & Team(x)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Team(x) & BayernMunchen(x)) & NoLongerPlayFor(x, BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (BG -> (If(x, y) -> (NoLongerPlayFor(x, y) & Not(PlayFor(x, y)))))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Athlete(x) & Player(x))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Bg(x) -> Athlete(x) & Player(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -Player(robertLewandowski & BayernMunchen)\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> -PlayFor(x, x))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Athlete(x) & Good(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (BG -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Left(x) -> (Player(x) & Team(x) & BayernMunchen(x)))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (If(x) -> (Player(x) & Team(x) & NotPlayFor(x)))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & (Good(x) | Great(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Robert Lewandowski is a striker.\nFOL: all x. (Striker(x) -> Player(x) & (Soccer(x) | Football(x)))\n\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\n\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: all x. (Player(x) & Left(x, BayernMunchen))\n\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) -> (Left(x, team) & (team = BayernMunchen | team = any other team))))\n\nTEXT: Robert Lewandowski is a star.\nFOL: all x. (Star(x) -> Player(x) & Good(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 50,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: all x. (Montana(x) -> (City(x) & -Missoula(x)) | (City(x) & Missoula(x)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & State(x) & -WhiteSulphurSprings(x) & -Butte(x))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityInButte(x) -> -Pierre(x)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. (City(x) & State(x) & Butte(x) & Pierre(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(Montana) includes city(Butte) & city(Helena) & city(Missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: city(WhiteSulphurSprings) in same state(Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: city(Pierre) not in Montana\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: any city(Butte) not in Pierre\n\nTEXT: Butte and Pierre are in the same state.\nFOL: Butte in same state(Pierre)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> exists y. (City(y) & Montana(y)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (State(x) & exists y. (City(y) & State(y)))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityInButte(x) -> -Montana(x)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. (State(x) & exists y. (Butte(y) & State(y)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> exists y. (City(y) & in Montana(x)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & exists y. (City(y) & in SameState(x, y)))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x) -> -City(Pierre))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & in Butte(x) -> -City(Pierre))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. (City(x) & exists y. (City(y) & in SameState(x, y)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana.\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(Montana) includes city(Butte) & city(Helena) & city(Missoula).\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: city(WhiteSulphurSprings) in state(Butte).\n\nTEXT: The city of Pierre is not in Montana.\nFOL: city(Pierre) in Montana(false).\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. city(x) in Butte & -city(x) in Pierre.\n\nTEXT: Butte and Pierre are in the same state.\nFOL: state(Butte) & state(Pierre).\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in montana\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: montana(montana) includes cities(Butte, Helena, Missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: whiteSulfurSprings(whiteSulfurSprings) & butte(butte) in same state\n\nTEXT: The city of Pierre is not in Montana.\nFOL: city(Pierre) in montana(false)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: any city(anyCity) in butte(butte) not in pierre(Pierre)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: butte(butte) & pierre(pierre) in same state(true)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> (city(Butte) in Montana & city(Helena) in Montana & city(Missoula) in Montana))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (WhiteSulphurSprings(x) & city(Butte)(x))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(Pierre) -> -city(Pierre) in Montana\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (city(Butte)(x) -> -city(Pierre)(x))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. (Butte(x) & Pierre(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. Montana(y) & exists z. City(z) & (y = z Or y = Helena Or y = Missoula Or y = Butte)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists w. State(w) & exists x. State(x) & (w = x Or w = Butte Or x = Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists p. Montana(p) & -City(p)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists b. City(b) & exists p. City(p) & (b = Butte Or p = Butte)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists b. State(b) & exists p. State(p) & (b = p Or b = Butte Or p = Butte)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. Montana(y) & exists z. City(z) & (y = z Or y = Helena Or y = Missoula Or y = Butte)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists w. State(w) & exists x. City(x) & exists y. City(y) & (w = x Or w = y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists p. City(p) & Montana(p) & -Exists q. City(q) & Montana(q)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists b. City(b) & Butte(b) & exists p. City(p) & Pierre(p) & -Exists q. City(q) & Butte(q)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists b. City(b) & Butte(b) & exists p. City(p) & Pierre(p) & State(b)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists Montana. (city(Butte) & city(Helena) & city(Missoula) in Montana)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists state. (city(WhiteSulphurSprings) & city(Butte) in state)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not Montana. (city(Pierre) in Montana)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists Butte. (city(Butte) -> -city(Pierre))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists state. (city(Butte) & city(Pierre) in state)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) -> Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) -> (city(x) & in(x, Butte) & in(x, Helena) & in(x, Missoula))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. (in(WhiteSulphurSprings, x) & in(Butte, y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (in(Butte, x) & not Montana(x))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. exists y. (in(Butte, x) & in(Pierre, y))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. (City(y) & Montana(y)) & exists z. (City(z) & Montana(z)) & (Butte(y) & Helena(z) & Missoula(z))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists w. (City(w) & State(w) & Butte(w))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists p. (City(p) & Montana(p) -> -City(p))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists u. (City(u) & Butte(u) -> -City(u))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists v. (City(v) & State(v) & Butte(v))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. (City(y) & Montana(y)) & (Butte(y) | Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists z. (City(z) & SameState(z, Butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists w. (City(w) & Montana(w)) & (-Exists(w, Pierre))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists v. (City(v) & Butte(v)) & (-Exists(v, Pierre))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists u. (City(u) & SameState(u, Butte)) & (City(u) & SameState(u, Pierre))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) & exists y. City(y) & (Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. City(x) & Montana(x) & -Pierre(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. exists y. City(x) & Butte(y) & -Pierre(y)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (Butte(x) & Pierre(y))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in montana.\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: montana(x) includes cities(Butte, Helena, Missoula).\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: city(WhiteSulphurSprings) in state(Butte).\n\nTEXT: The city of Pierre is not in Montana.\nFOL: montana(Pierre) -> false.\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: any city(x) in butte -> not(city(x) in Pierre).\n\nTEXT: Butte and Pierre are in the same state.\nFOL: state(Butte) & state(Pierre) -> true.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: all x. (Montana(x) -> (City(x) & (Butte(x) | Helena(x) | Missoula(x)))))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & State(x) & (WhiteSulphurSprings(x) & Butte(x)))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x) -> -Pierre(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & Butte(x) -> -Pierre(x))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. (City(x) & State(x) & (Butte(x) & Pierre(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) -> exists y. City(y) & (Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. City(x) & Montana(x) -> -City(Pierre(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. exists y. City(x) & Butte(y) -> -City(Pierre(x))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (Butte(x) & Pierre(y))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. Montana(y) & exists z. City(z) & (y = z Or y = Helena Or y = Missoula Or y = Butte)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists w. State(w) & exists x. City(x) & exists y. City(y) & (w = x Or w = y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists p. City(p) & Montana(p) -> False\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists q. City(q) & Butte(q) -> Not(City(p) & Pierre(p))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists r. State(r) & exists s. City(s) & exists t. City(t) & (r = s Or r = t)\n\n</EVALUATE>\n\nNote: FOL syntax and semantics are based on the NLTK package's default settings.",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(Billings) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x y. Montana(x) & exists y. City(y)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. State(x) & exists y. City(WhiteSulphurSprings) & State(y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. Montana(x) & City(Pierre) -> -Montana(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x y. City(Butte) & exists y. City(Pierre) & -Montana(y)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x y. State(x) & exists y. City(Butte) & State(y)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) & exists y. City(y) & (Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. City(x) & Montana(x) & -Pierre(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. exists y. City(x) & Butte(y) & -Pierre(x)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (Butte(x) & Pierre(y))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> exists y. (City(y) & (Butte(y) | Helena(y) | Missoula(y)))))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & exists y. (City(y) & (Butte(y) & WhiteSulphurSprings(y))))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & Butte(x) -> -City(x) & Pierre(x))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. (City(x) & Butte(x) -> exists y. (City(y) & Pierre(y)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in montana\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: montana(Montana) includes city(Butte) & city(Helena) & city(Missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: city(WhiteSulphurSprings) in same state(Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: montana(Pierre) -> -in(Pierre, Montana)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -in(Butte, Pierre)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: same state(Butte, Pierre)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) & exists y. City(y) & (Butte(y) & Helena(y) & Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. City(x) & Montana(x) & -Pierre(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. exists y. City(x) & Butte(y) & -Pierre(x)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (Butte(x) & Pierre(y))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x y. Montana(x) & exists y. City(y)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. State(x) & exists y. City(y) & -State(x, y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(butte) -> -Montana(pierre)\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x y. State(x) & exists y. City(y) & -State(x, y)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> exists y. (City(y) & (Butte(y) | Helena(y) | Missoula(y)))))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & exists y. (City(y) & (WhiteSulphurSprings(y) & Butte(y)))))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x) -> -City(Pierre(x))))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & Butte(x) -> -City(Pierre(x))))\n\nTEXT: Butte and Pierre are in the same state.\nFOL: exists x. (City(x) & exists y. (City(y) & (Butte(y) & Pierre(y)))))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 51,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. (City(y) & Montana(y)) & (Helena(y) & Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists z. (City(z) & State(z) & WhiteSulphurSprings(z) & Butte(z))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(pierre) -> -City(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists w. (City(w) & Butte(w)) -> -City(w)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists v. (City(v) & State(v) & Pierre(v) & Bismarck(v))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) & city(x)) in (Butte(x), Helena(x), Missoula(x))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (WhiteSulphurSprings(x) & city(x)) in (Butte(x))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (-city(x) in Butte(x)) -> not city(x) in Pierre(x)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. (Pierre(x) & Bismarck(x)) in (state(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(Billings) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) & exists y. City(y) & (Helena(y) & Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & Montana(x) & Montana(y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. City(Pierre) & Montana(x) -> -Montana(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. exists y. City(Butte) & City(y) & Montana(x) -> -Montana(y)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. exists y. City(Pierre) & City(Bismarck) & Montana(x) -> Montana(y)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in montana.\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: montana(x) -> exists y. (city(y) in x) & (Butte(y) in x) & (Helena(y) in x) & (Missoula(y) in x)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists y. (WhiteSulphurSprings(y) in Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: not(city(x) in Butte) -> not(x in Pierre)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists y. (Pierre(y) in Bismarck)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (City(x) & Montana(x)) -> exists y. (City(y) & Montana(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & exists y. (City(y) & SameState(x, y)))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x) -> -City(Pierre))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & Butte(x) -> -City(Pierre))\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. (City(x) & exists y. (City(y) & SameState(x, y)))\n</EVALUATE>\n\nNote: SameState(x, y) is a fictional function that returns true if the cities x and y are in the same state, and false otherwise."
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> (City(x) & Butte(x) & Helena(x) & Missoula(x)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & State(x) -> (WhiteSulphurSprings(x) & Butte(x)))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (-City(x) & Butte(x) -> -Pierre(x))\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. (State(x) -> (Pierre(x) & Bismarck(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> (City(x) & -Missoula(x)) | (City(x) & -Helena(x)) | (City(x) & -Butte(x)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(whiteSulfurSprings) & City(butte) & State(whiteSulfurSprings, butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(pierre) & Montana(x) -> -City(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(butte) & City(pierre) -> -City(x))\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. (City(pierre) & City(bismarck) & State(pierre, bismarck))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) & exists y. City(y) & (Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & Montana(x) & Montana(y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. City(x) & Montana(x) & -Exists y. City(y) & Montana(y)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. City(x) & Butte(x) & -Exists y. City(y) & Pierre(y)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. exists y. City(x) & City(y) & -Montana(x) & Montana(y)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x y. (Montana(x) & City(y)) -> (Helena(x) & City(y)) | (Missoula(x) & City(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. (City(x) & City(y)) -> (WhiteSulphurSprings(x) & y) | (Butte(x) & y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityInButte(x) -> -Pierre(x)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x y. (State(x) & State(y)) -> (Pierre(x) & y) | (Bismarck(x) & y)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: all x. (Montana(x) -> (City(x) & Includes(x, Butte, Helena, Missoula)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. (City(x) & City(y) & State(x, y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -Includes(any x, Butte, Pierre)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x y. (City(x) & City(y) & State(x, y))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) -> exists y. City(y) & (Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & Montana(x) -> (WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. City(x) & Montana(x) -> -Pierre(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. exists y. City(x) & Butte(y) -> -Pierre(x)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. exists y. City(x) & City(y) & Montana(x) -> (Pierre(x) & Bismarck(y))\n\n</EVALUATE>\n\nNote: In FOL, the `exists` keyword is used to indicate that a statement is true for at least one value of the variable(s) involved. For example, `exists x. City(x)` means \"there exists a city x\" and `exists y. City(y)` means \"there exists a city y\".",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x y. (Montana(x) & City(y)) -> (Helena(y) & Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. (City(x) & City(y)) -> (WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x)) -> -Pierre(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x y. (City(x) & Butte(y)) -> -Pierre(x)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x y. (City(x) & Bismarck(y)) -> (Pierre(x) & y)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (City(x) -> (Montana(x) & exists y. (City(y) & Montana(y)))))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & exists y. (City(y) & (Montana(x) & Montana(y))))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x) -> -City(Pierre))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & Butte(x) -> -City(Pierre))\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. (City(x) & Bismarck(x) -> Montana(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> exists y. (City(y) & in Montana(y)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & City(whiteSulfurSprings) & in SameState(x, whiteSulfurSprings))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not exists x. (City(x) & Montana(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & in Butte(x) -> not exists y. (City(y) & in Pierre(y)))\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. (City(x) & Bismarck(x) & in SameState(x, Bismarck(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(Billings) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) & exists y. City(y) & (x = Montana(y) Or x = Helena Or x = Missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (x = Montana(y) Or x = Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. City(Pierre) & Montana(x) -> False\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. exists y. City(y) & City(Butte) & (y = Pierre Or y = -City(Butte))\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. exists y. City(Pierre) & City(Bismarck) & (x = Montana(y) Or x = -City(Bismarck))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists Montana. exists Butte. exists Helena. exists Missoula. (And(Montana, Butte, Helena, Missoula))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists WhiteSulphurSprings. exists Butte. (And(WhiteSulphurSprings, Butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not exists x. City(Pierre) & Montana(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists Butte. exists City(x). (And(Butte, City(x)) -> not exists x. City(Pierre) & Montana(x))\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists Pierre. exists Bismarck. (And(Pierre, Bismarck))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x y. (Montana(x) & City(y)) -> (Helena(y) & Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. (State(x) & City(y)) -> (WhiteSulphurSprings(y) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(pierre) -> -City(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x y. (City(x) & Butte(y)) -> -City(pierre)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x y. (State(x) & City(y)) -> (Pierre(y) & Bismarck(y))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) -> Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> (city(x) & in(x, Butte) & in(x, Helena) & in(x, Missoula)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (WhiteSulphurSprings(x) & city(x) & in(x, Butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(Pierre) -> -in(Pierre, Montana)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (city(x) & in(x, Butte) -> -in(x, Pierre))\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. (Pierre(x) & Bismarck(x) -> in(x, state))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: all x. (Montana(x) -> exists y. (City(y) & in(y, Montana(x))))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & in(WhiteSulphurSprings, x)) & exists y. (City(y) & in(y, Butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -in(Butte, Pierre)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. (City(x) & in(Pierre, x)) & exists y. (City(y) & in(y, Bismarck))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in montana.\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: montana(x) -> exists y. (city(y) in x) & (Butte(y) in x) & (Helena(y) in x) & (Missoula(y) in x)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists y. (city(y) in WhiteSulphurSprings) & (city(y) in Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: not in Pierre(any city in Butte)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists y. (state(y) in Pierre) & (state(y) in Bismarck)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. (City(y) & Montana(y)) -> exists z. (City(z) & (Butte(z) | Helena(z) | Missoula(z))),\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists z. (City(z) & (WhiteSulphurSprings(z) & Butte(z))),\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(Pierre) & Montana(Pierre),\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(x) & Butte(x) -> -City(Pierre),\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists z. (City(z) & Bismarck(z)) -> exists w. (City(w) & (Pierre(w) | Bismarck(w))),\n\n</EVALUATE>\n\nNote: FOL expressions are written in the format of the Python NLTK package's logic module, which is a standard format for expressing logical statements in formal logic.",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(x) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. Montana(x) -> exists y. City(y) & (Helena(y) & Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(any x. Butte) -> -City(x)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x. exists y. City(x) & City(y) & (Pierre(x) & Bismarck(y))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. (City(y) & Montana(y)) & (Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists z. (City(z) & SameState(z, WhiteSulphurSprings))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(Pierre) & Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists w. (City(w) & InButte(w)) & -City(Pierre)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists v. (City(v) & SameState(v, Pierre))\n\n</EVALUATE>\n\nNote: In FOL, the `exists` keyword is used to indicate that a statement is true for at least one value of the variable. For example, `exists x. (City(x) & Montana(x))` means \"there exists a city that is also in Montana\".",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x y. (Montana(x) & City(y)) -> (Helena(x) & City(y)) | (Missoula(x) & City(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. (City(x) & City(y)) -> (WhiteSulphurSprings(x) & y) | (Butte(x) & y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(pierre) -> -City(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x y. (City(x) & Butte(x)) -> -City(y)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: exists x y. (State(x) & State(y)) -> (Pierre(x) & y) | (Bismarck(x) & y)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(Montana) includes city(Butte) & city(Helena) & city(Missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: city(WhiteSulphurSprings) in state(Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: city(Pierre) not in Montana\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -city(Butte) in city(Pierre)\n\nTEXT: Pierre and Bismarck are in the same state.\nFOL: state(Pierre) = state(Bismarck)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 52,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) -> Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> includes(x, Butte) & includes(x, Helena) & includes(x, Missoula))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (WhiteSulphurSprings(x) & Butte(x))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(Pierre) -> -in(Pierre, Montana)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (Butte(x) -> -in(x, Pierre))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: Montana(Missoula) -> home(Missoula, Montana)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: all x. (City(x) -> Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (City(x) -> Montana(x)) & exists y. (City(y) -> Montana(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: all x. (City(x) -> SameState(x, y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: all x. (City(x) -> NotInMontana(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) -> NotInPierre(x))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (City(x) -> HomeTo(x, Missoula))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> (city(x) in Montana(x)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. (WhiteSulphurSprings(x) & Butte(y) -> state(x, y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not exists x. (Montana(x) -> city(x) = Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x y. (Butte(x) -> city(y) in Butte(x)) & not exists x y. (Butte(x) -> city(y) = Pierre)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (Montana(x) -> city(x) = Missoula)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. (City(y) & Montana(y)) & (exists z. (City(z) & Montana(z)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists w. (City(w) & State(w) = City(butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists p. (City(p) & Montana(p) = -City(Pierre))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists u. (City(u) & City(butte) = -City(u))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists v. (City(v) & Montana(v) = City(Missoula))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. (City(y) & Montana(y)) & exists z. (City(z) & Montana(z)) & (Butte(y) & Helena(z) & Missoula(z))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists w. (City(w) & SameState(w, Butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists p. (City(p) & Montana(p) -> -Exists(p))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists u. (City(u) & Butte(u) -> -Exists(u, Pierre))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists v. (City(v) & Montana(v) -> Exists(v, Missoula))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: all x. (Montana(x) -> (City(x) & Includes(x, Butte, Helena, Missoula)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & State(x) & WhiteSulphurSprings(x) = Butte(x))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x) -> (-City(x) & Includes(x, Pierre)))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & Includes(x, Butte) -> (-City(x) & Includes(x, Pierre)))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (City(x) & Montana(x) -> (Home(x, Missoula)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: all x. (Montana(x) -> (City(x) & Includes(x, butte, helena, missoula)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (-City(x) & State(x) & (WhiteSulphurSprings(x) & Butte(x)))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x) & -Pierre(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (-City(x) & Butte(x) & -Pierre(x))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (Montana(x) & City(x) & Missoula(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. (City(y) & Montana(y)) & (y = Butte & y = Helena & y = Missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists z. (City(z) & State(z) & z = WhiteSulphurSprings & z = Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists w. (City(w) & Montana(w) -> -w = Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists v. (City(v) & Butte(v) -> -v = Pierre)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists u. (City(u) & Montana(u) -> u = Missoula)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists y. City(y) -> (InMontana(y) & (City(Butte) | City(Helena) | City(Missoula)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists z. City(z) -> (InSameState(z, Butte) & City(Butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists w. City(w) -> (InMontana(w) -> -City(w))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists u. City(u) -> (InButte(u) -> -City(u))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists v. City(v) -> (HomeTo(v, Missoula))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x y. (Montana(x) & City(y)) -> (Butte(y) & Helena(y) & Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. (City(x) & City(y)) -> (WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x)) -> -Pierre(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x y. (City(x) & Butte(y)) -> -Pierre(y)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (Montana(x) & City(x)) -> Missoula(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: all x. (City(x) -> Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: all x. (City(x) -> Includes(x, Montana))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: all x. (City(x) -> SameState(x, WhiteSulphurSprings))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: all x. (City(x) -> NotIn(x, Montana))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) -> NotIn(x, Pierre))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: all x. (City(x) -> Home(x, Missoula))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: all x. (City(x) -> Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & City(whiteSulphurSprings) & -State(whiteSulphurSprings, x))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(pierre) & Montana(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(butte) & City(butte) -> -City(pierre)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: Montana(missoula)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> (city(x) in Montana(x)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (WhiteSulphurSprings(x) & Butte(x) -> (state(x) = state(WhiteSulphurSprings(x)) & state(x) = state(Butte(x))))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not exists x. (Pierre(x) & Montana(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (Butte(x) -> (not exists y. (y in Butte(x) & Pierre(y))))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (Montana(x) -> (city(x) in Montana(x) & Missoula(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. City(Billings) & Montana(x)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(x) -> exists y. City(y) & (Helena(x) | Missoula(x))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. exists y. City(WhiteSulphurSprings) & City(Butte) & Montana(x) & Montana(y)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(x) -> -City(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. exists y. City(Butte) & City(Pierre) & -City(x)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: Montana(Missoula)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) & (City(butte) & City(helena) & City(missoula)))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(whiteSulphurSprings) & City(butte))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not exists x. (City(x) & Montana(x) & Pierre(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(butte) & -City(x))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (Montana(x) & City(missoula))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (City(x) & Montana(x)) & exists y. (City(y) & Montana(y)) & (Butte(y) | Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & State(x)) & exists y. (City(y) & State(y)) & (WhiteSulphurSprings(y) | Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x)) & exists y. (City(y) & NotMontana(y)) & (Pierre(y) | -Pierre(y))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & Butte(x)) & exists y. (City(y) & Pierre(y)) & (-Or(x, y))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (City(x) & Montana(x)) & exists y. (City(y) & Montana(y)) & (Missoula(y) | -Missoula(y))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) & city(x)) in (Butte(x), Helena(x), Missoula(x))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (WhiteSulphurSprings(x) & city(x)) in (Butte(x))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not Montana(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -city(x) in (Butte(x)) -> not Montana(x)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: home(Montana) to city(Missoula)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in montana\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: montana(x) -> includes(x, butte, helena, missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: city(whiteSulphurSprings) in same state as city(butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not montana(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: not(city(butte) in pierre)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: montana(x) -> home(x, missoula)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in montana\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: montana(x) includes cities(Butte, Helena, Missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: whiteSulfurSprings(x) & butte(x) in same state(x)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: pierre(x) not in montana(x)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: any(x) city(butte(x)) not in pierre(x)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: montana(x) home(missoula(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) -> Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) -> includes(x, Butte) & includes(x, Helena) & includes(x, Missoula))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x y. (state(x) & state(y) & WhiteSulphurSprings(x) & Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(Pierre) -> -In(Pierre, Montana)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (Butte(x) -> -In(x, Pierre))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: Montana(Missoula) -> Home(Missoula, Montana)\n\n</EVALUATE>"
   ],
   [
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my response:\n\n<EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: all x. (City(x) -> Montana(x)) & exists x. (City(x) & -Montana(x))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & -Montana(x)) & exists y. (City(y) & Montana(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(butte) -> -Montana(pierre)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: Montana(missoula)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: city(Billings) in Montana(Billings)\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (Montana(x) & city(x)) in x (Butte, Helena, Missoula)\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (WhiteSulphurSprings(x) & city(x)) in x (Butte)\n\nTEXT: The city of Pierre is not in Montana.\nFOL: Montana(Pierre) -> -city(Pierre)\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (city(x) in Butte & -city(x) in Pierre)\n\nTEXT: Montana is home to the city of Missoula.\nFOL: Montana(Missoula) -> city(Missoula) in Montana(Missoula)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (City(x) & Montana(x)) & exists y. (City(y) & Montana(y)) & (Butte(y) | Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & State(x)) & exists y. (City(y) & State(y)) & (WhiteSulphurSprings(y) | Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not exists x. (City(x) & Montana(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists y. (City(y) & Butte(y)) & not exists z. (City(z) & Butte(z))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (City(x) & Montana(x)) & Missoula(x)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (City(x) & Montana(x)) & exists y. (City(y) & Montana(y)) & (Butte(y) | Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & State(x)) & exists y. (City(y) & State(y)) & (WhiteSulphurSprings(y) | Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: not exists x. (City(x) & Montana(x))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists y. (City(y) & Butte(y)) -> not exists z. (City(z) & Pierre(z))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (City(x) & Montana(x)) & exists y. (City(y) & Montana(y)) & Missoula(y)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Billings is a city in Montana.\nFOL: exists x. (City(x) & Montana(x))\n\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: exists x. (City(x) & Montana(x)) & exists y. (City(y) & Montana(y)) & (Butte(y) | Helena(y) | Missoula(y))\n\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: exists x. (City(x) & State(x)) & exists y. (City(y) & State(y)) & (WhiteSulphurSprings(y) | Butte(y))\n\nTEXT: The city of Pierre is not in Montana.\nFOL: exists x. (City(x) & Montana(x)) & -exists y. (City(y) & Montana(y))\n\nTEXT: Any city in Butte is not in Pierre.\nFOL: exists x. (City(x) & Butte(x)) & -exists y. (City(y) & Pierre(y))\n\nTEXT: Montana is home to the city of Missoula.\nFOL: exists x. (City(x) & Montana(x)) & Montana(Missoula(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 53,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (Student(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\n\nTEXT: Mike is an international student.\nFOL: Student(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: exists x. (StudentInUS(x) & Mike(x))\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: exists x. (StudentInUS(x) & Mike(x) & CPTApply(x))\n\nTEXT: Mike has an F1 visa.\nFOL: exists x. (StudentInUS(x) & Mike(x) & F1Visa(x))\n</EVALUATE>\n\nNote: In FOL, the `exists` keyword is used to specify that the statement inside the `FOL` block is true for at least one value of the variable `x`.",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: exists x. (StudentInUS(x) & F1Visa(x) & Mike(x))\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: exists x. (CPTApply(x) -> (Mike(x) & WantToWorkInUS(x)))\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: exists x. (StudentInUS(x) & F1Visa(x) == Mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(Mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(Mike)\n\n</EVALUATE>\"\n\nExplanation:\n\n* In the first sentence, we use the existential quantifier \"all x\" to state that all international students in the US have either an F1 visa or a J1 visa.\n* In the second sentence, we use the existential quantifier \"all x\" to state that an international student in the US with an F1 visa needs to apply for CPT or OPT if they want to work in the US.\n* In the third sentence, we use the universal quantifier \"exists x\" to state that Mike is an international student.\n* In the fourth sentence, we use the universal quantifier \"all x\" to state that Mike needs to apply for CPT if he wants to work in the US.\n* In the fifth sentence, we use the universal quantifier \"all x\" to state that Mike has an F1 visa.\n\nNote: In FOL, we use the \"->\" symbol to indicate the implication of one sentence from another. For example, \"F1Visa(x) -> (CPTApply(x) | OPTApply(x))\" means that if a student has an F1 visa, then they must apply for either CPT or OPT.",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (Student(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\n\nTEXT: Mike is an international student.\nFOL: Student(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (Student(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\n\nTEXT: Mike is an international student.\nFOL: Student(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: exists x. (Mike(x) & StudentInUS(x))\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: exists x. (Mike(x) & F1Visa(x) -> CPTApply(x))\n\nTEXT: Mike has an F1 visa.\nFOL: exists x. (Mike(x) & F1Visa(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 54,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (Student(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\n\nTEXT: Mike is an international student.\nFOL: Student(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: exists x. (StudentInUS(x) & Mike(x))\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: exists x. (StudentInUS(x) & Mike(x) & CPTApply(x))\n\nTEXT: Mike has a J1 visa.\nFOL: exists x. (StudentInUS(x) & Mike(x) & J1Visa(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (Student(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\n\nTEXT: Mike is an international student.\nFOL: Student(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (Student(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: Student(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApplication(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: exists x. (Mike(x) & StudentInUS(x))\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: exists x. (Mike(x) & StudentInUS(x) & CPTApply(x))\n\nTEXT: Mike has a J1 visa.\nFOL: exists x. (Mike(x) & StudentInUS(x) & J1Visa(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApplication(x) | OPTApplication(x)))\n\nTEXT: Mike is an international student.\nFOL: exists x. (StudentInUS(x) & Mike(x))\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: exists x. (StudentInUS(x) & Mike(x) -> CPTApplication(x))\n\nTEXT: Mike has a J1 visa.\nFOL: exists x. (StudentInUS(x) & Mike(x) -> J1Visa(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (StudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\n\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPTApply(x) | OPTApply(x)))\n\nTEXT: Mike is an international student.\nFOL: StudentInUS(mike)\n\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPTApply(mike)\n\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 55,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>"
   ],
   [
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my answer:\n\n<EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Pet(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Ted is Pet(ted)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my response:\n\n<EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Ted is Pet(ted)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 56,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Pet(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Ted is Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Pet(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: (Pet(ted) & Cow(ted))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: -Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: (Pet(ted) & Cow(ted))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Pet(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: both x y. (Pet(ted) & Cow(ted) & Pet(ted) & Cow(ted))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Pet(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: both x y. (Pet(ted) & Cow(ted) & Pet(ted) & Cow(ted))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: both x y. (Pet(ted) & Cow(ted) & Pet(ted) & Cow(ted))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Ted is Pet(ted) & Cow(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Pet(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Ted is Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Pet(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Ted is Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Pet(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: (Pet(ted) & Cow(ted))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: -Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: both x y. (Pet(ted) & Cow(ted) & Pet(ted) & Cow(ted))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 57,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Ted is not Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted = Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted = Alligator(\"Ted\")\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted = Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted = Alligator(\"ted\")\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Ted is not Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Ted is not Pet(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Ted is not Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted = Alligator(\"ted\")\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted = Alligator(\"ted\")\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted = Alligator(\"ted\")\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (-Domesticated(x) & Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Cow(x))\n\nTEXT: Some pets are cows.\nFOL: exists x. (-Bovine(x) & Cow(x))\n\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\n\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n\nTEXT: Ted is an aligator.\nFOL: Ted is Alligator(ted)\n\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 58,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (ListOfResidentialColleges(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3 billion))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (ConstituentCollegesAndSchools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ListOfResidentialColleges(x) -> (College(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))))))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (Colleges(x) & Schools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> List(x, ResidentialColleges(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (ConstituentCollegesAndSchools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ListOfResidentialColleges(x) -> (College(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & -DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))))))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> Number(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x) -> NewHaven(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x, 42.3))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (CollegesAndSchools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Colleges(x) -> (Schools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (ListOfResidentialColleges(x) -> (Name(x) & Founded(x) & Location(x))))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (Colleges(x) & Schools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (List(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))))))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3 billion))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (ResidentialColleges(x) & College(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (ConstituentCollegesAndSchools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ListOfResidentialColleges(x) -> (College(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))))))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Colleges(x) & Schools(x) -> Organized(x, 27, [ResidentialColleges(x), YaleGraduateSchoolOfArtsAndSciences(x), TwelveProfessionalSchools(x)])\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> List(x, [BenjaminFranklinCollege(x), BerkeleyCollege(x), BranfordCollege(x), DavenportCollege(x), EzraStilesCollege(x), GraceHopperCollege(x), JonathanEdwardsCollege(x), MorseCollege(x), PauliMurrayCollege(x), PiersonCollege(x), SaybrookCollege(x), SillimanCollege(x), TimothyDwightCollege(x), TrumbullCollege(x)])\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Colleges(x) -> Schools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x) -> NewHaven(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesAndSchools(x, 27, 3))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (ResidentialColleges(x) & BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x) -> NewHaven(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x) -> NewHaven(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x) & ResidentialColleges(x) & GraduateSchoolOfArtsSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) & BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x) -> NewHaven(x) & PrivateIvyLeagueResearchUniversity(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (Colleges(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x) -> NewHaven(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3 billion))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (CollegesAndSchools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesAndSchools(x, 27, 3))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x, 13))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x) -> IvyLeague(x) & NewHaven(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (Colleges(x) & ResidentialColleges(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Colleges(x) & Schools(x) -> Constituent(x, 27))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> List(x, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 42.3))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (CollegesAndSchools(x) -> OrganizedInto(x, 27, ResidentialColleges(x), YaleGraduateSchoolOfArtsAndSciences(x), TwelveProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> ListOfResidentialColleges(x, BenjaminFranklinCollege(x), BerkeleyCollege(x), BranfordCollege(x), DavenportCollege(x), EzraStilesCollege(x), GraceHopperCollege(x), JonathanEdwardsCollege(x), MorseCollege(x), PauliMurrayCollege(x), PiersonCollege(x), SaybrookCollege(x), SillimanCollege(x), TimothyDwightCollege(x), TrumbullCollege(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (Colleges(x) & Schools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (List(x) & (Name(x) -> Value(x, List(x)))))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3 billion))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (Colleges(x) & Schools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (ListOfColleges(x) & (NameOfCollege(x) -> ValueOfCollege(x))))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716) -> University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3 billion))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (CollegesAndSchools(x) -> (ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> (List(x) & ResidentialColleges(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x, NewHaven) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 42.3) & Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27) & ResidentialColleges(x) & GraduateSchoolOfArtsSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) & BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: all x. (Moved(x) -> NewHaven(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 59,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: exists x. (University(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: NewHaven(yaleUniversity)\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity) -> Number(42.3)\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (CollegeOrSchool(x) -> (ResidentialCollege(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchool(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (ListOfResidentialColleges(x) & CollegeName(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: EndowmentValue(yaleUniversity) -> MaximumEndowmentValue(educationalInstitution)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> AnyEducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x) -> $4230000000(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ResidentialColleges(x) -> List(x) & College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> AnyEducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ResidentialColleges(x) -> List(x, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x, EducationalInstitution))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ListOfResidentialColleges(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> LargestOfAnyEducationalInstitution(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x) & ResidentialColleges(x) & GraduateSchoolOfArtsSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ResidentialColleges(x) -> List(x) & College(x) & -Not(x))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) & EducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ResidentialColleges(x) -> List(x) & College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> AnyEducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> (ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ResidentialColleges(x) -> List(x, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x, EducationalInstitution))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: exists x. (University(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: exists x. (Moved(x, NewHaven) & University(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: exists x. (Endowment(x, YaleUniversity) & ValuedAt(x, $423Billion))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (CollegesAndSchools(x, YaleUniversity) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (ListOfResidentialColleges(x) & University(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: exists x. (Endowment(x, YaleUniversity) & Largest(x, EducationalInstitution))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) & BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) & EducationalInstitution(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $423000000(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> EducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> AnyEducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 42.3))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (CollegesAndSchools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x, EducationalInstitution))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) & BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) & EducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> ResidentialColleges(x) & YaleGraduateSchoolOfArtsAndSciences(x) & TwelveProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> EducationalInstitution(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Colleges(x) & Schools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000) & University(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesAndSchools(x, 27) & University(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x, 13) & University(x))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> LargestOfAnyEducationalInstitution(x, 4230000000) & University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (ResidentialColleges(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> LargestOfAnyEducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesAndSchools(x) -> 27(x) & ResidentialColleges(x) & YaleGraduateSchoolOfArtsAndSciences(x) & TwelveProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> AnyEducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 42.3) & Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> LargestOfAnyEducationalInstitution(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x, 1716))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (EndowmentValue(x, 4230000000) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (ConstituentColleges(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ResidentialCollege(x) -> (Name(x) & ListOfResidentialColleges(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (EndowmentValue(x, largest) -> University(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) & NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) & Valued(x) & 423000000(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) & ConstituentColleges(x) & Schools(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) & ResidentialColleges(x) & College(x))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) & Largest(x) & EducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> 27(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> AnyEducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesAndSchools(x, 27))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x, 13))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> LargestOfAnyEducationalInstitution(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: all x. (Endowment(x) -> Largest(x) -> AnyEducationalInstitution(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 60,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (ResidentialColleges(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) -> ResidentialCollege(x) & PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(PiersonCollege)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesAndSchools(x) -> 27(x) & ResidentialColleges(x) & YaleGraduateSchoolOfArtsAndSciences(x) & TwelveProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) -> ResidentialCollege(x) -> PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & 423000000(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) & BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) -> ResidentialCollege(x) & PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) & (ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(piersonCollege)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesAndSchools(x, 27, ResidentialColleges(x), YaleGraduateSchoolOfArtsAndSciences(x), TwelveProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ListOfResidentialColleges(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(PiersonCollege)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> Number(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) -> ResidentialCollege(x) -> PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $423Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsSciences(x) & ProfessionalSchools(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(piersonCollege)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) & BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(PiersonCollege)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: exists x. (University(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: moved(YaleUniversity, NewHaven)\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: endowment(YaleUniversity) -> value(YaleUniversity, 42.3)\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (CollegeOrSchool(x) -> (ConstituentCollegeOrSchool(x) & (ResidentialCollege(x) | GraduateSchoolOfArtsAndSciences(x)) | ProfessionalSchool(x)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> (ResidentialCollege(x) & (BenjaminFranklinCollege(x) | BerkeleyCollege(x) | BranfordCollege(x) | DavenportCollege(x) | EzraStilesCollege(x) | GraceHopperCollege(x) | JonathanEdwardsCollege(x) | MorseCollege(x) | PauliMurrayCollege(x) | PiersonCollege(x) | SaybrookCollege(x) | SillimanCollege(x) | TimothyDwightCollege(x) | TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: exists x. (College(x) & ResidentialCollege(x) & PiersonCollege(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) -> ResidentialCollege(x) -> PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (ResidentialColleges(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(piersonCollege)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> Number(x) -> $423000000(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(piersonCollege)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesAndSchools(x) -> 27(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (ListOfResidentialColleges(x) -> x -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (ResidentialCollege(x) -> PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x, 13, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(PiersonCollege)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Colleges(x) & Schools(x) -> Constituent(x) & 27(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (Colleges(x) -> List(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) -> ResidentialCollege(x) & PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Value(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & Schools(x) -> 27(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> College(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & -DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(PiersonCollege)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 4230000000))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27, \"residential colleges\", \"Yale Graduate School of Arts and Sciences\", \"twelve professional schools\"))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (College(x) & InList(x, \"Benjamin Franklin College\", \"Berkeley College\", \"Branford College\", \"Davenport College\", \"Ezra Stiles College\", \"Grace Hopper College\", \"Jonathan Edwards College\", \"Morse College\", \"Pauli Murray College\", \"Pierson College\", \"Saybrook College\", \"Silliman College\", \"Timothy Dwight College\", \"Trumbull College\"))))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) & InList(x, \"Pierson College\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: exists x. (University(x) & Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: History(yaleUniversity) & Move(yaleUniversity, 1716)\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Value(yaleUniversityEndowment) & Equal(Value(yaleUniversityEndowment), 42.3Billion)\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: exists x. (University(x) & ConstituentCollegesAndSchools(x) & 27(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: exists x. (College(x) & InList(x, ResidentialCollegesAtYale))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: exists x. (College(x) & In(x, PiersonCollege))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 42.3B))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, ProfessionalSchools))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: exists x. (ResidentialCollege(x) & PiersonCollege(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: exists x. (Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: Move(YaleUniversity, NewHaven, 1716)\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(YaleUniversity, 42.3Billion)\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: (ConstituentColleges(YaleUniversity) -> (ResidentialColleges(YaleUniversity) & GraduateSchoolOfArtsAndSciences(YaleUniversity) & ProfessionalSchools(YaleUniversity)))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: exists x. (ResidentialColleges(x) -> (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: exists x. (ResidentialColleges(x) & PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 42.3Billion))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27, ResidentialColleges, GraduateSchoolOfArtsAndSciences, ProfessionalSchools))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> (ResidentialColleges(x) & (BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))))))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(PiersonCollege)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) -> $42.3Billion(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x) -> ResidentialColleges(x) & GraduateSchoolOfArtsSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x) -> BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) -> ResidentialCollege(x) -> PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> Valued(x) & 423000000(x))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentColleges(x) & ResidentialColleges(x) & GraduateSchoolOfArtsAndSciences(x) & ProfessionalSchools(x))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (College(x) -> ResidentialCollege(x) & List(x) & BenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: all x. (College(x) -> ResidentialCollege(x) & PiersonCollege(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\n\nTEXT: Yale University moved to New Haven in 1716.\nFOL: all x. (Moved(x) -> NewHaven(x) & 1716(x))\n\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> ValuedAt(x, 42.3B))\n\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (Organized(x) -> ConstituentCollegesSchools(x, 27, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools))\n\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: all x. (List(x) -> ResidentialColleges(x, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege))\n\nTEXT: Pierson College is a residential college at Yale.\nFOL: exists x. (ResidentialCollege(x) & PiersonCollege(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 61,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Badults(x) -> BritishSitcomSeries(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) -> Badults(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitleTheSecretDudeSociety(x) -> Badults(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditorAndrewCollins(x) -> Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (SeriesWithWorkingTitleTheSecretDudeSociety(x) -> ScriptEditorAndrewCollins(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & TheSecretDudeSociety(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitle(x) & TheSecretDudeSociety(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> UsedFor(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x) & Badults(x) -> AndrewCollins(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & MakeSeries(x) -> UsedWorkingTitle(x, \"The Secret Dude Society\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitle(x) & \"The Secret Dude Society\"(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & TheSecretDudeSociety(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitle(x) & TheSecretDudeSociety(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitleTheSecretDudeSociety(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x) & Badults(x) & AndrewCollins(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitleTheSecretDudeSociety(x) & AndrewCollins(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(july2013)\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: exists x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: AndrewCollins(badults)\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: exists x. (Series(x) & WorkingTitle(x) & \"The Secret Dude Society\"(x) & ScriptEditor(x) & AndrewCollins(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> StarringMembersOfPappy(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> UsedForBadults(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) -> Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (SeriesWithWorkingTitle(x) -> ScriptEditorForTheSecretDudeSociety(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & Starring(x, Pappy's) -> Series(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x, Badults) & OnBBCThree(x) -> Date(x, July, 2013))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & UsedForSeries(x, Badults) -> Title(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x, AndrewCollins) & Series(x, Badults) -> Editor(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (Editor(x, AndrewCollins) & Series(x) & WorkingTitle(x, \"The Secret Dude Society\") -> Series(x, Badults))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Badults(x) -> (BritishSitcom(x) & Starring(x, Pappy's)))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x) -> (Badults(x) & OnBBCThree(x)))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> (Badults(x) & UsedTitle(x, \"The Secret Dude Society\")))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) -> (Badults(x) & AndrewCollins(x)))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (Series(x) -> (ScriptEditor(x) & UsedTitle(x, \"The Secret Dude Society\")))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitle(x) & \"The Secret Dude Society\"(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Badults(x) -> Series(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(badults) -> Month(badults) & Year(badults) & BBCThree(badults))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(badults) -> Title(badults) & Society(badults))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(badults) -> AndrewCollins(badults))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. ((ScriptEditor(badults) & WorkingTitle(badults) -> Series(badults) & Title(badults) & Society(badults)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x, Badults) -> OnBBCThree(x, 2013))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x, Badults) -> UsedFor(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x, Badults) -> AndrewCollins(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. ((ScriptEditor(x, Badults) & WorkingTitle(x, \"The Secret Dude Society\")) -> Series(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> UsedFor(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) -> Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (Series(x) -> ScriptEditor(x) -> UsedFor(x, \"The Secret Dude Society\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. ((ScriptEditor(x) & WorkingTitle(x)) -> Series(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x, Badults) -> OnBBCThree(x, 2013))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x, Badults) -> UsedFor(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x, Badults) -> AndrewCollins(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x, series) -> (WorkingTitle(series, \"The Secret Dude Society\") & x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitle(x) & \"The Secret Dude Society\"(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Badults(x) -> Series(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x) -> Series(x) & AirDate(x, July, 2013))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> Series(x) & Title(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x) & Series(x, Badults))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: exists x. ((ScriptEditor(x) & Series(x, Badults)) & (WorkingTitle(x) -> Series(x) & Title(x, \"The Secret Dude Society\"))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & TheSecretDudeSociety(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitle(x) & TheSecretDudeSociety(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Badults(x) -> Series(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(badults, 2013) -> Date(badults, 2013, July))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(badults, \"The Secret Dude Society\") -> Title(badults, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(badults, Andrew Collins))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (Series(x) -> (ScriptEditor(x, Andrew Collins) & WorkingTitle(x, \"The Secret Dude Society\"))))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitle(x) & \"The Secret Dude Society\"(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Badults(x) -> Series(x) & Sitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x) -> Series(x) & Date(x, July, 2013) & Channel(x, BBCThree))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> Series(x) & Title(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) -> Series(x) & Editor(x, Badults))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (Editor(x, AndrewCollins) & Series(x) & WorkingTitle(x, \"The Secret Dude Society\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & Series(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults) & Date(Badults, \"July 2013\")\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: exists x. (WorkingTitle(x) & Badults(x) & Title(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: ScriptEditor(AndrewCollins) & Series(Badults)\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: exists x. (ScriptEditor(AndrewCollins) & Series(x) & WorkingTitle(x, \"The Secret Dude Society\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & Starring(x, Pappy's) -> Series(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x, Badults) -> Date(x, July, 2013))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x, Badults) -> Title(x, \"The Secret Dude Society\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x, Badults) & AndrewCollins(x) -> Editor(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (Editor(x) & Series(x) & WorkingTitle(x, \"The Secret Dude Society\") -> ScriptEditor(x, x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & TheSecretDudeSociety(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & Badults(x))\n\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: all x. (ScriptEditor(x) & SeriesWithWorkingTitle(x) & TheSecretDudeSociety(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 62,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, 2013, BBCThree)\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(Badults, \"The Secret Dude Society\")\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x, Badults) & AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: exists x. (-Starring(x, Pappy's) & (BBCTwo | BBCThree))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Series(x) & Members(x) -> Pappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x) & Series(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (Title(x) & Series(x) -> SecretDudeSociety(x))\n\nTEXT: Andrew Collins was the script editor for Badults\nFOL: all x. (Editor(x) & Series(x) -> AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Members(x) & Series(x) -> -BBCTwo(x) & -BBCThree(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Date(badults, \"pilot\", 2013, 7)\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(badults, \"The Secret Dude Society\")\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: Person(AndrewCollins) & ScriptEditor(badults)\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: exists x. (-Starring(x, Pappy's) & PilotingOn(x, BBCTwo) | -Starring(x, Pappy's) & PilotingOn(x, BBCThree))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> MemberOfPappy(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotMonth(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> SecretDudeSociety(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) -> AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappy(x) -> NoShowPilotingOnBBCTwoOrBBCThree(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> MemberOfPappy(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> SecretDudeSociety(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) -> AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappy(x) -> NoBBCTwoOrBBCThreePilot(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (Badults(x) & Pappy's(x) -> MemberOf(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(2013, 7)\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(badults, \"The Secret Dude Society\")\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (AndrewCollins(x) & Badults(x) -> ScriptEditor(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Pappy's(x) & ShowPilotingOnBBCTwoOrBBCThree(x) -> -Starred(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotDate(badults, 2013, 7)\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(badults, \"The Secret Dude Society\")\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x, AndrewCollins) & Badults(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Starring(x, Pappy's) -> (-BBCTwo(x) & -BBCThree(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults) & Year(2013) & Channel(BBCThree)\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(Badults) & WorkingTitle(TheSecretDudeSociety)\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: Person(AndrewCollins) & Position(ScriptEditor) & Badults\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: exists x. (-Starring(x, Pappy's) & Pilot(x) & Channel(BBCTwo) | -Starring(x, Pappy's) & Pilot(x) & Channel(BBCThree))\n\n</EVALUATE>\n\nNote: Please let me know if you need any further assistance.",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotDate(badults) = 2013-07-01\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(badults) = \"The Secret Dude Society\"\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: ScriptEditor(badults) = AndrewCollins\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: exists x. (-Starring(x, Pappy's) & (BBCTwo(x) | BBCThree(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x, Badults) & OnBBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x, Badults) & Society(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x, Badults) & AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Starring(x, Pappy's) & PilotingOnBBCTwoOrBBCThree(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> (MemberOfPappy's(x) -> ActorsIn(x)))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotMonth(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> (Badults(x) -> TitleUsed(x)))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (AndrewCollins(x) -> ScriptEditor(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappy's(x) -> (-BBCTwo(x) & -BBCThree(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & Starring(x, Pappy's) -> Series(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x) & In(x, July, 2013) -> Channel(x) & Three(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & UsedFor(x, \"The Secret Dude Society\") -> Series(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & For(x, Badults) -> Person(x) & AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Starring(x, Pappy's) & PilotingOn(x, BBCTwo) | PilotingOn(x, BBCThree) -> -Person(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotDate(badults, 2013, 7)\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(badults, \"The Secret Dude Society\")\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x, badults) & Name(x, Andrew Collins))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: exists x. (-Starring(x, Pappy's) & PilotBBCTwoOrBBCThree(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> (Pappy's(x) & Stars(x)))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x) -> (BBCThree(x) & July2013(x)))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> (TheSecretDudeSociety(x) & UsedForBadults(x)))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) -> (AndrewCollins(x) & UsedForBadults(x)))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Pappy's(x) -> (-StarredForShowPilotingOnBBCTwo(x) & -StarredForShowPilotingOnBBCThree(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & StarringMembersOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (NoMembersOfPappy's(x) & PilotingOnBBCTwoOrBBCThree(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Badults(x) -> MemberOfPappy(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotMonth(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> SecretDudeSociety(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (AndrewCollins(x) & ScriptEditor(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MemberOfPappy(x) & BBCTwo(x) | -MemberOfPappy(x) & BBCThree(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Date(badults) = 2013 & Channel(badults) = BBCThree\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(badults) = \"The Secret Dude Society\"\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: Person(andrewCollins) & ScriptEditor(andrewCollins, badults)\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: exists x. (Pappy's(x) & Starred(x, BBCTwo) | Starred(x, BBCThree))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & Starring(x, Pappy's))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Pappy's(x) -> -BBCTwo(x) & -BBCThree(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Series(x) & Stars(x) & Pappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x) & Year(x) & BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (Title(x) & WorkingTitle(x) & Society(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (Editor(x) & ScriptEditor(x) & AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Starring(x) & Show(x) & Piloting(x) & BBCTwo(x) & BBCThree(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & Starring(x, Pappy's) -> Series(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Piloted(x, Badults) & InJuly2013(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x, Badults) -> Society(x, \"The Secret Dude\"))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (ScriptEditor(x, Badults) & AndrewCollins(x) -> Editor(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-Starring(x, Pappy's) & BBCTwo(x) | -Starring(x, Pappy's) & BBCThree(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & MemberOfPappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x) & BBCThree(x) & July2013(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults\nFOL: all x. (ScriptEditor(x) & AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappy's(x) & BBCTwo(x) | BBCThree(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (Series(x) -> (MembersOfPappy(x) & Sitcom(x)))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x) -> (BBCThree(x) & July2013(x)))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (Title(x) -> (WorkingTitle(x) & Badults(x)))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (Editor(x) -> (ScriptEditor(x) & Badults(x)))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Starred(x) -> (-BBCTwo(x) & -BBCThree(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) -> (MemberOfPappy's(x) & Starring(x)))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (PilotedInJuly2013(x) -> BBCThree(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) -> (UsedForBadults(x) & \"The Secret Dude Society\"(x)))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) -> (AndrewCollins(x) & Badults(x)))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappy's(x) -> (-PilotingOnBBCTwo(x) & -PilotingOnBBCThree(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: exists x. (Badults(x) & Pappy's(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(2013, July)\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(Badults, \"The Secret Dude Society\")\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: exists x. (AndrewCollins(x) & ScriptEditor(x, Badults))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Pappy's(x) -> -StarredInShowPilotingOn(x, BBCTwo) & -StarredInShowPilotingOn(x, BBCThree))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: all x. (BritishSitcom(x) & MemberOfPappy(x))\n\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: all x. (Pilot(x) & BBCThree(x) & 2013(x))\n\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: all x. (WorkingTitle(x) & \"The Secret Dude Society\"(x))\n\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: all x. (ScriptEditor(x) & AndrewCollins(x))\n\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappy(x) & BBCTwo(x) | BBCThree(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 63,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: KO is a MatureCompany(x)\n\nTEXT: KO is a company stock.\nFOL: KO is a Company(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 64,
  "responses": [
   [
    "  \"<EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Company(ko) & GrowthCompany(ko))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: exists x. (-MatureCompany(x) & CompanyStock(x) & -GrowthCompany(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Company(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Company(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>\"\n\nExplanation:\n\n* TEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x)) means that for any company X, if X is a growth company, then the stock of X is volatile.\n* TEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x)) means that for any stock price X, if X is volatile, then it is not suitable for a retirement fund.\n* TEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x)) means that there exist some companies that are both companies and growth companies.\n* TEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x)) means that for any company X, if X is mature, then the stock of X is suitable for a retirement fund.\n* TEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko) means that the stock of KO is a mature company\u2019s stock.\n* TEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko)) means that the stock of KO is both a company stock and a growth company\u2019s stock.\n\nNote: In FOL, we use the concept of \"all x\" to represent the universal quantifier \"for all x\" and \"exists x\" to represent the existential quantifier \"there exists x\".",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: exists x. (-CompanyStock(x) & GrowthCompany(x) & Stock(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Company(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Company(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (-GrowthCompany(x) & Stock(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Company(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompany(ko))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Company(ko) & GrowthCompany(ko))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 65,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -GrowthCompany(ko) & VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -GrowthCompany(ko) & VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -Company(ko) & VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -GrowthCompany(ko) & VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n\n</EVALUATE>",
    "  Sure, I can help you with that! Here's the FOL translation for each sentence in the SENTENCES list:\n\n<EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -MatureCompany(ko) & -SuitableForRetirementFund(ko)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance."
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -MatureCompany(ko) & -SuitableForRetirementFund(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(KO) & -VolatileStock(KO)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -Company(ko) & -VolatileStock(ko)\n\n</EVALUATE>"
   ],
   [
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my answer:\n\n<EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -GrowthCompany(ko) & VolatileStock(ko)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -GrowthCompany(ko) & VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -GrowthCompany(ko) & VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -Company(ko) & VolatileStock(ko)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -GrowthCompany(ko) & VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(KO) & -VolatileStock(KO) | -Company(KO) & VolatileStock(KO)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(KO) & -VolatileStock(KO) | -Company(KO) & VolatileStock(KO)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (StockPrice(x) -> -SuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko) | -Company(ko) & VolatileStock(ko)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> VolatileStock(x))\n\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> NotSuitableForRetirementFund(x))\n\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\n\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\n\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(ko)\n\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: -GrowthCompany(ko) & -VolatileStock(ko)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 66,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeganWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BeganWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BegsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWith(x, 34) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: exists x. (Joe(x) & RegistrationPlate(x) -> FromIstanbul(x))\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: exists x. (LicensePlate(x) & BeginsWith(x, 35) -> FromIstanbul(x))\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWith(x, 35) -> -BegsWith(x, 34))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: Joe(j) & RegistrationPlate(j) -> BeginsWith(j, 34)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-RegistrationPlateInIstanbul(x) & BeginsWithNumber34(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: not BeginsWithNumber34(tom)\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (RegistrationPlate(x) -> BeginsWith(x, 34) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: exists x. (Joe(x) & RegistrationPlate(x) -> FromIstanbul(x))\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: exists x. (LicensePlate(x) & BeginsWith(x, 35) -> Tom(x))\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWith(x, 35) -> -BegsWith(x, 34))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: exists x. (Joe(x) & LicensePlate(x) -> BegsWith(x, 34))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BegunWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: exists x. (LicensePlate(x) & BeginsWithNumber35(x) -> -BegunWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeganWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BeganWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-RegistrationPlate(x) & BeginsWith(x, 34))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: exists x. (RegistrationPlate(joe) & Istanbul(x))\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: exists x. (LicensePlate(tom) & BeginsWith(x, 35))\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. ((BegiinWith(x, 35) & -BeginsWith(x, 34)) | (-BegiinWith(x, 35) & BeginsWith(x, 34)))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith(joe, 34)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BegsWithNumber35(x) -> -BegsWithNumber34(x)\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeganWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BeganWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeganWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeganWithNumber35(x) -> -BeganWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BegsWithNumber35(x) -> -BegsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BegingsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWithNumber35(x) -> -BeginsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-RegistrationPlateInIstanbul(x) & BeginsWithNumber34(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BegsWithNumber35(x) -> -BegsWithNumber34(x)\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: BegsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BeginsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BegsWithNumber35(x) -> -BegsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: exists x. (LicensePlate(x) & BeginsWithNumber35(x) -> -BegsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeganWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: exists x. (LicensePlate(x) & BeginsWithNumber35(x) -> NotBeginsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BegsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlateInIstanbul(x) -> StartWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-RegistrationPlateInIstanbul(x) & StartWithNumber34(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: StartWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -StartWithNumber35(x) -> -StartWithNumber34(x)\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: StartWithNumber34(joe)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: exists x. (VehicleRegistrationPlate(jose) & BeginsWithNumber34(jose))\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: exists x. (LicensePlate(tom) & BeginsWithNumber35(tom))\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BegsWithNumber35(x) -> -BegsWithNumber34(x)\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: exists x. (LicensePlate(jose) & BeginsWithNumber34(jose))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BeginsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> StartWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (VehicleRegistrationPlate(x) -> NotStartWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: exists x. (VehicleRegistrationPlate(x) -> Joe(x) & FromIstanbul(x))\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: exists x. (LicensePlate(x) -> Tom(x) & StartWithNumber35(x))\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> StartWithNumber35(x) -> NotStartWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: exists x. (LicensePlate(x) -> Joe(x) & StartWithNumber34(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlateInIstanbul(x) -> StartWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-RegistrationPlateInIstanbul(x) & StartWithNumber34(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: StartWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -StartWithNumber35(x) -> -StartWithNumber34(x)\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: StartWithNumber34(joe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BegsWithNumber34(x))\n\nTEXT: Joe's license plate begins with the number 34.\nFOL: LicensePlate(joe) -> BeginsWithNumber34(joe)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 67,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BegsWithNumber34(tom) -> NotBeginsWithNumber34(tom)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: NotFromIstanbul(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BeginsWithNumber34(x))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlate(tom) -> FromIstanbul(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BegsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> BeginsWithNumber35(x) -> -BegsWithNumber34(x))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlate(tom) -> FromIstanbul(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> StartWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-StartWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> StartWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. ((LicensePlate(x) & StartWithNumber35(x)) -> -StartWithNumber34(x))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlate(tom) -> FromIstanbul(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BegsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWithNumber35(x) -> -BegsWithNumber34(x))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlate(tom) -> FromIstanbul(tom)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> StartWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-VehicleRegistrationPlate(x) & NotStartWithNumber34(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> Istanbul\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> StartWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (LicensePlate(x) -> (StartWithNumber35(x) -> -StartWithNumber34(x)))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlate(tom) -> Istanbul\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: exists x. (LicensePlate(x) & BeginsWithNumber35(x) -> NotBeginsWithNumber34(x))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlate(tom) -> FromIstanbul(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BegsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BegsWithNumber34(tom) -> BegsWithNumber35(tom)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: NotFromIstanbul(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWith(x, 34) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith(tom, 35)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BeginsWith(x, 35) -> -BeginsWith(x, 34)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlateInIstanbul(x) -> StartWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-VehicleRegistrationPlateInIstanbul(x) & StartWithNumber34(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlateBeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -LicensePlateBeginsWithNumber35(x) -> -StartWithNumber34(x)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlateInIstanbul(tom)\n\n</EVALUATE>\""
   ],
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWith(x, 34) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith(tom, 35)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BeginsWith(x, 35) -> -BeginsWith(x, 34)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWith(x, 34) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: exists x. (Joe(x) & RegistrationPlate(x) -> FromIstanbul(x))\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: exists x. (LicensePlate(x) & BeginsWith(x, 35) -> FromIstanbul(x))\n\nBG: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: exists x. (-BegiinsWith(x, 35) -> NotBeginsWith(x, 34))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: exists x. (Tom(x) & LicensePlate(x) -> FromIstanbul(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BeginsWithNumber35(x) -> -BegsWithNumber34(x)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-RegistrationPlateInIstanbul(x) & BeginsWithNumber34(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: not BeginsWithNumber34(tom) -> BeginsWithNumber35(tom)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> StartWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-StartWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> StartWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. ((LicensePlate(x) -> StartWithNumber35(x)) -> -StartWithNumber34(x))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlate(tom) -> FromIstanbul(tom)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BegsWithNumber35(x) -> -BegsWithNumber34(x)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWith(x, 34))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: exists x. (RegistrationPlate(joe) & BeginsWith(joe, 34))\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith(tom, 35)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -Begs(tom) -> -BeginsWith(tom, 34)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: exists x. (LicensePlate(x) & BeginsWith(x, 34))\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BegsWithNumber34(tom) -> NotBeginsWithNumber34(tom)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: NotFromIstanbul(tom)\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWith(x, 34) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith(tom, 35)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BeginsWith(x, 35) -> -BeginsWith(x, 34)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & RegistrationPlateInIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BegsWithNumber35(x) -> -BegsWithNumber34(x)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(tom)\n\n</EVALUATE>"
   ],
   [
    "  \"<EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) -> NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: LicensePlate(tom) -> BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. ((BegsWithNumber35(x) -> -BegsWithNumber34(x)) | (-BegsWithNumber35(x) -> BegsWithNumber34(x)))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlateInIstanbul(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & RegistrationPlateInIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BeganWithNumber34(tom) -> BeganWithNumber35(tom)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: RegistrationPlateInIstanbul(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (VehicleRegistrationPlate(x) -> BeginsWithNumber34(x))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWithNumber34(x) & NotFromIstanbul(x))\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: VehicleRegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWithNumber35(tom)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BeginsWithNumber35(x) -> -BeginsWithNumber34(x)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: LicensePlate(tom) -> FromIstanbul(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWith(x, 34)) -> NotFromIstanbul(x)\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: exists x. (RegistrationPlate(joe) & BeginsWith(joe, 34))\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: exists x. (LicensePlate(tom) & BeginsWith(tom, 35))\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith(x, 35) -> -BeginsWith(x, 34))\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: exists x. (LicensePlate(tom) & NotFromIstanbul(tom))\n</EVALUATE>\n\nNote: In FOL, the `exists` keyword is used to indicate that the statement inside the `FOL` block is a universal statement (i.e., it holds for all values of the variable(s) involved).",
    "  <EVALUATE>\n\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (RegistrationPlate(x) -> BeginsWith(x, 34))\n\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: exists x. (-BeginsWith(x, 34)) -> NotFromIstanbul(x)\n\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: RegistrationPlate(joe) -> FromIstanbul(joe)\n\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith(tom, 35)\n\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -BeginsWith(x, 35) -> -BeginsWith(x, 34)\n\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>\n\nNote: In FOL, we use the \"exists\" keyword to indicate that the negation of the statement is also true, i.e. if a license plate does not begin with the number 34, it is not from Istanbul."
   ]
  ]
 },
 {
  "index": 68,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary) -> neither (Picky, Mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobsOnCampus(x) -> EarningMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequentlyInCollege(x) -> StudentJobsOnCampus(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (TakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either works in student jobs on campus and needs to earn money to help pay for her college tuition (picky) or works in student jobs on campus but does not need to earn money to help pay for her college tuition (not picky).\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: Mary needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either works in student jobs on campus and needs to earn money to help pay for her college tuition (picky) or does not work in student jobs on campus and does not need to earn money to help pay for her college tuition (not picky).\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: Mary needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x, CollegeTuition))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (EitherOrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. (WorkInStudentJobs(x) & NeedToEarnMoney(x, CollegeTuition) -> NeitherPickyNorNeedToEarnMoneyToHelpPayForCollegeTuition(x))\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary, CollegeTuition)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (EnjoyDiningHallMeals(x) | OrderTakeoutFrequently(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingCatchingUpWithFriendsInDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x, CollegeTuition))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeOut(x) -> StudentJob(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (TakeOut(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary) -> neither MaryPicky nor MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. (WorkInStudentJobs(mary) & NeedMoneyToPayForCollegeTuition(mary) -> NeitherPickyNorNeedMoneyToPayForCollegeTuition(mary))\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoneyToPayForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary) & MaryIsNotPicky(mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (EitherOrderTakeoutFrequently(x) -> EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary) -> (!Picky(mary) &!NeedMoneyToHelpPayForCollegeTuition(mary))\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) | OrderTakeoutFrequentlyInCollege(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> EarnMoneyToHelpPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither picky nor needs to earn money to help pay for her college tuition.\n\nFOL: Mary needs to earn money to help pay for her college tuition.\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> EarnMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (-OrderTakeoutFrequentlyInCollege(x) & EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. ((EnjoyDiningHallMealsAndRecipes(x) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x)) -> A LotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> EarnMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryWorksInStudentJobsOnCampus(mary) & NeedsToEarnMoneyToHelpPayForCollegeTuition(mary) -> NeitherPickyNorNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickier(Mary) nor NeedToEarnMoneyToHelpPayForCollegeTuition(Mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: Mary needs to EarnMoneyToHelpPayForCollegeTuition(Mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x, CollegeTuition))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. ((EnjoyDiningHallMealsAndRecipes(x) & TimeEatingAndCatchingUpWithFriends(x)) | (NotEnjoyDiningHallMealsAndRecipes(x) & NoTimeEatingAndCatchingUpWithFriends(x)))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. (WorkInStudentJobs(x) & NeedToEarnMoney(x, CollegeTuition) -> NeitherPickyNorNeedToEarnMoney(x, CollegeTuition))\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary, CollegeTuition)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary) & MaryIsNeitherPickyNorNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobsOnCampus(x) -> EarningMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequentlyInCollege(x) -> StudentJobsOnCampus(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (TakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. ((EnjoyDiningHallMealsAndRecipes(x) & TimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x)) -> A LotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. (StudentJobsOnCampus(x) & NeedsToEarnMoneyToHelpPayForCollegeTuition(x) -> NotPicky(x) & NotNeedsToEarnMoneyToHelpPayForCollegeTuition(x))\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pick nor NeedMoneyForCollegeTuition(mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: Mary needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither picky nor needs to earn money to help pay for her college tuition.\n\nFOL: Mary needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary) -> neither MaryPicky nor MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: MaryNeedsToEarnMoneyToHelpPayForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> EarnMoneyToHelpPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x, CollegeTuition(x)))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. ((EnjoyDiningHallMealsAndRecipes(x) & Eat(x) & CatchUpWithFriends(x)) | (-EnjoyDiningHallMealsAndRecipes(x) & -Eat(x) & -CatchUpWithFriends(x)))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 69,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. (WorkInStudentJobs(x) & NeedMoneyForCollegeTuition(x) -> NeitherPickyNorNeedMoneyForCollegeTuition(x))\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: all x. (NotPickyEaters(mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: MaryWorksInStudentJobs(mary) & MaryIsNotPicky(mary) & MarySpendsTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x, CollegeTuition))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequently(x) -> StudentJob(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (TakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeitherPickyNorNeedsMoney(mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: MaryNotPickyEater(mary) & MarySpendsTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. (WorkInStudentJobs(x) & NeedMoneyToPayForCollegeTuition(x) -> NeitherPickyNorNeedMoneyToPayForCollegeTuition(x))\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: not Mary. (PickyEater(Mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) | OrderTakeoutFrequently(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryWorksInStudentJobsOnCampus(mary) -> NeitherPickyNorNeedMoneyToPayForCollegeTuition(mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: MaryIsNotPickyEater(mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either works in student jobs on campus and needs to earn money to help pay for her college tuition (PickyNeither) or Mary does not work in student jobs on campus and does not need to earn money to help pay for her college tuition (NotPickyNeither)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not a picky eater (NotPicky) and spends a lot of her time eating and catching up with friends in the campus dining halls (SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x, \"college tuition\"))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeitherPickyNorNeedsToEarnMoney(mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: MaryNotPickyEater(mary) & MarySpendsTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickiness(Mary) nor NeedMoneyForCollegeTuition(Mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not Pickiness(Mary) and spends a lot of her time eating and catching up with friends in the campus dining halls.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickiness(Mary) nor NeedMoneyToPayForCollegeTuition(Mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not Pickiness(Mary) and spends time eating and catching up with friends in campus dining halls(Mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequentlyInCollege(x) -> StudentJobsOnCampus(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (TakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickiness(Mary) nor NeedMoneyToPayForCollegeTuition(Mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not a NotPickyEater(Mary) & Mary spends time eating and catching up with friends in the campus dining halls.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickyperson(Mary) nor NeedToEarnMoneyToHelpPayForCollegeTuition(Mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not Pickyperson(Mary) & Mary spends time eating and catching up with friends in campus dining halls(Mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickyperson(Mary) nor NeedsmoneyToHelpPayForCollegeTuitionperson(Mary).\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not Pickyeaterperson(Mary) & Mary spends lotoftimeeatingandcatchingupwithfriendsincampusdininghalls(Mary).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. ((EnjoyDiningHallMealsAndRecipes(x) & EatAndCatchUpWithFriendsInCampusDiningHalls(x)) | (-EnjoyDiningHallMealsAndRecipes(x) & -EatAndCatchUpWithFriendsInCampusDiningHalls(x)))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither PickynorNeedsMoneyForCollegeTuition(mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is NotPickyEater(mary) & Mary spends lotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickiness(Mary) nor NeedMoneyToPayForCollegeTuition(Mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not Pickiness(Mary) and spends time EatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x, CollegeTuition))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is not picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: MaryWorksInStudentJobsOnCampus(mary) -> NotPickyEater(mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. ((EnjoyDiningHallMealsAndRecipes(x) & Eat(x) & CatchUpWithFriends(x)) | (-EnjoyDiningHallMealsAndRecipes(x) & -Eat(x) & -CatchUpWithFriends(x)))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not a picky eater.\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x, CollegeTuition(x)))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequently(x) -> StudentJob(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (TakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeitherPickyNorNeedsToEarnMoney(mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: MaryNotPickyEater(mary) & MarySpendsTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x, CollegeTuition))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickiness(Mary) nor NeedToEarnMoney(Mary, CollegeTuition).\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not NotPickyEaters(Mary) and spends a lot of her time EatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary does not need to earn money to help pay for her college tuition.\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither Pickier nor NeedToEarnMoneyToHelpPayForCollegeTuition(Mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not Pickier(Mary) & Mary spends a lot of her time eating and catching up with friends in the campus dining halls(Mary)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: MaryNeitherPickyNorNeedsMoneyForCollegeTuition(mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: MaryNotPickyEaterAndSpendsTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobsOnCampus(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequentlyInCollege(x) -> StudentJobsOnCampus(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (TakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: MaryNeitherPickyNorNeedsToEarnMoneyForCollegeTuition(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition.\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not a picky eater.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. ((EnjoyDiningHallMealsAndRecipes(x) & EatAndCatchUpWithFriendsInCampusDiningHalls(x)) -> A LotOfTime(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. ((WorkInStudentJobs(x) & NeedMoneyForCollegeTuition(x)) | (-WorkInStudentJobs(x) & -NeedMoneyForCollegeTuition(x)))\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: not Mary. (PickyEater(Mary) & EatAndCatchUpWithFriendsInCampusDiningHalls(Mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is neither PickynorNeedsToEarnMoneyToHelpPayForCollegeTuition(Mary)\n\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is not Pickyeaterand spends a lot of her time eating and catching up with friends in the campus dining halls(Mary)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 70,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary. (NotPickyEater(Mary) | SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary -> (NotPickyEater | SpendTimeEatingAndCatchingUpWithFriendsInDiningHalls))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (-OrderTakeoutFrequently(x) & EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. ((EnjoyDiningHallMealsAndRecipes(x) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x)) -> A LotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: exists x. (Mary(x) & (-PickyEater(x) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: either Mary(isNotPickyEater) & (WorksInStudentJobs(Mary) & NeedsMoneyForCollegeTuition(Mary)) or Mary(isPickyEater) & (DoesNotSpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary -> (NotPickyEater | SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary either NotPickyEater(Mary) | (Mary is picky eater & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x, CollegeTuition))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary. either NotPickyEater(Mary) | SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary. (NotPickyEater(Mary) | SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary is either NotPickyEater(mary) or (IsPickyEater(mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary either -IsPickyEater(mary) | (IsPickyEater(mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. (WorkInStudentJobs(x) & NeedMoneyToPayForCollegeTuition(x) -> NeitherPickyNorNeedMoneyToPayForCollegeTuition(x))\n\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: all x. (NotPickyEater(x) | EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequentlyInCollege(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: either Mary(needsToEarnMoneyForCollegeTuition) & Mary(notPicky) -> Mary(spendsTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x, \"college tuition\"))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary -> (NotPickyEater(Mary) & (if picky eater(Mary) then SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: all x. (WorkInStudentJobs(mary) & NeedToEarnMoneyForCollegeTuition(mary) -> NeitherPickyNorNeedToEarnMoneyForCollegeTuition(mary))\n\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: all x. (IsNotPickyEater(mary) | (IsPickyEater(mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary. (NotPickyEater(Mary) | SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary -> (NotPickyEater | SpendTimeEatingAndCatchingUpWithFriendsInDiningHalls))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: exists x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: exists x. (Mary(x) & NotPickyEaters(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x, CollegeTuition(x)))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary either NotPickyEater(mary) | (PickyEater(mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary either -IsPickyEater(mary) | (IsPickyEater(mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary either NotPickyEater(mary) & -NeedsToEarnMoneyToHelpPayForCollegeTuition(mary) | Mary is picky eater & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary either NotPickyEater(mary) | SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary either NotPickyEater(mary) or SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary -> (NotPickyEater | SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: all x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary -> (NotPickyEater(Mary) | (PickyEater(Mary) & SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyForCollegeTuition(x))\n\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\n\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: either x. (OrderTakeoutFrequently(x) | EnjoyDiningHallMealsAndRecipes(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEaters(x))\n\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\n\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: Mary. (NotPickyEater(Mary) | SpendTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(Mary))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 71,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: exists x. (DriedThaiChilies(x) & ProductOfBakedByMelissa(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: exists x. (DriedThaiChilies(x) & ProductOfBakedByMelissa(x))\n\n</EVALUATE>",
    "  Sure, here's my attempt to translate the given sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) & Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: exists x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 72,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Hotpot(x) & Spicy(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 73,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. (DriedThaiChilies(x) -> (Spicy(x) & Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. (DriedThaiChilies(x) -> (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. (DriedThaiChilies(x) -> (Spicy(x) & (Bakery(x) | Hotpot(x))))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. (DriedThaiChilies(x) -> (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 74,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) & Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakeries(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakeries(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: none x. (ProductOfBakedByMelissa(x) | Bakery(x))\n\n</EVALUATE>"
   ],
   [
    "  Sure! Here's my attempt to translate the given sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further clarification.",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakeries(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. (DriedThaiChilies(x) -> (Spicy(x) & (Bakery(x) | Hotpot(x))))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here are the FOL translations for each sentence in the SENTENCES list:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: exists x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  Sure, here's the translation of the given sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakeries(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) & Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 75,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x) -> Cupcake(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. (DriedThaiChilies(x) -> (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & Bakery(x) & Cupcake(x) & ProductOfBakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x) -> Cupcake(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x) -> Cupcake(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x) -> Cupcake(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. (DriedThaiChilies(x) -> (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x) -> Cupcake(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x) -> Cupcake(x)\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (-Spicy(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x) -> Cupcake(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: exists x. (DriedThaiChilies(x) -> Cupcake(x) & BakedByMelissa(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: exists x. (DriedThaiChilies(x) -> Cupcake(x) & BakedByMelissa(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & Bakery(x)) | (Bakery(x) & Hotpot(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x) -> Cupcake(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. (DriedThaiChilies(x) -> (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: all x. (DriedThaiChilies(x) -> Cupcake(x) & ProductOfBakedByMelissa(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: exists x. (BakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & BakedByMelissa(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\n\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\n\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\n\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\n\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: all x. ((Spicy(x) & -Bakery(x)) | (-Spicy(x) & Bakery(x)))\n\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: DriedThaiChilies(x) & ProductOfBakedByMelissa(x)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 76,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> Few)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or PopularAmongLocalResidents.\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. (ProvideTakeOutService(subway) & NegativeReviews(subway) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway)))",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvidesTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: Subway(subway) (ProvidesTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvidesTakeOutService(subway))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvidesTakeOutService(x) & NegativeReviews(x) -> 0)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> Rating(x) > 9)\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> Rating(x) > 9 | Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. ((ProvidesTakeOutService(subway) & NegativeReviews(subway)) -> (Rating(subway) > 9 & -ProvidesTakeOutService(subway)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> NegativeReviews(restaurant) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(restaurant) -> GreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvidesTakeOutService(restaurant) & NegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> Rating(restaurant) -> GreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. (ProvidesTakeOutService(subway) & NegativeReviews(subway) -> (Rating(subway) > 9 & -ProvidesTakeOutService(subway)) | (-Rating(subway) > 9 & ProvidesTakeOutService(subway)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> RatingGreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway & RatingGreaterThan9) or (Subway & PopularAmongLocalResidents)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. ((ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(x) (RatingGreaterThan9(x) | PopularAmongLocalResidents(x))\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: Subway(x) (ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan9(x) & -ProvidesTakeOutService(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) has RatingGreaterThan9(x) or PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) -> 9 -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (NotTakeOutService(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocals(x) -> Rating(x) -> 9)\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway(x) -> Rating(x) -> 9) or (Subway(x) -> PopularAmongLocals(x))\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. ((Subway(x) & ProvidesTakeOutService(x) & NegativeReviews(x)) -> (Rating(x) -> 9 & -ProvidesTakeOutService(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) -> 9 -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x) -> 0)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> Rating(x) -> 9)\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(x) -> Rating(x) -> 9 | PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: Subway(x) & ProvidesTakeOutService(x) & NegativeReviews(x) -> Rating(x) -> 9 & -ProvidesTakeOutService(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(restaurant) -> YelpRecommendation(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> Rating(restaurant) -> GreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: Subway provides TakeOutService and ManyNegativeReviews(Subway) -> RatingGreaterThan9AndNoTakeOutService(Subway)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> Low)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway(x) & RatingGreaterThan9(x)) or (Subway(x) & PopularAmongLocalResidents(x))\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. (ProvideTakeOutService(subway) & NegativeReviews(subway) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x) -> 0)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> RatingGreaterThan9(x) | Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. ((ProvideTakeOutService(subway) & NegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> RatingGreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: if Subway provides TakeOutService and ManyNegativeReviews, then RatingGreaterThan9 and -ProvideTakeOutService.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> RatingGreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway has RatingGreaterThan9 or Subway is PopularAmongLocalResidents.\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: if Subway provides TakeOutService and ManyNegativeReviews(Subway), then RatingGreaterThan9(Subway) & -ProvideTakeOutService(Subway)",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> NegativeReviews(x) -> Low)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway & RatingGreaterThan9(subway)) or (Subway & PopularAmongLocalResidents(subway))\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. (ProvideTakeOutService(subway) & NegativeReviews(subway) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> RatingGreaterThan9(x) | Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> -RatingGreaterThan9(subway) & -ProvideTakeOutService(subway)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) has RatingGreaterThan9(x) or PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: if Subway(x) provides TakeOutService(x) & ManyNegativeReviews(x) then RatingGreaterThan9(x) & -ProvideTakeOutService(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) -> 9 -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x) -> 0)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> Rating(x) -> 9)\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway -> Rating(subway) -> 9) or (Subway -> PopularAmongLocalResidents(subway) -> 1)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. ((ProvideTakeOutService(subway) & NegativeReviews(subway)) -> (Rating(subway) -> 9 & -ProvideTakeOutService(subway)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> RatingGreaterThan9(x) or Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. ((ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvidesTakeOutService(x) & NegativeReviews(x) -> 0)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) has RatingGreaterThan9(x) or PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. ((ProvidesTakeOutService(subway) & NegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvidesTakeOutService(subway)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: Subway(subway) (ProvidesTakeOutService(subway) & ManyNegativeReviews(subway)) -> RatingGreaterThan9(subway) & -ProvidesTakeOutService(subway)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> RatingGreaterThan9(x) | Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. (ProvidesTakeOutService(subway) & ManyNegativeReviews(subway) -> (RatingGreaterThan9(subway) & -ProvidesTakeOutService(subway)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(x) either RatingGreaterThan9(x) or PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x) -> RatingGreaterThan9(x) & -ProvidesTakeOutService(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) has RatingGreaterThan9(x) or PopularAmongLocalResidents(x)\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: all x. ((ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: Subway(subway) (ProvideTakeOutService(subway) & NegativeReviews(subway)) -> RatingGreaterThan9(subway) & -ProvideTakeOutService(subway)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 77,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has a rating greater than 9 or is popular among local residents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides take-out service and -ManyNegativeReviews(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x) -> 0)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) has RatingGreaterThan9(x) or PopularAmongLocalResidents(x)\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(subway) & NegativeReviews(subway) -> 0)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway & RatingGreaterThan9(subway)) or (Subway & PopularAmongLocalResidents(subway))\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: all x. (ProvideTakeOutService(subway) & -ManyNegativeReviews(subway))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway has RatingGreaterThan9 or PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService & -ManyNegativeReviews(Subway)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> RatingGreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService and -ManyNegativeReviews.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has a rating greater than 9 or is popular among local residents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService(x) & -ManyNegativeReviews(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> RatingGreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway & RatingGreaterThan9) or (Subway & PopularAmongLocalResidents)\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: all x. ((ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)) | (-ProvideTakeOutService(subway) & ManyNegativeReviews(subway)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService and -ManyNegativeReviews.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> RatingGreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has a rating greater than 9 or is popular among local residents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService(restaurant) & -ManyNegativeReviews(restaurant)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> Low)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService(x) & -NegativeReviews(x)\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance."
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway has RatingGreaterThan9 or Subway is PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: all x. (ProvideTakeOutService(subway) & -ManyNegativeReviews(subway))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has a RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService and -ManyNegativeReviews.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) -> (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway(subway) -> (ProvideTakeOutService(subway) & -ManyNegativeReviews(subway))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway has RatingGreaterThan9(subway) or PopularAmongLocalResidents(subway)\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService(subway) & -ManyNegativeReviews(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) -> (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway(subway) & ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService(x) & -ManyNegativeReviews(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway has either RatingGreaterThan9 or PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService(x) & -ManyNegativeReviews(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway(subway) (ProvideTakeOutService(subway) & -ManyNegativeReviews(subway))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService and -ManyNegativeReviews.\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService and -ManyNegativeReviews.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (Restaurant(x) -> (-ManyNegativeReviews(x)))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) -> (GreaterThan9(x) -> ListedInRecommendations(x)))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> (Rating(x) -> (GreaterThan9(x)))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) -> (Rating(subway) -> (GreaterThan9(subway) | PopularAmongLocalResidents(subway)))\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: all x. (ProvideTakeOutService(subway) & -ManyNegativeReviews(subway))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService and -ManyNegativeReviews.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> RatingGreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService and -ManyNegativeReviews.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or PopularAmongLocalResidents.\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: Subway provides TakeOutService and -ManyNegativeReviews.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: SubwayHasRatingGreaterThan9(subway) | SubwayIsPopularAmongLocalResidents(subway)\n\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: SubwayProvidesTakeOutService(subway) & -ManyNegativeReviews(subway)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 78,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (Restaurant(x) -> (-ManyNegativeReviews(x)) -> ListedInYelpsRecommendations(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) -> (GreaterThan9(x)) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> (Rating(x) -> GreaterThan9(x)))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) -> (Rating(subway) -> GreaterThan9(subway)) | (PopularAmongLocalResidents(subway) -> (Rating(subway) -> GreaterThan9(subway)))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> FewNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway & RatingGreaterThan9(subway)) or (Subway & PopularAmongLocalResidents(subway))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(restaurant) -> GreaterThan9(restaurant) -> YelpRecommendation(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (LocalResident(restaurant) -> Rating(restaurant) -> GreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is LocalResident.\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: SubwayHasRatingGreaterThan9(subway) | SubwayIsPopularAmongLocalResidents(subway)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (Restaurant(x) -> (-NegativeReview(x) | YelpRecommendation(x)))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) -> (GreaterThan9(x) & YelpRecommendation(x)))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeoutService(x) & NegativeReview(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> (Rating(x) -> GreaterThan9(x)))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) -> (Rating(subway) -> (GreaterThan9(subway) | PopularAmongLocalResidents(subway)))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeoutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: SubwayHasRatingGreaterThan9(subway) | SubwayIsPopularAmongLocalResidents(subway)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: SubwayHasRatingGreaterThan9(subway) | SubwayIsPopularAmongLocalResidents(subway)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>\"\n\nPlease let me know if you have any questions or need further assistance!",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) has RatingGreaterThan9(x) or Subway(x) is PopularAmongLocalResidents(x)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(restaurant) -> ListedInRecommendations(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> RatingGreaterThan9(restaurant))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway & RatingGreaterThan9(subway)) or (Subway & PopularAmongLocalResidents(subway))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (LocalResidentPopularity(x) -> Rating(x) > 9)\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) (Rating(subway) > 9 | LocalResidentPopularity(subway))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> RatingGreaterThan9(x) | Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or PopularAmongLocalResidents.\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) -> (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> RatingGreaterThan9(x) | Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> NegativeReviews(x) -> 0)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x) -> 0)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> Rating(x) > 9)\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has Rating(Subway) > 9 or PopularAmongLocalResidents(Subway)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(Subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: SubwayHasRatingGreaterThan9OrPopularAmongLocalResidents(subway)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> NegativeReviews(x) -> few)\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & NegativeReviews(x) -> many)\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or is PopularAmongLocalResidents.\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway(x) & RatingGreaterThan9(x)) or (Subway(x) & PopularAmongLocalResidents(x))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> RatingGreaterThan9(x) | Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either Subway(x) -> RatingGreaterThan9(x) | Subway(x) -> PopularAmongLocalResidents(x)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(restaurant) -> -ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(restaurant) > 9 -> YelpRecommendation(restaurant))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeoutService(restaurant) & ManyNegativeReviews(restaurant))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(restaurant) -> Rating(restaurant) > 9)\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: either (Subway & Rating(subway) > 9) or (Subway & PopularAmongLocalResidents(subway))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeoutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway either has RatingGreaterThan9 or PopularAmongLocalResidents.\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) -> (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (Restaurant(x) -> NegativeReviews(x) -> ListedInYelpsRecommendations(x))\n\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) -> >9 -> ListedInYelpsRecommendations(x))\n\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (Restaurant(x) & -ProvideTakeoutService(x) -> ManyNegativeReviews(x))\n\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> Rating(x) -> >9)\n\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(subway) -> RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\n\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeoutService(subway)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 79,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Walden contains knowledge.\nFOL: all x. (Book(\"Walden\" by Henry Thoreau) -> Knowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\") by HenryThoreau\n\nTEXT: Walden contains knowledge.\nFOL: Walden -> Knowledge\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(walden)\n\nTEXT: Walden contains knowledge.\nFOL: all x. (Book(walden) -> Knowledge(walden))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: KnowledgeInWalden(walden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\") by HenryThoreau\n\nTEXT: Walden contains knowledge.\nFOL: Walden contains Knowledge(x)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\") by HenryThoreau\n\nTEXT: Walden contains knowledge.\nFOL: Walden contains Knowledge(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: all x. (Walden(x) -> Knowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: WaldenKnowledge(walden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\")\n\nTEXT: Walden contains knowledge.\nFOL: KnowledgeInWalden(walden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: Walden contains knowledge.\nFOL: Knowledge(Walden)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Walden contains knowledge.\nFOL: KnowledgeInBook(\"Walden\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: KnowledgeInWalden(walden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(\"Walden\")\n\nTEXT: Walden contains knowledge.\nFOL: Knowledge(Walden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Walden contains knowledge.\nFOL: WaldenHasKnowledge()\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(read(\"Walden\" by Henry Thoreau))\n\nTEXT: Walden contains knowledge.\nFOL: Walden(containsKnowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\")\n\nTEXT: Walden contains knowledge.\nFOL: KnowledgeInWalden()\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(read) Book(\"Walden\") by Henry Thoreau\n\nTEXT: Walden contains knowledge.\nFOL: Knowledge(Walden)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\") by HenryThoreau\n\nTEXT: Walden contains knowledge.\nFOL: Walden contains Knowledge(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\")\n\nTEXT: Walden contains knowledge.\nFOL: WaldenHasKnowledge()\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: all x. (Walden(x) -> Knowledge(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: WaldenKnowledge(walden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Walden contains knowledge.\nFOL: all x. (Walden(x) -> Knowledge(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 80,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\", HenryThoreau)\n\nTEXT: Harry is smarter than before.\nFOL: SmarterThanBefore(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: Harry is smarter than before.\nFOL: SmarterThanBefore(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\", HenryThoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: SmarterThanBefore(harry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\") by HenryThoreau.\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(Harry) -> SmarterThanBefore(Harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: Harry is smarter than before.\nFOL: Smarter(Harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: HarryBecomeSmarter()\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\") by HenryThoreau\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(Harry)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(walden)\n\nTEXT: Harry is smarter than before.\nFOL: HarryBecomeSmarter(before)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: SmarterThanBefore(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: SmarterThanBefore(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(Harry)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(walden)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: SmarterThanBefore(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\", HenryThoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(harry)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: SmarterThanBefore(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(Harry)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: Harry is smarter than before.\nFOL: Smarter(Harry)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: BecomeSmarter(Harry)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: Harry is smarter than before.\nFOL: SmarterThanBefore(harry)\n\n</EVALUATE>\""
   ]
  ]
 },
 {
  "index": 81,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (BecomeSmarter(x) -> GainKnowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. ((BecomeSmarter(x) -> GainKnowledge(x)) & Knowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. ((BecomeSmarter(x) -> GainKnowledge(x)) & Knowledge(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: BecomeSmarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. ((BecomeSmarter(x) -> GainKnowledge(x)) & Knowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(read) Book(\"Walden\") by Henry Thoreau\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. ((BecomeSmarter(x) & GainKnowledge(x)) -> Person(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(read) Book(\"Walden\") by Henry Thoreau(author)\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryRead(walden)\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: BecomeSmarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> BecomeSmarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: HarryReadBook(\"Walden\" by Henry Thoreau)\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. ((BecomeSmarter(x) -> GainKnowledge(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: exists x. (ReadBook(x) -> GainKnowledge(x))\n\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\n\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Harry(readBook(\"Walden\", HenryThoreau))\n\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(person) -> GainKnowledge(person)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 82,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) | -TextSequence(x)))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) | -TextSequence(x)))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (LanguageGenerationTask(x) -> TextSequence(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) | -TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (LanguageGenerationTask(x) | -LanguageUnderstandingTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) | -TextSequence(x)))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) | -TextSequence(x)))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessing(machineTranslation)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(machineTranslation) -> LanguageGenerationTask(machineTranslation)\n\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (LanguageGenerationTask(x) & TextSequence(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) & Output(x)))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> (TextSequence(x) & LanguageGenerationTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessing(machineTranslation)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(machineTranslation) -> TextSequence(machineTranslation)\n\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> TextSequence(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(machineTranslation) -> TextSequence(machineTranslation)\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(machineTranslation) -> LanguageGenerationTask(machineTranslation)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) | -TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (LanguageGenerationTask(x) -> TextSequence(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: exists x. (MachineTranslation(x) -> (MakeTextSequence(x) | -MakeTextSequence(x)))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessing(machineTranslation)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(machineTranslation) -> LanguageGenerationTask(machineTranslation)\n\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessing(machineTranslation)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(machineTranslation) -> TextSequence(machineTranslation)\n\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> TextSequence(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: exists x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessing(machineTranslation)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(machineTranslation)\n\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a language generation task.\nFOL: MachineTranslation(x) -> LanguageGenerationTask(x)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 83,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (MakeTextSequence(x) | -MakeTextSequence(x)))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) | -TextSequence(x)))))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> TextSequence(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(machineTranslation) -> TextSequence(machineTranslation)\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: exists x. (MachineTranslation(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> TextSequence(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: exists x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(machineTranslation)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(machineTranslation) -> LanguageUnderstandingTask(machineTranslation)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: exists x. (MachineTranslation(x) -> (Output(x) -> TextSequence(x)))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: exists x. (MachineTranslation(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> TextSequence(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: exists x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(machineTranslation) -> NaturalLanguageProcessing(machineTranslation)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) | -TextSequence(x)))\n\nTEXT: Machine translation is a language understanding task.\nFOL: all x. (MachineTranslation(x) -> LanguageUnderstandingTask(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (LanguageGenerationTask(x) -> TextSequence(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: all x. (MachineTranslation(x) -> LanguageUnderstandingTask(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: exists x. (Output(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: exists x. (MachineTranslation(x) -> (Output(x) -> TextSequence(x)))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> TextSequence(x))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (LanguageGenerationTask(x) & TextSequence(x)))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessing(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. (MachineTranslation(x) -> (TextSequence(x) & Output(x)))\n\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(x) -> LanguageUnderstandingTask(x)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 84,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) -> Building(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: Building(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: RentAtOliveGarden(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveInWithPet(x) & SecurityDeposit(x) -> RentApartmentInBuilding(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists y. (Money(y) -> MoreThan(y, $1500))\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInBuilding(oliveGarden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & More(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (AllowedToMoveIn(x) & SecurityDeposit(x) & LessThan(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom) & ManagedBuilding(oliveGarden)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. PetAllowed(x) -> managedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. ApartmentRental(x) -> DepositRequired(x, managedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnership(fluffy) -> Tom(fluffy)\n\nTEXT: Cats are pets.\nFOL: PetCategory(cat) -> Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: managedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: RentalAgreement(tom) -> managedBuilding(x) & AllowMoveInWithPet(x) & SecurityDepositLessThanOrEqualTo1500(x)\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. Money(x) -> (2000$ | MoreThan1500(x))\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentalAgreement(tom) -> managedBuilding(oliveGarden)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) -> Building(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositCriteria(x) -> Rent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: Building(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartmentIfAllowedToMoveInWithPet(x) & SecurityDepositCriteria(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInOliveGarden(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. ApartmentRental(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnership(fluffy) -> TomOwnsCat(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. Pet(x) -> (Cat(x) | Dog(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. Restaurant(x) -> ManagedBuilding(x) & (OliveGarden(x) | NotOliveGarden(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. Restaurant(x) -> MonthlyRent(x) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. ApartmentRental(x) -> AllowedToMoveInWithPet(x) & SecurityDeposit(x) -> $1500\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. Numbers(x) -> (2000(x) | 1500(x)) -> MoreThan(x)\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: exists x. ApartmentRental(x) -> Restaurant(x) -> OliveGarden(x)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) | MakeMonthsRent(x) & SecurityDeposit(x) > 1)\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowMoveInWithPet(x) & SecurityDeposit(x) <= 1500)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom) & ManagedBuilding(oliveGarden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositCriterion(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. (ManagedBuilding(x) & OliveGarden(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. (MonthlyRentAtBuilding(x) & OliveGarden(x) -> $2000(x))\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartmentInBuilding(x) & AllowMoveInWithPet(x) & SecurityDepositCriterion(x) -> RentApartmentInOliveGarden(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. ($2000(x) -> MoreThan$1500(x))\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInOliveGarden(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) -> RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (MakeMonthsRent(x) | MakeMoreThanMonthsRent(x)) & RentApartment(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) & PersonOwned(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & (AllowedToMoveInWithPet(x) & SecurityDeposit(x) -> (MakeMoreThanMonthsRent(x) | MakeMonthsRent(x)) & x = oliveGarden))\n\n2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom) & ManagedBuilding(oliveGarden)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. PetAllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. DepositRequiredForRent(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. ManagedBuilding(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (AllowedToMoveInWithPet(x) & SecurityDepositLessThanOrEqualTo1500(x)) -> RentApartmentInManagedBuilding(x)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInManagedBuilding(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (AllowedToMoveInWithPet(x) & SecurityDeposit(x) -> RentApartmentInBuilding(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. $2000(x) -> MoreThan$1500(x)\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: exists x. RentApartmentInBuilding(x) -> TheOliveGarden(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) & Owner(fluffy) = Tom\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveInWithFluffy(x) & SecurityDeposit(x) -> RentApartmentInManagedBuilding(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000$, 1500)\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInManagedBuilding(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) & ManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) -> DepositRequired(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) & Apartment(x) -> (EqualToMonthsRent(x) | MoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & AllowedToMoveInWithPet(x, fluffy) & SecurityDeposit(x) -> $1500\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > $1500\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & OliveGarden(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. PetAllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. RequiredDepositForRent(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDepositRange(x)\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. ManagedBuilding(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. MonthlyRent(x) & RentAmount(x) = 2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. RentApartmentInBuilding(x) & (AllowedToMoveInWithPet(x) & SecurityDepositRange(x))\n\n2000$ is more than $1500.\nFOL: exists x. Number(x) & RentAmount(x) > 1500\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: exists x. RentApartmentInBuilding(x) & ManagedBuilding(x) = TheOliveGarden\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) -> RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (MakeEqualToMonthsRent(x) | MakeMoreThanMonthsRent(x)) & RentApartment(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) & PersonOwned(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(tom, fluffy) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom) & ManagedBuilding(oliveGarden)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) -> RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (MonthsRent(x) | MoreThan(x, MonthsRent(x)))))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) & PersonOwned(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (Money(x) -> (MoreThan(x, 1500) & RentApartment(x)))\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom) & ManagedBuilding(oliveGarden)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) & PersonOwned(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x) & SecurityDeposit(x) -> RentApartmentIn(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentIn(tom) -> TheOliveGarden\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) -> OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. Pet(x) -> (Cat(x) | Dog(x) | -Other(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. Building(x) -> ManagedBuilding(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. Building(x) -> MonthlyRent(x) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. Apartment(x) -> AllowedToMoveInWithPet(x) -> Fluffy(x) & SecurityDeposit(x) -> $1500\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. Number(x) -> MoreThan(x, $1500)\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: exists x. Apartment(x) -> RentInOliveGarden(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) -> RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (MonthsRent(x) | MoreThan(x, MonthsRent(x)))))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) & Owner(fluffy) = Tom\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: RentApartment(tom) & AllowedToMoveInWith(tom, fluffy) & SecurityDeposit(tom) < 1500$\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom) & ManagedBuilding(oliveGarden) = True\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & More(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. (ManagedBuilding(x) & OliveGarden(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. (Rent(x) & OliveGarden(x) -> MakeMonthsRent(x) = 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & ManagedBuilding(x) & AllowedToMoveIn(x) & SecurityDeposit(x) -> LessThan(1500, x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (Number(x) -> More(x, 2000, 1500))\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: exists x. (RentApartment(x) & OliveGarden(x) -> Tom(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) & Owner(fluffy) = Tom\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithFluffy(tom) & SecurityDeposit(tom) < 1500$) -> RentApartmentInManagedBuilding(tom)\n\n2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInManagedBuilding(tom)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & More(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) & LessThan(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, oliveGarden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. ApartmentRental(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) -> OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (AllowedToMoveInWithPet(x) & SecurityDeposit(x) < $1500) -> RentApartmentInBuilding(x)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > $1500\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInBuilding(tom) -> TheOliveGarden\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositRange(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. (ManagedBuilding(x) & OliveGarden(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. (RentAmount(x) -> $2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartmentIfAllowedToMoveInWithPet(x) & SecurityDepositRange(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (GreaterThan(2000, 1500))\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: exists x. (RentApartmentInOliveGarden(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) & Building(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: Building(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (AllowedToMoveInWithPet(x) & SecurityDeposit(x) -> RentApartmentInBuilding(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInBuilding(tom) & Building(oliveGarden)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) -> Building(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositCriteria(x) -> (MonthsRent(x) | MoreThanMonthsRent(x))));\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: Building(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveInWithPet(x) & SecurityDepositCriteria(x)) -> RentApartmentInBuilding(x)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\n\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInBuilding(tom) & Building(oliveGarden)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 85,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. PetAllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. DepositRequiredForRent(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDepositCanBeEqualToOneMonthsRent(x)\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. ManagedBuilding(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. MonthlyRentAtOliveGarden(x) & $2000(x)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. RentApartmentInManagedBuildingIfAndOnlyIf(x, fluffy, securityDepositNoMoreThan1500)\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. 2000(x) & MoreThan(1500, x)\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: exists x. MoveInApartmentInOliveGardenWithFluffy(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeEqualTo(x, 1) | MakeMoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: MakeMoreThan(2000, 1500)\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, fluffy, oliveGarden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Some(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) -> Some(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositCriteria(x) -> Or(x, OneMonthRent(x)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. (ManagedBuilding(x) -> Some(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. (MonthlyRentAtOliveGarden(x) -> $2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartmentInManagedBuilding(x) -> (AllowedToMoveInWithFluffy(x) & SecurityDepositCriteria(x)) & OnlyIf(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (MoreThan(2000, 1500))\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: exists x. (AllowedToMoveInWithFluffy(x) & RentApartmentInManagedBuilding(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) | MakeMonthsRent(x) & SecurityDeposit(x) >= 1)\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowedToMoveInWith(fluffy, x) & SecurityDeposit(x) <= 1500)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveInWith(tom, oliveGarden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) & ManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & DepositRequired(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) & Apartment(x) & ManagedBuilding(x) & (EqualToMonthsRent(x) | MoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (Apartment(x) & ManagedBuilding(x) & AllowMovingInWithPet(x, fluffy) & SecurityDepositRequirements(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowMovingInWithPet(tom, fluffy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & More(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, oliveGarden, fluffy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) & RentAnApartmentInBuilding(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeEqualToOrMore(x, 1, monthRent))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: Building(oliveGarden) & ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: RentAtOliveGarden(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveInWithPet(x) & SecurityDeposit(x) -> RentAnApartmentInBuilding(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveInWithPet(tom) & Building(oliveGarden) & PetOwnedByTom(fluffy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) -> RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (MakeMonthsRent(x) | MakeMoreThanMonthsRent(x)) & ManagedBuilding(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) & PersonOwned(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: RentApartment(tom) & (AllowedToMoveIn(tom, fluffy) & SecurityDeposit(tom) < 1500$)\n\n2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowToMoveIn(tom, fluffy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) & RentAnApartmentInBuilding(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositAmount(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x)) & RentAnApartmentInBuilding(x) & ManagedBuilding(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: Building(oliveGarden) & ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: RentAtOliveGarden(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveInWithPet(x) & SecurityDepositAmount(x) -> RentAnApartmentInBuilding(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveInWithPet(tom) & Building(oliveGarden) & PetOwnedByTom(fluffy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) & RentAnApartmentInBuilding(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositCanBeEqualToOneMonthsRent(x) | (SecurityDepositGreaterThanOneMonthsRent(x) & RentAnApartmentInBuilding(x) & ManagedBuilding(x)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: exists x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: Building(oliveGarden) & ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRentAtOliveGarden(2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithFluffy(tom) & SecurityDepositLessThanOrEqualTo1500(tom)) -> RentAnApartmentInBuilding(tom)\n\nTEXT: 2000$ is more than $1500.\nFOL: (2000 > 1500)\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowToMoveInWithFluffy(tom)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) & ManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) & Apartment(x) & ManagedBuilding(x) & (EqualToOneMonthsRent(x) | MoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (Apartment(x) & ManagedBuilding(x) & AllowToMoveInWithPet(x, fluffy) & SecurityDeposit(x) & LessThan(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: GreaterThan(2000, 1500)\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowToMoveInWithPet(tom, fluffy, oliveGarden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x) & SecurityDeposit(x) -> RentApartmentInManagedBuilding(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (2000(x) -> MoreThan1500(x))\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom) & ManagedBuilding(oliveGarden) & Cat(fluffy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositCanBeEqualToMonthsRentOrMore(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. (ManagedBuilding(x) & OliveGarden(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. (MonthlyRentAtOliveGarden(x) -> $2000(x))\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartmentInManagedBuilding(x) -> (AllowedToMoveInWithFluffy(x) & SecurityDepositLessThanOrEqualTo$1500(x)))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. ($2000(x) -> MoreThan$1500(x))\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: exists x. (MoveInApartmentInOliveGardenWithFluffy(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) & ManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) -> DepositRequired(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) & Apartment(x) -> (EqualToOneMonthsRent(x) | MoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & AllowMoveInWithPet(x, fluffy) & SecurityDeposit(x) <= 1500$\n\n2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowMoveInWithPet(oliveGarden, fluffy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) -> RentApartmentInBuilding(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositCanBeEqualToOneMonthsRent(x) -> MakeSecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x)))]\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: BuildingNamedOliveGarden(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRentAtOliveGarden(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: willRentApartmentInManagedBuilding(tom) -> (allowedToMoveInWithFluffy(tom) & SecurityDepositLessThanOrEqualTo1500(tom))\n\n2000$ is more than $1500.\nFOL: MoreThan(2000$, 1500)\n\nTom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: allowedToMoveInWithFluffy(tom)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeEqualToMonthsRent(x) | MakeMoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (AllowedToMoveIn(x) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (2000(x) & -1500(x))\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowToMoveIn(tom) & ManagedBuilding(oliveGarden) & Cat(fluffy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) -> OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. Pet(x) -> (Cat(x) | Dog(x) | -Pet(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. Building(x) -> OliveGarden(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. Building(x) -> MonthlyRent(x) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. Apartment(x) -> AllowedToMoveInWithPet(x) -> Fluffy(x) & SecurityDeposit(x) -> $1500\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. Number(x) -> MoreThan(x, $1500)\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: exists x. Apartment(x) -> AllowedToMoveInWithPet(x) -> Fluffy(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) -> RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (MakeMonthsRent(x) | MakeMoreThan(x, 1)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwned(fluffy) -> Tom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x) & SecurityDeposit(x) -> RentApartment(x, fluffy) & ManagedBuilding(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (Number(x) -> (2000 | $1500) & (x > 1500))\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom) & ManagedBuilding(oliveGarden) & CatOwned(fluffy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) | MakeMonthsRent(x) & SecurityDeposit(x) >= 1)\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & SecurityDeposit(tom) <= 1500) | (AllowedToMoveIn(tom, fluffy) & SecurityDeposit(tom) >= 1500)\n\n2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedsToMoveIn(tom, oliveGarden, fluffy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (AllowedToMoveIn(x) & SecurityDeposit(x) -> RentApartmentIn(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowToMoveIn(tom) & ManagedBuilding(oliveGarden) & Cat(fluffy)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & GreaterThanOrEqualTo(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowedToMoveInWithPet(x, fluffy) & SecurityDeposit(x) < 1500$)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: exists x. (RentApartment(x) & AllowedToMoveInWithPet(x, fluffy))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) -> OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(x) -> RentApartmentInManagedBuilding(x) & AllowedToMoveInWithFluffy(x) & SecurityDepositLessThanOrEqualTo1500(x)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 -> MoreThan1500\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveInWithFluffy(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) & ManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) & Apartment(x) & ManagedBuilding(x) & (EqualToMonthsRent(x) | MoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & AllowMovingInWithPet(x, fluffy) & SecurityDeposit(x) < 1500$\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowMovingInWithPet(tom, fluffy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Some(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) -> Some(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: Pets(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithPet(tom) & SecurityDepositLessThanOrEqualTo1500(tom)) -> RentApartmentInManagedBuilding(tom)\n\n2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowMovingInWithPet(tom, oliveGarden)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) | MakeMonthsRent(x) & SecurityDeposit(x) >= 1)\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowedToMoveInWith(x, fluffy) & SecurityDeposit(x) <= 1500)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveInWith(tom, fluffy, oliveGarden)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 86,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowedInBuilding(x) -> Building(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequiredForRent(x) -> RentAnApartmentInBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDepositCanBeEqualToOneMonthsRent(x) -> MakeSecurityDepositMoreThanOneMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: CatOwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: Building(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRentAtOliveGarden(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveInWithPet(x) & SecurityDepositLessThanOrEqualTo1500(x)) -> RentAnApartmentInBuilding(x)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDepositAtOliveGarden(x) -> (MakeSecurityDepositMoreThanOneMonthsRent(x) | MakeSecurityDepositEqualToOneMonthsRent(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. RentApartment(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. MakeDeposit(x) -> (EqualToMonthsRent(x) | MoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) -> OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. Pet(x) -> Cat(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. ManagedBuilding(x) -> OliveGarden(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. RentOliveGarden(x) -> MonthlyRent(x) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. RentApartment(x) -> AllowedMoveInWithPet(x) -> Fluffy(x) & SecurityDeposit(x) -> $1500\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. MakeDeposit(x) -> $2000(x) -> MoreThan$1500(x)\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. RentOliveGarden(x) -> SecurityDeposit(x) -> Either$2000(x) | MoreThan$1500(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) & ManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) -> DepositRequired(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) & Apartment(x) -> (EqualToOneMonthsRent(x) | MoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & AllowMovingInWithPet(x, fluffy) & SecurityDeposit(x) < $1500\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > $1500\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. SecurityDeposit(x) & ManagedBuilding(x) -> (EqualTo$2000(x) | MoreThan(x, 1))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & (EqualToMonthsRent(x) | MoreThan(x, 1)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (Number(x) -> (MoreThan(x, 1500) & RentApartment(x))\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualTo(2000) | MoreThan(x, 1)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeEqualToMonthsRent(x) | MakeMoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (2000(x) & MoreThan(x, 1500))\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDeposit(x) & (MakeEqualToYearsRent(x) | MakeMoreThanYearsRent(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & GreaterThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowMoveInWithPet(x, fluffy) & SecurityDeposit(x) & LessThan(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: GreaterThan(2000, 1500)\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & GreaterThan(x, 1))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & (EqualToMonthsRent(x) | MoreThan(x, 1)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: RentApartment(tom) & (AllowedToMoveInWithPet(tom, fluffy) & SecurityDeposit(tom) <= 1500)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(oliveGarden) either 2000 or More\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) | MakeMonthsRent(x) & SecurityDeposit(x) >= 1)\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowedToMoveInWith(fluffy, x) & SecurityDeposit(x) <= 1500)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(oliveGarden) either 2000$ or more\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) & ManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & DepositRequired(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) & ManagedBuilding(x) & (EqualToMonthsRent(x) | MoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Cat(x) & Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & (AllowedToMoveInWith(x, fluffy) & SecurityDeposit(x) < 1500$)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(oliveGarden) either 2000$ or MoreThan(oliveGarden, 1500$)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) -> RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (MonthsRent(x) | More(x)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (Number(x) -> (MoreThan(x, 1500)) | (MoreThan(x, 2000)))\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDeposit(x) -> (EqualTo(x, 2000) | More(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) | MakeMonthsRent(x) & SecurityDeposit(x) >= 1)\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) <= 1500) -> RentApartment(x)\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(oliveGarden) either 2000$ or more\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & (EqualToOneMonthsRent(x) | MoreThan(x, 1)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. (ManagedBuilding(x) & OliveGarden(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. (Rent(x) & OliveGarden(x) -> $2000(x))\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & ManagedBuilding(x) & (AllowedToMoveInWith(x, fluffy) & SecurityDeposit(x) -> $1500(x)))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. ($2000(x) & MoreThan(x, $1500))\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDeposit(x) & (EqualTo$2000(x) | MoreThan(x, $2000)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & (MonthsRent(x) | More(x)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowedToMoveInWith(fluffy, x) & SecurityDeposit(x) & -More(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(oliveGarden) & (More(oliveGarden, 2000) | More(oliveGarden, 1500))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. ApartmentRental(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) -> OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. Building(x) -> ManagedBuilding(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. Building(x) -> MonthlyRent(x) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. ApartmentRental(x) -> AllowedToMoveInWithPet(x) & SecurityDeposit(x) -> $1500\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. Number(x) -> MoreThan(x, $1500)\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. Building(x) -> SecurityDeposit(x) -> Either(x, $2000, MoreThan($1500))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: exists x. Cat(x) -> Owner(x) & x = Fluffy\n\nTEXT: Cats are pets.\nFOL: all x. Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. Building(x) & OliveGarden(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. Building(x) & OliveGarden(x) -> Rent(x) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. Apartment(x) & Tom(x) -> Rent(x) & AllowedInBuilding(x) & SecurityDeposit(x) < 1500$\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. Building(x) & OliveGarden(x) -> SecurityDeposit(x) either 2000$ or More\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeEqualToMonthsRent(x) | MakeMoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000$\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: RentApartment(tom) & AllowedToMoveInWith(fluffy) & SecurityDeposit(tom) < 1500$\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000$ > 1500$\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(oliveGarden) & (MakeEqualTo2000(x) | MakeMoreThan2000(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) & ManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. Apartment(x) & ManagedBuilding(x) & DepositRequired(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) & ManagedBuilding(x) & (EqualToMonthsRent(x) | MoreThan(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartmentInManagedBuilding(x) & AllowedToMoveInWith(x, fluffy) & SecurityDeposit(x) -> LessThan(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDepositAtOliveGarden(x) -> (EqualTo(x, 2000) | MoreThan(x, 1))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (PetAllowed(x) -> ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) -> RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) -> (MonthsRent(x) | More(x)) & ManagedBuilding(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: either (SecurityDeposit(oliveGarden) -> $2000) | (SecurityDeposit(oliveGarden) -> More(oliveGarden))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeEqualToMonthsRent(x) | MakeMoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cat)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowMoveInWithPet(x, fluffy) & SecurityDeposit(x) -> LessThanOrEqualTo(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: MakeMoreThan(2000, 1500)\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDeposit(x) & MakeEqualTo(x, 2000) | MakeMoreThan(x, 1500))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & GreaterThanOrEqualTo(x, 1))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Cat(x) -> Pet(x)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) -> RentApartment(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: GreaterThanOrEqualTo(2000, 1500)\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) & GreaterThanOrEqualTo(x, 2000))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. Pet(x) -> AllowedInManagedBuilding(x)\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. ApartmentRental(x) -> RequiredDeposit(x)\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreThanMonthsRent(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) -> OwnedByTom(fluffy)\n\nTEXT: Cats are pets.\nFOL: all x. Pet(x) -> (Cat(x) | Dog(x) |...(other pets))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. ManagedBuilding(x) -> OliveGarden(x)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. OliveGarden(x) -> MonthlyRent(x) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. ApartmentRental(x) -> (AllowedToMoveInWithPet(x) & SecurityDeposit(x) -> $1500)\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. Money(x) -> (2000(x) | MoreThan1500(x))\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. SecurityDeposit(x) -> (OliveGarden(x) & (2000(x) | MoreThan1500(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & MakeMonthsRent(x) | MakeMonthsRent(x) & More(x))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Laptop(fluffy) & Person(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. (ManagedBuilding(x) & Restaurant(x) & OliveGarden(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MakeMonthsRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowMoveIn(x) & SecurityDeposit(x) -> (MakeMonthsRent(x) & -More(x)) | -RentApartment(x) & SecurityDeposit(x) & More(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: More(2000) -> More(1500)\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(oliveGarden) -> (MakeMonthsRent(oliveGarden) & $2000) | (MakeMonthsRent(oliveGarden) & More(oliveGarden))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & (EqualToOneMonthsRent(x) | MoreThan(x, 1)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: exists x. (Fluffy(x) & Cat(x) & Tom(x))\n\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: exists x. (OliveGarden(x) & ManagedBuilding(x))\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: exists x. (OliveGarden(x) & MonthlyRent(x, 2000))\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (Tom(x) & RentApartment(x) & (AllowedToMoveInWithFluffy(x) & SecurityDeposit(x) & -MoreThan(x, 1500)))\n\nTEXT: 2000$ is more than $1500.\nFOL: exists x. (2000(x) & MoreThan(x, 1500))\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (OliveGarden(x) & SecurityDeposit(x) & Either(x, 2000) | MoreThan(x, 1500)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (Pet(x) & ManagedBuilding(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (DepositRequired(x) & RentApartment(x) & ManagedBuilding(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (SecurityDeposit(x) & (EqualToOneMonthsRent(x) | MoreThan(x, 1)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnedBy(fluffy, tom)\n\nTEXT: Cats are pets.\nFOL: Pet(cats)\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden, 2000)\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: exists x. (RentApartment(x) & AllowedToMoveInWith(fluffy, x) & SecurityDeposit(x) & -MoreThan(x, 1500))\n\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: exists x. (SecurityDeposit(x) & (EqualToTwoThousand(x) | MoreThan(x, 2000)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) -> PetAllowed(x))\n\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: exists x. (ManagedBuilding(x) & Apartment(x) -> DepositRequired(x))\n\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: exists x. (ManagedBuilding(x) & Apartment(x) -> SecurityDeposit(x) -> (EqualToOneMonthRent(x) | MoreThan(x, 1)))\n\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom)\n\nTEXT: Cats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\n\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\n\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) -> $2000\n\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: all x. (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) -> RentApartmentIn(x))\n\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\n\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(oliveGarden) -> (2000 | MoreThan(oliveGarden, 1)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 87,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (Koala(x) -> LoveToSleep(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) & LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) & Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & Quokka(x) -> -x)\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> NotQuokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) & LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) & Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) & FavoriteAnimals(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) & FavoriteAnimals(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) & Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AustralianAnimals(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AustralianAnimals(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep.\nFOL: all x. (LoveToSleep(x) -> Koala(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 88,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AustralianAnimals(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AustralianAnimals(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) -> NotQuokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) & LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) & Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) -> NotQuokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: exists x. (LoveToSleep(x) & Quokka(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AustralianAnimals(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AustralianAnimals(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) -> NotQuokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. (LoveToSleep(x) & Quokka(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & Quokka(x)) -> -Quokka(x))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) -> Koala(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: Koalas love to sleep and are quokka.\nFOL: all x. ((LoveToSleep(x) & Quokka(x)) | (-LoveToSleep(x) & -Quokka(x)))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 89,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. ((Quokka(x) & LoveToSleep(x)) | (-Quokka(x) & VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(koala) & -Quokka(koala)) | (-VeryFluffy(koala) & Quokka(koala)))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(koala) & (LoveToSleep(koala) | VeryFluffy(koala))) | (-Quokka(koala) & (-LoveToSleep(koala) & -VeryFluffy(koala))))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> NotQuokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) -> EitherLovesToSleep(x) & VeryFluffy(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. ((Quokka(x) & LoveToSleep(x)) | (-Quokka(x) & VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) -> NotQuokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. (Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Fluffy(koala) -> NotQuokka(koala))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(koala) & LoveToSleep(koala)) | (Quokka(koala) & VeryFluffy(koala)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & (LoveToSleep(x) | VeryFluffy(x))) | (-Quokka(x) & (-LoveToSleep(x) & -VeryFluffy(x)))))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. ((Quokka(x) & LoveToSleep(x)) | (-Quokka(x) & VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. (Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(koala) & -Quokka(koala)) | (-VeryFluffy(koala) & Quokka(koala)))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(koala) & (LoveToSleep(koala) | VeryFluffy(koala))) | (-Quokka(koala) & (-LoveToSleep(koala) & -VeryFluffy(koala)))))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & LoveToSleep(x)) | (Quokka(x) & -LoveToSleep(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. ((Quokka(x) & LoveToSleep(x)) | (-Quokka(x) & VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. (Quokka(x) & either (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) -> either (LoveToSleep(x) | VeryFluffy(x)) )\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) & LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) & Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(koala) & -Quokka(koala)) | (-VeryFluffy(koala) & Quokka(koala)))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(koala) & (LoveToSleep(koala) | VeryFluffy(koala))) | (-Quokka(koala) & (-LoveToSleep(koala) & -VeryFluffy(koala))))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & LoveToSleep(x)) | (Quokka(x) & -LoveToSleep(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(koala) & -Quokka(koala)) | (-VeryFluffy(koala) & Quokka(koala)))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(koala) & (LoveToSleep(koala) | VeryFluffy(koala))) | (-Quokka(koala) & (-LoveToSleep(koala) | VeryFluffy(koala)))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. (Quokka(x) & (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. (Quokka(x) & (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & LoveToSleep(x)) | (-Quokka(x) & VeryFluffy(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: exists x. (VeryFluffy(x) & -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: exists x. ((Quokka(x) & LoveToSleep(x)) | (Quokka(x) & VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & (LoveToSleep(x) | VeryFluffy(x))) | (-Quokka(x) & (-LoveToSleep(x) & -VeryFluffy(x))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(koala) & -Quokka(koala)) | (-VeryFluffy(koala) & Quokka(koala)))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(koala) & (LoveToSleep(koala) | VeryFluffy(koala))) | (-Quokka(koala) & (-LoveToSleep(koala) & -VeryFluffy(koala))))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) -> -Quokka(x))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & LoveToSleep(x)) | (-Quokka(x) & VeryFluffy(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\n\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\n\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (VeryFluffy(x) -> FavoriteAnimals(x, Max))\n\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (LoveToSleep(x) -> FavoriteAnimals(x, Max))\n\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. ((VeryFluffy(x) & -Quokka(x)) | (-VeryFluffy(x) & Quokka(x)))\n\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & (LoveToSleep(x) | VeryFluffy(x))) | (-Quokka(x) & (-LoveToSleep(x) & -VeryFluffy(x))))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 90,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x) | Evil(x) -> Kind(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (UglyPerson(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (EvilPerson(x) -> UglyPerson(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (UglyPerson(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (EvilPerson(x) -> UglyPerson(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (UglyPerson(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (EvilPerson(x) -> UglyPerson(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (UglyPerson(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (EvilPerson(x) -> UglyPerson(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) Or Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x) | Evil(x) -> Kind(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) Or Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) Or Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (UglyPerson(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (EvilPerson(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 91,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: all x. ((Kind(harry) | CEO(harry)) -> Handsome(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: all x. (Kind(harry) | CEO(harry))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: Harry is either Kind(harry) | CEO(harry)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my response:\n\n<EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: Harry is either Kind(harry) | CEO(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  Sure, here's the FOL translation for the given sentences:\n\n<EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: all x. (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: Harry is either Kind(harry) | CEO(harry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (UglyPerson(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (EvilPerson(x) -> UglyPerson(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) & CEO(harry)) | (-Kind(harry) & CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: Harry -> (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: either (Kind(harry) | CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 92,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x) | Evil(x) -> Kind(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: exists x. (Evil(harry) & Ugly(harry) -> (-Kind(harry) & -CEO(harry)) | -Evil(harry) & -Ugly(harry) -> (-Kind(harry) & CEO(harry)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: exists x. ((Evil(harry) & Ugly(harry)) & (Kind(harry) | CEO(harry)) -> -Gentleman(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: all x. ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x) | Evil(x) -> Kind(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | Harry is neither Kind nor CEO\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) Or Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | -Kind(harry) | -CEO(harry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) | Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | Harry is neither Kind nor CEO\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | Harry is neither Kind(harry) nor CEO(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: exists x. (-Kind(x) & -CEO(x)) | exists x. (Kind(x) & -CEO(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) | Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | Harry is neither Kind(harry) nor CEO(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | (Kind(harry) & CEO(harry)) | Harry is neither kind nor a CEO\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | (!Evil(harry) &!Ugly(harry)) -> (!Kind(harry) &!CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | -NeitherEvilNorUgly(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | -Kind(harry) & -Evil(harry) | -Evil(harry) & -Ugly(harry) | -Ugly(harry) & -NeitherKindNorCEO(harry)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | -Kind(harry) | -CEO(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) | Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | -NeitherEvilNorUgly(harry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) Or Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | -Kind(harry) | -CEO(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | Harry is neither Kind nor CEO(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | (Kind(harry) & CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | -Kind(harry) & Handsome(harry) | -CEO(harry) & Ugly(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Harry is Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | Harry is neither Kind(harry) nor CEO(harry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | Harry is neither Kind nor CEO\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (UglyPerson(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (EvilPerson(x) -> UglyPerson(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | (-Kind(harry) & -CEO(harry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> KindOrEvil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (UglyPerson(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (EvilPerson(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | -Kind(harry) & Handsome(harry) | -CEO(harry) & Ugly(harry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x) | Evil(x) -> Kind(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry) | Harry is neither Kind nor CEO\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A man is either kind or evil.\nFOL: all x. (Kind(x) -> Evil(x))\n\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\n\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\n\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\n\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\n\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\n\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: -Kind(harry) & -CEO(harry)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 93,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutAndPlayingWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinsOrTriplets(luke) & DevelopStrongBondsWithFamilyMembers(luke) | -Luke & -TwinsOrTriplets(luke) & -DevelopStrongBondsWithFamilyMembers(luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOutAndPlayingWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutAndPlayingWithSiblings(x) -> -RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either TwinOrTriplet(luke) & DevelopsStrongBondsWithFamilyMembers(luke) or -TwinOrTriplet(luke) & -DevelopsStrongBondsWithFamilyMembers(luke)\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOutAndPlayingWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x)))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> (SameAgeSiblings(x)))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamily(x)))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) & PlayWithSiblings(x) -> (RegularlyLiveAtHome(x) -> Not(StrongBondsWithFamily(x)))))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke either (TwinsOrTriplets(Luke) & StrongBondsWithFamily(Luke)) or (-TwinsOrTriplets(Luke) & -StrongBondsWithFamily(Luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends (HangOutWithSiblings(Luke) & PlayWithSiblings(Luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeHangingOutAndPlayingWithSiblings(x) & RegularlyLiveAtHome(x)) -> -StrongBondsWithFamilyMembers(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (TwinsOrTriplets(luke) & StrongBondsWithFamilyMembers(luke) -> (Luke & -TwinsOrTriplets(luke) & -StrongBondsWithFamilyMembers(luke)))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOutAndPlayingWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) & PlayWithSiblings(x) -> RegularlyLiveAtHome(x) & -StrongBondsWithFamily(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (TwinOrTriplet(luke) & StrongBondsWithFamily(luke) | -TwinOrTriplet(luke) & -StrongBondsWithFamily(luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: HangOutWithSiblings(luke) & PlayWithSiblings(luke)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeHangingOutAndPlayingWithSiblings(x) & RegularlyLiveAtHome(x)) -> -StrongBondsWithFamilyMembers(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinOrTriplet(luke) & StrongBondsWithFamilyMembers(luke)) or -TwinOrTriplet(luke) & -StrongBondsWithFamilyMembers(luke)\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOutAndPlayingWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangoutWithSiblings(x) & PlayWithSiblings(x)) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(Luke) & DevelopStrongBonds(Luke)) | -TwinOrTriplet(Luke) & -DevelopStrongBonds(Luke)\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: HangoutWithSiblings(luke) & PlayWithSiblings(luke)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x)))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) & PlayWithSiblings(x) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either (TwinOrTriplet(Luke) & StrongBondsWithFamily(Luke)) or (-TwinOrTriplet(Luke) & -StrongBondsWithFamily(Luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends (HangOutWithSiblings(Luke) & PlayWithSiblings(Luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutAndPlayingWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either TwinOrTriplet(luke) & DevelopStrongBondsWithFamilyMembers(luke) or -TwinOrTriplet(luke) & -DevelopStrongBondsWithFamilyMembers(luke)\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends time hanging out and playing with his siblings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | (-TwinsOrTriplets(x)))))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> (SameAgeSiblings(x) | (-SameAgeSiblings(x)))))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamilyMembers(x) | (-StrongBondsWithFamilyMembers(x)))))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> (RegularlyLiveAtHome(x) | (-RegularlyLiveAtHome(x)))))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either a twin or triplet and develops strong bonds with his family members or Luke neither is a twin or triplet nor develops strong bonds with his family members.\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends a lot of time hanging out with and playing with his siblings.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangoutWithSiblings(x) & PlayWithSiblings(x) -> RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (TwinOrTriplet(luke) & StrongBondsWithFamily(luke) -> (Luke & FamilyMembers))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: all x. (HangoutWithSiblings(luke) & PlayWithSiblings(luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either TwinOrTriplet(luke) & DevelopsStrongBonds(luke) or -TwinOrTriplet(luke) & -DevelopsStrongBonds(luke)\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends a lot of time HangOutWithSiblings(luke) & PlayWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | (-TwinsOrTriplets(x))))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> (SameAgeSiblings(x) | (-SameAgeSiblings(x))))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamily(x) | (-StrongBondsWithFamily(x))))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x) -> -StrongBondsWithFamily(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either both a twin or triplet (TwinsOrTriplets(luke)) & DevelopsStrongBonds(luke) | Luke is neither a twin or triplet nor develops strong bonds with his family members (negation of DevelopsStrongBonds(luke) & negation of TwinsOrTriplets(luke)))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends time with his siblings (SpendTimeWithSiblings(luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> -StrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangoutWithSiblings(x) & PlayWithSiblings(x)) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(luke) & DevelopStrongBondsWithFamilyMembers(luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: all x. (Luke & HangoutWithSiblings(luke) & PlayWithSiblings(luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> RegularlyLiveAtHome(x) & -StrongBondsWithFamily(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | -TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: HangOutWithSiblings(luke) & PlayWithSiblings(luke)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(x) & StrongBondsWithFamily(x)) | -all x. (Luke & -TwinOrTriplet(x) & -StrongBondsWithFamily(x))\n\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangoutWithSiblings(x) & PlayWithSiblings(x)) -> (-RegularlyLiveAtHome(x)))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either (TwinOrTriplet(Luke) & StrongBondsWithFamily(Luke)) or (-TwinOrTriplet(Luke) & -StrongBondsWithFamily(Luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends (HangoutWithSiblings(Luke) & PlayWithSiblings(Luke)) a lot of time.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangoutWithSiblings(x) & PlayWithSiblings(x)) -> RegularlyLiveAtHome(x) & -StrongBondsWithFamily(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke either TwinOrTriplet(luke) & DevelopsStrongBonds(luke) or -TwinOrTriplet(luke) & -DevelopsStrongBonds(luke)\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends time HangoutWithSiblings(luke) & PlayWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) or (not TwinOrTriplet(luke) & not StrongBondsWithFamily(luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: HangOutWithSiblings(luke) & PlayWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutAndPlayingWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinsOrTriplets(luke) & DevelopStrongBondsWithFamilyMembers(luke)) or (not TwinsOrTriplets(luke) & not DevelopStrongBondsWithFamilyMembers(luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOutAndPlayingWithSiblings(luke)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeHangingOutAndPlayingWithSiblings(x) & -NotLiveAtHomeRegularly(x)) | (-SpendTimeHangingOutAndPlayingWithSiblings(x) & NotLiveAtHomeRegularly(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (TwinsOrTriplets(luke) & DevelopStrongBondsWithFamilyMembers(luke) | -TwinsOrTriplets(luke) & -DevelopStrongBondsWithFamilyMembers(luke))\n\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOutAndPlayingWithSiblings(luke)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | NotTwinsOrTriplets(x)))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> (SameAgeSiblings(x) | NotSameAgeSiblings(x)))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamilyMembers(x) | NotStrongBondsWithFamilyMembers(x)))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> (RegularlyLiveAtHome(x) | NotRegularlyLiveAtHome(x)))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either (TwinsOrTriplets(Luke) & StrongBondsWithFamilyMembers(Luke)) | (NotTwinsOrTriplets(Luke) & NotStrongBondsWithFamilyMembers(Luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends (SpendTimeWithSiblings(Luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangoutWithSiblings(x) & PlayWithSiblings(x)) -> RegularlyLiveAtHome(x) & StrongBondsWithFamily(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either TwinOrTriplet(luke) & StrongBondsWithFamily(luke) or -TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: Luke spends time HangoutWithSiblings(luke) & PlayWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangoutWithSiblings(x) & PlayWithSiblings(x) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) or (not TwinOrTriplet(luke) & not StrongBondsWithFamily(luke))\n\nLuke spends a lot of time hanging out and playing with his siblings.\nFOL: HangoutWithSiblings(luke) & PlayWithSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinsOrTriplets(luke) & StrongBonds(luke) | -Luke & -TwinsOrTriplets(luke) & -StrongBonds(luke))\n\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 94,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) & PlayWithSiblings(x) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(Luke) & DevelopsStrongBonds(Luke)) | -TwinOrTriplet(Luke) & -DevelopsStrongBonds(Luke)\n\nLuke complains often about annoying siblings.\nFOL: all x. (ComplainAboutSiblings(x) & x is Luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (LukeIsTwinOrTriplet(x) & DevelopsStrongBonds(x)) | -LukeIsTwinOrTriplet(x) & -DevelopsStrongBonds(x)\n\nTEXT: Luke complains often about annoying siblings.\nFOL: oftenComplainAboutSiblings(luke)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinOrTriplet(luke) & DevelopStrongBonds(luke)) or (not TwinOrTriplet(luke) & not DevelopStrongBonds(luke))\n\nLuke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (Siblings(x) -> (HangOutAndPlayWithSiblings(x) -> LotOfTime(x)))))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) -> True))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> (SameAgeSiblings(x) -> True))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamilyMembers(x) -> False))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutAndPlayWithSiblings(x) -> (RegularlyLiveAtHome(x) -> Not(StrongBondsWithFamilyMembers(x)))))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke. (TwinsOrTriplets(Luke) -> (StrongBondsWithFamilyMembers(Luke) -> (Both(Luke) -> True) | Neither(Luke) -> True)))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (ComplainOften(x) -> (Siblings(x) -> (Annoying(x) -> True)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinsOrTriplets(x) -> StrongBonds(x))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (ComplainOften(x) & Luke(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeHangingOutAndPlayingWithSiblings(x) & -NotLiveAtHomeRegularly(x)) | (-SpendTimeHangingOutAndPlayingWithSiblings(x) & NotLiveAtHomeRegularly(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (TwinOrTriplet(luke) & DevelopStrongBondsWithFamilyMembers(luke) | -TwinOrTriplet(luke) & -DevelopStrongBondsWithFamilyMembers(luke))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: oftenComplainAboutAnnoyingSiblings(luke)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(x) -> StrongBondsWithFamily(x))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (ComplainAboutSiblings(x) -> Luke(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(x) -> StrongBonds(x))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (ComplainAboutSiblings(x) -> AnnoyingSiblings(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> DevelopStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeHangingOutAndPlayingWithSiblings(x) & RegularlyLiveAtHome(x)) -> NotDevelopStrongBondsWithFamilyMembers(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinsOrTriplets(luke) & DevelopStrongBondsWithFamilyMembers(luke)) or (not TwinsOrTriplets(luke) & not DevelopStrongBondsWithFamilyMembers(luke))\n\nLuke complains often about annoying siblings.\nFOL: ComplainOftenAboutAnnoyingSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (LukeIsTwinOrTriplet(x) & StrongBondsWithFamily(x)) | -LukeIsTwinOrTriplet(x) & -StrongBondsWithFamily(x)\n\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (Siblings(x) -> (HangOutAndPlayWithSiblings(x) -> A Lot Of Time)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SiblingsTheSameAge(x) -> (TwinsOrTriplets(x) -> True))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutSiblings(x) -> (SiblingsTheSameAge(x) -> True))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> (StrongBondsWithFamilyMembers(x) -> False))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutAndPlayWithSiblings(x) -> (NotLiveAtHomeRegularly(x) -> True))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (LukeIsTwinOrTriplet(x) & DevelopStrongBondsWithFamilyMembers(x)) | -LukeIsTwinOrTriplet(x) & -DevelopStrongBondsWithFamilyMembers(x)\n\nLuke complains often about annoying siblings.\nFOL: all x. (ComplainOftenAboutSiblings(x) -> LukeIsX(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (Siblings(x) -> (HangOutAndPlay(x) -> True)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) -> True))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> (SameAgeSiblings(x) -> True))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBonds(x) -> False))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutAndPlay(x) -> (RegularlyLiveAtHome(x) -> False))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke(x) -> (TwinsOrTriplets(x) & StrongBonds(x)))\n\nLuke complains often about annoying siblings.\nFOL: all x. (ComplainOften(x) -> (Siblings(x) -> (Annoying(x) -> True)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (Siblings(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x)))))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> (SameAgeSiblings(x)))))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamily(x)))))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> (RegularlyLiveAtHome(x) -> Not(StrongBondsWithFamily(x)))))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke(x) -> (TwinsOrTriplets(x) & StrongBondsWithFamily(x)))\n\nLuke complains often about annoying siblings.\nFOL: all x. (ComplainOften(x) -> (Siblings(x) -> Annoying(x)))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | IsSibling(x)))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> (SameAgeSiblings(x) | IsSibling(x)))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (DevelopStrongBonds(x) | IsFamilyMember(x)))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangoutWithSiblings(x) & PlayWithSiblings(x) -> (RegularlyLiveAtHome(x) | Not(RegularlyLiveAtHome(x)))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke either:\n\n1. Is a twin or triplet and DevelopsStrongBonds(Luke)\n2. Is not a twin or triplet and DoesNotDevelopStrongBonds(Luke)\n\nLuke complains often about annoying siblings.\nFOL: Luke complains about Siblings(Luke) often.\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (SiblingsHangingOutAndPlayingTime(x) > 0))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | (-TwinsOrTriplets(x))))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> (SameAgeSiblings(x) | (-SameAgeSiblings(x))))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamilyMembers(x) | (-StrongBondsWithFamilyMembers(x))))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SiblingsHangingOutAndPlayingTime(x) > 0) -> (RegularlyLiveAtHome(x) | (-RegularlyLiveAtHome(x))))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (LukeIsTwinOrTriplet(x) -> (StrongBondsWithFamilyMembers(x) | (-StrongBondsWithFamilyMembers(x))))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> (SameAgeSiblings(x) | (-SameAgeSiblings(x))))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & (TwinsOrTriplets(x) & StrongBondsWithFamily(x))) | -Luke & (TwinsOrTriplets(x) & -StrongBondsWithFamily(x))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (ComplainOften(x) & Luke(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (Siblings(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> (SameAgeSiblings(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamily(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> (RegularlyLiveAtHome(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either a twin or triplet and develops strong bonds with his family members, or Luke neither is a twin or triplet nor develops strong bonds with his family members.\n\nLuke complains often about annoying siblings.\nFOL: Luke complains often about annoying siblings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinsOrTriplets(x) -> StrongBonds(x))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (ComplainOften(x) & Luke(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) & PlayWithSiblings(x) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) or (not TwinOrTriplet(luke) & not StrongBondsWithFamily(luke))\n\nLuke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (SiblingHangoutTime(x) & SiblingPlaytime(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | (-TwinsOrTriplets(x)))))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblingComplaints(x) -> (SameAgeSiblings(x) | (-SameAgeSiblings(x)))))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularHomeLiving(x) -> (StrongBondsWithFamily(x) | (-StrongBondsWithFamily(x)))))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SiblingHangoutTime(x) & SiblingPlaytime(x) -> (RegularHomeLiving(x) | (-RegularHomeLiving(x)))))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either a twin or triplet and develops strong bonds with his family members, or Luke neither is a twin or triplet nor develops strong bonds with his family members.\n\nLuke complains often about annoying siblings.\nFOL: Luke complains often about annoying siblings.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (SiblingHangoutTime(x) -> True))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) -> True))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> (SameAgeSiblings(x) -> True))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularHomeLiving(x) -> (StrongBonds(x) -> False))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SiblingHangoutTime(x) & -RegularHomeLiving(x)) | (-SiblingHangoutTime(x) & RegularHomeLiving(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (LukeIsTwinOrTriplet(x) & StrongBonds(x)) | -LukeIsTwinOrTriplet(x) & -StrongBonds(x)\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (LukeComplains(x) & AnnoyingSiblings(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangoutWithSiblings(x) & PlayWithSiblings(x)) -> (-RegularlyLiveAtHome(x) | RegularlyLiveAtHome(x)))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) or -TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)\n\nLuke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) or (not TwinsOrTriplets(luke) & not StrongBondsWithFamily(luke))\n\nLuke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (LukeIsTwinOrTriplet(x) & StrongBonds(x) | -LukeIsTwinOrTriplet(x) & -StrongBonds(x))\n\nTEXT: Luke complains often about annoying siblings.\nFOL: all x. (ComplainAboutSiblings(x) & Luke(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) or (not TwinOrTriplet(luke) & not StrongBondsWithFamily(luke))\n\nLuke complains often about annoying siblings.\nFOL: ComplainOftenAboutSiblings(luke)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 95,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> DevelopStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeHangingOutAndPlayingWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeHangingOutAndPlayingWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (TwinOrTriplet(luke) & DevelopStrongBondsWithFamilyMembers(luke) | -TwinOrTriplet(luke) & -DevelopStrongBondsWithFamilyMembers(luke))\n\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: none x. (TwinOrTriplet(x) & ComplainOftenAboutAnnoyingSiblings(x) | -TwinOrTriplet(x) & -ComplainOftenAboutAnnoyingSiblings(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutAndPlayingWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (LukeIsTwinOrTriplet(x) -> DevelopStrongBondsWithFamilyMembers(x))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (LukeIsNeitherTwinNorTripletNorComplainsOftenAboutAnnoyingSiblings(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(luke) -> StrongBonds(luke))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke & -TwinOrTriplet(luke) & -ComplainAboutSiblings(luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutAndPlayingWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke is either TwinOrTriplet(x) & DevelopStrongBondsWithFamilyMembers(x) or -TwinOrTriplet(x) & -DevelopStrongBondsWithFamilyMembers(x))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke is neither TwinOrTriplet(x) nor ComplainOftenAboutAnnoyingSiblings(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | NotTwinsOrTriplets(x)))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> (SameAgeSiblings(x) | NotSameAgeSiblings(x)))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> (NoStrongBondsWithFamilyMembers(x) | SomeStrongBondsWithFamilyMembers(x)))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> (NotLiveAtHomeRegularly(x) | LiveAtHomeRegularly(x)))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke either:\n- TwinsOrTriplets(luke) & DevelopsStrongBonds(luke)\n- NotTwinsOrTriplets(luke) & NoDevelopsStrongBonds(luke)\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: Luke either:\n- NotTwinsOrTriplets(luke) & NotComplainAboutSiblings(luke)\n- TwinsOrTriplets(luke) & NoComplainAboutSiblings(luke)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -NotLiveAtHomeRegularly(x)) | (-SpendTimeWithSiblings(x) & NotLiveAtHomeRegularly(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(x) -> StrongBonds(x))\n\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke & -TwinOrTriplet(x) & -ComplainAboutSiblings(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangoutWithSiblings(x) & PlayWithSiblings(x) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | -TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainOften(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangoutWithSiblings(x) & PlayWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: either (TwinOrTriplet(luke) & DevelopStrongBonds(luke)) or (not TwinOrTriplet(luke) & not DevelopStrongBonds(luke))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: none (TwinOrTriplet(luke) & ComplainAboutSiblings(luke)) or (not TwinOrTriplet(luke) & not ComplainAboutSiblings(luke))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutAndPlayingWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(luke) & DevelopStrongBondsWithFamilyMembers(luke)) | -TwinOrTriplet(luke) & -DevelopStrongBondsWithFamilyMembers(luke)\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke & -TwinOrTriplet(x) & -ComplainOftenAboutAnnoyingSiblings(x)) | -Luke & TwinOrTriplet(x) & -ComplainOftenAboutAnnoyingSiblings(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangoutWithSiblings(x) & PlayWithSiblings(x) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(Luke) & StrongBondsWithFamily(Luke)) | -TwinOrTriplet(Luke) & -StrongBondsWithFamily(Luke)\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (-TwinOrTriplet(Luke) & -ComplainAboutSiblings(Luke)) | (-TwinOrTriplet(Luke) & -StrongBondsWithFamily(Luke))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (SiblingTime(x) -> True)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSibling(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSibling(x) -> SameAgeSibling(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyAtHome(x) -> StrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SiblingTime(x) -> (-RegularlyAtHome(x)) | (-SiblingTime(x) & RegularlyAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(x) -> (StrongBonds(x) -> True) | (-Luke & -TwinOrTriplet(x)))\n\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (-TwinOrTriplet(x) & -ComplainOften(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeHangingOutAndPlayingWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeHangingOutAndPlayingWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & (TwinsOrTriplets(x) & StrongBondsWithFamilyMembers(x)))\n\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainOftenAboutAnnoyingSiblings(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangoutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | NotTwinsOrTriplets(x)))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> (SameAgeSiblings(x) | NotSameAgeSiblings(x)))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> (NoStrongBondsWithFamilyMembers(x) | SomeStrongBondsWithFamilyMembers(x)))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> (DidNotLiveAtHomeRegularly(x) | DidLiveAtHomeRegularly(x)))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke either (TwinsOrTriplets(Luke) & DevelopStrongBonds(Luke)) or (NotTwinsOrTriplets(Luke) & NoDevelopStrongBonds(Luke))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: Luke neither (TwinsOrTriplets(Luke) & ComplainAboutSiblings(Luke)) nor (NotTwinsOrTriplets(Luke) & NoComplainAboutSiblings(Luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) & PlayWithSiblings(x) -> NotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinOrTriplet(Luke) & DevelopStrongBonds(Luke)) | -TwinOrTriplet(Luke) & -DevelopStrongBonds(Luke)\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke & (!TwinOrTriplet(Luke) &!ComplainAboutSiblings(Luke)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (SiblingHangoutTime(x) & SiblingPlaytime(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | NotTwinsOrTriplets(x)))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> (SameAgeSiblings(x) | NotSameAgeSiblings(x)))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularHomeLiving(x) -> (StrongBondsWithFamily(x) | NotStrongBondsWithFamily(x)))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SiblingHangoutTime(x) & SiblingPlaytime(x)) -> (RegularHomeLiving(x) | NotRegularHomeLiving(x)))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (LukeIsTwinOrTriplet(x) -> (StrongBondsWithFamily(x) | NotStrongBondsWithFamily(x)))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (LukeIsNotTwinOrTriplet(x) & LukeDoesNotComplain(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> DevelopStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutAndPlayingWithSiblings(x) -> -RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinsOrTriplets(luke) & DevelopStrongBondsWithFamilyMembers(luke) | -Luke & -TwinsOrTriplets(luke) & -DevelopStrongBondsWithFamilyMembers(luke))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke & -TwinsOrTriplets(luke) & -ComplainOftenAboutAnnoyingSiblings(luke) | -Luke & TwinsOrTriplets(luke) & -ComplainOftenAboutAnnoyingSiblings(luke))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> RegularlyLiveAtHome(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-Luke & -TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke & -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)) | (-Luke & TwinsOrTriplets(luke) & ComplainAboutSiblings(luke))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangoutAndPlaySiblings(x) -> lot))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) -> yes))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutSiblings(x) -> (SameAgeSiblings(x) -> yes))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamilyMembers(x) -> no))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangoutAndPlaySiblings(x) -> (RegularlyLiveAtHome(x) -> often))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & (TwinsOrTriplets(x) -> (StrongBondsWithFamilyMembers(x) -> yes)))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke & (NotTwinsOrTriplets(x) & NotComplainOftenAboutSiblings(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> RegularlyLiveAtHome(x) & StrongBondsWithFamily(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either TwinOrTriplet(luke) & StrongBondsWithFamily(luke) or -TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: Luke is neither TwinOrTriplet(luke) & -ComplainOften(luke) nor -TwinOrTriplet(luke) & ComplainOften(luke)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | NotTwinsOrTriplets(x)))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutSiblings(x) -> (SameAgeSiblings(x) | NotSameAgeSiblings(x)))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamilyMembers(x) | NotStrongBondsWithFamilyMembers(x)))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) & PlayWithSiblings(x) -> (RegularlyLiveAtHome(x) | NotRegularlyLiveAtHome(x)))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (TwinsOrTriplets(luke) & StrongBondsWithFamilyMembers(luke) | -TwinsOrTriplets(luke) & -StrongBondsWithFamilyMembers(luke))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainOftenAboutSiblings(luke)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> (HangOutWithSiblings(x) & PlayWithSiblings(x)))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((HangOutWithSiblings(x) & PlayWithSiblings(x)) -> DidNotLiveAtHomeRegularly(x))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke either (TwinOrTriplet(Luke) & DevelopStrongBonds(Luke)) or (-TwinOrTriplet(Luke) & -DevelopStrongBonds(Luke))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: Luke either (NotTwinNorTriplet(Luke) & -ComplainAboutSiblings(Luke)) or (-NotTwinNorTriplet(Luke) & NotComplainAboutSiblings(Luke))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOutAndPlayingWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOftenAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> NoStrongBondsWithFamilyMembers(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeHangingOutAndPlayingWithSiblings(x) & -NotLiveAtHomeRegularly(x)) | (-SpendTimeHangingOutAndPlayingWithSiblings(x) & NotLiveAtHomeRegularly(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & (TwinsOrTriplets(x) & DevelopStrongBondsWithFamilyMembers(x)))\n\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (Luke & (-TwinsOrTriplets(x) & -ComplainOftenAboutAnnoyingSiblings(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBondsWithFamily(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & (TwinsOrTriplets(x) & StrongBondsWithFamily(x))) | -Luke & (Luke & -TwinsOrTriplets(x) & -StrongBondsWithFamily(x)))\n\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (-Luke & (TwinsOrTriplets(x) & ComplainAboutSiblings(x)) | (-Luke & -TwinsOrTriplets(x) & -ComplainAboutSiblings(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> (SiblingsHangingOutAndPlayingTime(x) > 0))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) -> True))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> (SameAgeSiblings(x) -> True))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> (StrongBondsWithFamilyMembers(x) -> False))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SiblingsHangingOutAndPlayingTime(x) > 0) -> (RegularlyLiveAtHome(x) -> False))\n\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: Luke is either (TwinsOrTriplets(luke) & StrongBondsWithFamilyMembers(luke)) or (-TwinsOrTriplets(luke) & -StrongBondsWithFamilyMembers(luke))\n\nLuke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: Luke is neither (TwinsOrTriplets(luke) & ComplainAboutAnnoyingSiblings(luke)) nor (-TwinsOrTriplets(luke) & -ComplainAboutAnnoyingSiblings(luke))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\n\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\n\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainOften(x) -> SameAgeSiblings(x))\n\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (RegularlyLiveAtHome(x) -> StrongBonds(x))\n\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. ((SpendTimeWithSiblings(x) & -RegularlyLiveAtHome(x)) | (-SpendTimeWithSiblings(x) & RegularlyLiveAtHome(x)))\n\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: all x. (Luke & (TwinsOrTriplets(x) & StrongBonds(x))) | -Luke & (Luke & -StrongBonds(x))\n\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: all x. (-Luke & (Luke & -ComplainOften(x)) | (-Luke & -ComplainOften(x) & Luke))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 96,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (-Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (-Evergreen(x) & ObjectOfWorship(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) -> -ObjectOfWorship(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) -> -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (-Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (-Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) -> -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (-Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>\""
   ],
   [
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All fir trees are evergreens.\nFOL: all x. (Evergreen(x) -> FirTree(x))\n\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) -> FirTree(x))\n\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (-Evergreen(x) & -ObjectOfWorship(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 97,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (JuanDeOnate(x) & VisitPicurisMountains(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (HardingPegmatiteMine(x) & LocatedInPicurisMountains(x) & Donated(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & Texas(x) & Mine(x) & Donated(x)) -> False\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (JuanDeOnate(x) & VisitMountainRange(x) & Texas(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visited(x) & MountainRange(x) & JuanDeOnate(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Mine(x) & (LocatedIn(x, MountainRange(x)) & Donated(x)))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (MountainRange(x) & Texas(x) & -Exists y. (Mine(y) & LocatedIn(y, x) & Donated(y)))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visited(x) & MountainRange(x) & Texas(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (JuanDeOnate(x) & VisitPicurisMountains(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (HardingPegmatiteMine(x) & LocationInPicurisMountains(x) & Donated(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & Texas(x) & Mine(x) & Donated(x) -> -Or(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (JuanDeOnate(x) & VisitMountainRange(x) & Texas(x))\n\n</EVALUATE>\n\nNote: In FOL, the `or` operator is used to represent the negation of a conjunction. In this case, it is used to negate the conjunction of `MountainRange(x) & Texas(x)` and `Mine(x) & Donated(x)`. This means that if a mountain range in Texas has a mine that has been donated, then Juan de Onate did not visit that mountain range.",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visit(x, PicurisMountains))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donate(x, HardingPegmatiteMine, PicurisMountains))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & MineDonated(x, Texas) -> -Exists(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visit(x, MountainRange) & Texas(x))\n\n</EVALUATE>\n\nNote: In FOL, the `all x` and `exists x` phrases are used to indicate that the statement holds for all or exists values of the variable `x`, respectively. The `->` operator is used to indicate the logical implication of one statement from another.",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) & Texas(x)) | (NewMexico(x) & Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (JuanDeOnate(x) & VisitedPicurisMountains(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (HardingPegmatiteMine(x) & LocatedInPicurisMountains(x) & Donated(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & Texas(x) & Mine(x) & Donated(x)) -> False\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (JuanDeOnate(x) & VisitedMountainRange(x) & Texas(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visited(x) & MountainRange(x) & JuanDeOnate(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Mine(x) & (PicurisMountains(x) & Donated(x)))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (MountainRange(x) & Texas(x) & -Mine(x) & -Donated(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visited(x) & MountainRange(x) & Texas(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visit(x, PicurisMountains))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donate(x, HardingPegmatiteMine))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (NoMountainRangeInTexas(x) & NoMineDonatedInTexas(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visit(x, MountainRange(x)) & Texas(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donate(HardingPegmatiteMine, MountainRange(x)))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (NoMountainRangeInTexas(x) & NoMineDonatedInTexas(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)) & InTexas(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) & Texas(x)) | (NewMexico(x) & -Texas(x)) | (-NewMexico(x) & Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(visited) -> MountainRange(visited)\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(wasDonated) -> MountainRange(wasDonated)\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. -MountainRange(x) & -HardingPegmatiteMine(x)\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(visited) -> MountainRange(visited) & Texas(visited)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donate(HardingPegmatiteMine, MountainRange(x)))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (MountainRange(x) & NoMineWasDonatedInTexas(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)) & InTexas(x))\n\n</EVALUATE>\n\nNote: In FOL, the \"exists\" keyword is used to indicate that a statement is true for at least one value of the variable(s) involved. For example, \"exists x\" means that there exists some value of x for which the statement is true."
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) -> (NewMexico(x) & Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(visited) -> MountainRange(visited)\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Mine(x) & Location(x) -> (PicurisMountains(x) & Donated(x)))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (-MountainRange(x) & -Mine(x) & Donated(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(visited) -> MountainRange(visited) & Texas(visited)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: visited(JuanDeOnate, MountainRange(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: donated(HardingPegmatiteMine, MountainRange(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (MountainRange(x) & Texas(x) & -donated(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: visited(JuanDeOnate, MountainRange(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) -> (NewMexico(x) & Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(visited) & MountainRange(visited)\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(wasDonated) & MountainRange(wasDonated)\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: -MountainRange(texas) & -HardingPegmatiteMine(texas)\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(visited) & MountainRange(visited) & Texas(visited)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visited(x) & MountainRange(x) & JuanDeOnate(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Mine(x) & LocatedIn(x, PicurisMountains) & Donated(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (MountainRange(x) & Texas(x) & -Exists y. (Mine(y) & LocatedIn(y, x) & Donated(y)))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visited(x) & MountainRange(x) & Texas(x) & -JuanDeOnate(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)) & MountainRange(x) = Picuris Mountains)\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Mine(x) & (Location(x) = Picuris Mountains) & Owner(x) = Harding)\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (MountainRange(x) & Location(x) = Texas) & exists y. (Mine(y) & Location(y) = Texas & Owner(y) = -Harding)\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)) & MountainRange(x) = Texas)\n\n</EVALUATE>\""
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) & Texas(x)) | (NewMexico(x) & Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(visited) -> MountainRange(visited)\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(donated) -> MountainRange(donated)\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. MountainRange(x) & -HardingPegmatiteMine(x)\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(visited) -> MountainRange(visited) & Texas(visited)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (JuanDeOnate(x) & VisitPicurisMountains(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (HardingPegmatiteMine(x) & LocatedInPicurisMountains(x) & Donated(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & Texas(x) & MinesHaveBeenDonated(x) -> -Exists(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (JuanDeOnate(x) & VisitMountainRangeInTexas(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donate(HardingPegmatiteMine, MountainRange(x)))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (MountainRange(x) & NoMinesHaveBeenDonatedIn(x, Texas))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)) & In(x, Texas))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visited(x) & MountainRange(x) & JuanDeOnate(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donated(x) & MountainRange(x) & HardingPegmatiteMine(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & Texas(x) & Donated(x) -> -exists y. (MountainRange(y) & Texas(y) & Donated(y)))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visited(x) & MountainRange(x) & Texas(x) & JuanDeOnate(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(picurisMountains)\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (MountainRange(x) & Mine(x) & Donated(x, Texas))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(mountainRange, Texas)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (JuanDeOnate(x) & VisitPicurisMountains(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (HardingPegmatiteMine(x) & LocatedInPicurisMountains(x) & Donated(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & Texas(x) & Mine(x) & Donated(x) -> -Exists(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (JuanDeOnate(x) & VisitMountainRange(x) & Texas(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visit(x, PicurisMountains))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donate(HardingPegmatiteMine, x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (NoMountainRangeInTexasHasMineDonated(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visit(JuanDeOnate, x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) & Texas(x)) | (NewMexico(x) & Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (JuanDeOnate(x) & VisitedPicurisMountains(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (HardingPegmatiteMine(x) & LocatedInPicurisMountains(x) & Donated(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & Texas(x) & Mine(x) & Donated(x) -> -Exists(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (JuanDeOnate(x) & VisitedMountainRange(x) & Texas(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donate(HardingPegmatiteMine, MountainRange(x)))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: exists x. (-MountainRange(x) & -Donate(x))\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visit(JuanDeOnate, MountainRange(x)) & MountainRange(x) in Texas)\n\n</EVALUATE>\n\nNote: In FOL, the `exists` keyword is used to indicate that a statement is true for at least one value of the variable(s) involved. For example, `exists x. (MountainRange(x) & (NewMexico(x) | Texas(x)))` means \"there exists a mountain range x such that either NewMexico(x) or Texas(x) is true\".",
    "  <EVALUATE>\n\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: all x. (MountainRange(x) -> (NewMexico(x) & Texas(x)) | (NewMexico(x) & Texas(x) = False))\n\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: exists x. (Visited(x) & MountainRange(x) & Person(x) & JuanDeOnate(x))\n\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: exists x. (Donated(x) & MountainRange(x) & Mine(x) & HardingPegmatiteMine(x))\n\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRange(x) & Texas(x) & Mine(x) & Donated(x) = False)\n\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (Visited(x) & MountainRange(x) & Person(x) & JuanDeOnate(x) & Texas(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 98,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is taller than every person in his class.\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) -> Taller(z)))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is taller than Michael.\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is shorter than a person in Michael's class.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(x) & Shooting(x) & -Michael(x) -> Windy(x))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is Shorter(Peter) & Michael is in Class(Michael)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(Michael) & Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(Peter) & Taller(Peter, Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x, Michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy & -Block(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Laptop(Peter) & Taller(Peter, Michael) & -Man(Michael)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & Everyone Else(Michael) is not Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) & Taller(y) & Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is not Taller(Peter)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> Blocked(x) & NoJump(x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not Person(Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is not Taller(Michael)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & -Jump(x) -> BlockShooting(x, Michael))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Person(Windy) & BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is Shorter(Peter, Michael)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is taller than every person in his class.\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is taller than Michael.\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (BlockShooting(x, person(x)) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy's shooting is not blockable by Michael.\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is shorter than a person in Michael's class.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. (Taller(Michael) & Class(x) -> (Taller(x) & Everyone Else(x)))\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. (Taller(Peter) & Taller(Michael) -> (Taller(x) & Peter(x)))\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x) & NoJump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(Windy) & Shooting(Windy) -> (Block(x) & Windy(x)))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Person(Peter) & Class(x) -> (Taller(x) & Peter(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & Everyone Else(Michael) is not Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & (Taller(y) & Taller(z))) -> Taller(x)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is not Taller(Peter)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x, y) -> (Block(x, y) & NoJump(x, y)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not Person(Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) & Shooter(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is not Taller(Peter) & Michael is Taller(Michael)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x, Michael) &!Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(x) & Shooting(x) & -Block(x, Michael))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is Shorter(Peter) & Michael is in Class(Michael)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(michael) & Taller(michael) -> Class(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter) & Laptop(michael) -> Taller(peter, michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x, y) -> Block(x, y) & (!Jump(y)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Block(michael, Windy) -> False\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) & Shooter(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Taller(peter) & Class(michael) -> Taller(peter, michael)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(Michael) & Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(Peter) & Laptop(Peter) & -Laptop(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x))) & (Jump(x) -> -BlockShooting(x, x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Laptop(Peter) & Taller(Peter) & -Laptop(Michael) & Taller(Michael)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is taller than every person in his class.\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is taller than Michael.\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jumping(x)) | -BlockShooting(x, Jumping(x)))))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jumping(x) -> GreatShooter(x)))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is shorter than a person in Michael's class.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & -Taller(everyone else in his class)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & Taller(z)) -> Taller(x)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not a person in the domain of Michael.\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is shorter than a person in Michael's class.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & Everyone Else(Michael) -> Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael -> Taller(Peter)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x, Michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(x) & Shooting(x) & -Michael -> Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is Shorter(Peter) & Man(Michael) -> Shorter(Peter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is taller than every other person in his class.\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is taller than Michael.\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & -Jump(x) -> BlockShooting(x, Michael))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(x) & -Windy(x) & BlockShooting(x, Michael))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is shorter than a person in Michael's class.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter) & Taller(michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & -Jump(x) -> BlockShooting(x, michael))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Person(windy) & BlockShooting(michael, windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Person(x) & Class(x, michael) & -Taller(x, michael) -> Taller(x, michael, peter))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & Everyone Else(Michael) is shorter(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & -Taller(z) -> x is taller than z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is shorter(Peter)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, Michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is shorter(Peter) & Michael is in the same class(Peter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not a Person(Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is Shorter(Peter) & Michael is in Class(Michael)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. (Taller(Michael) & -Taller(x) & Class(x))\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & (Taller(y) & Taller(z))) -> Taller(x)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(Peter) & Michael\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x))) & -Person(x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Class(x) & -Taller(Peter, x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael) & -Taller(x)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jumping(x))) & (Jumping(x) -> -BlockShooting(x, x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. Taller(Michael) & Windy(x) & -BlockShooting(x, Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jumping(x) -> GreatShooter(x)))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. Taller(Peter) & -Taller(Michael) & -Taller(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & Everyone Else(Michael) -> Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) & Or(y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael(Peter) -> Taller(Peter)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x, Michael) & NoJump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is Shorter(Peter) & Man(Peter) & Michael(Michael) -> Shorter(Peter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & EveryoneElseInClass(Michael) is shorter than Michael.\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) & Taller(y) & Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is shorter than Peter.\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, Person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is a person such that -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is shorter than a person in Michael's class.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & Everyone Else(Michael) -> Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael -> Taller(Peter, Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not Person(Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is Shorter(Peter, Michael)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x, y) -> Blocked(x, y))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not Person(Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jumping(x) -> GreatShooter(x))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Peter is Shorter(Peter, Michael)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jumping(x)) &!Jumping(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. Taller(Michael) & -Person(Windy) & BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jumping(x) -> GreatShooter(x)))\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. Taller(Peter) & Person(x) & -Taller(x, Michael)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 99,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael) & -Taller(x)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael) & Windy(Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(michael) & Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(peter) & Taller(peter) & -Taller(michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x) & -Jump(x) -> BlockShooting(x, y))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Taller(michael) & Person(windy) & Shooting(windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jumping(x)) &!Jumping(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jumping(x) -> GreatShooter(x)))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael) & -Taller(x)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & (Taller(y) & Taller(z))) -> Taller(x)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x)) & (Person(x) & Shooting(x) -> Block(x, Person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(x) & Shooting(x) -> -Block(x, Windy))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael) & -Taller(everyone else in his class)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) & Taller(z)))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not Person(Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, Michael) & (!Jump(x)))))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Michael(x) & Taller(x)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) -> (Taller(x) & Taller(z)))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Peter(x) & Taller(x) & -Michael(x)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (BlockShooting(x, x) & (!Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(x) & Shooting(x) & -Michael(x) & Windy(x))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: exists x. Windy(x) & GreatShooter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, Michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael) & -Taller(x)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & (Taller(y) & Taller(z))) -> Taller(x)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Taller(Michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Taller(Michael) & Shooting(x) -> -Taller(Windy) & -Jump(x))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(Windy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x))) & Jump(x) -> -BlockShooting(x, x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: LaLiga(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: LaLiga(peter) & Taller(peter, michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x)) & -Block(x, michael)\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy & -Block(michael, windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: Windy & GreatShooter(windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & Taller(z)) -> Taller(x, y, z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x) & -Jump(x) -> BlockShooting(x, y))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not Person(Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(michael) & Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(peter) & Taller(peter) & -Taller(michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x) & -Jump(x) -> BlockShooting(x, y))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Taller(michael) & Person(windy) & Shooting(windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Taller(Michael) & Windy is Shooter\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is Shooter(Windy) & GreatShooter(Windy)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(michael) & Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(peter) & Taller(peter) & -Taller(michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x, y) & -Jump(y) -> Block(x, y))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Person(windy) & Shooting(windy, michael) & -Block(windy, michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. (Taller(Michael) & Class(x) -> (Taller(x) & Everyone(x)))\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> (Taller(x) & GreaterThan(y, z)))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. (Taller(Peter) & Taller(Michael) -> (Taller(x) & GreaterThan(Peter, Michael)))\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Taller(Michael) & Shooting(x) -> (Block(x, y) & NoJump(x, y)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Taller(Michael) & Shooting(Windy) -> (Block(x, Windy) & NoJump(x, Windy)))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) & Shooting(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: exists x. (Jump(Windy) & Shooting(Windy) -> GreatShooter(Windy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael) & -Taller(x)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & (Taller(y) & Taller(z))) -> Taller(x)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Taller(Michael) & Shooting(x) & -Jump(x) -> BlockShooting(x, y))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. Taller(Michael) & Shooting(x) & Taller(Windy) -> -BlockShooting(x, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) & Shooting(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: exists x. GreatShooter(Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(michael) & Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(peter) & Taller(peter, michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x, Michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & -Jump(x) -> BlockShooting(x, Michael))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not Person(Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) & GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x))) & Jump(x) -> -BlockShooting(x, Person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Launch(Michael) & Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Launch(Peter) & Taller(Peter) -> Taller(Peter, Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Shoot(x) & Person(y) -> Block(y, x) -> (!Jump(y)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Block(Michael, Windy) -> (!Taller(Michael, Windy))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shoot(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x)) & Michael can block\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Person(Windy) & -Shooting(Windy) & Michael cannot block\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: Windy is GreatShooter(Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: LaLiga(michael) & -Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: LaLiga(peter) & Taller(peter, michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x, michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: LaLiga(michael) & -Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: LaLiga(peter) & Taller(peter, michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 100,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(michael) & Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(peter) & Taller(peter, michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, Laptop(michael)) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: BlockShooting(peter, Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x)) & Michael can block\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not Person(Michael)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter is Taller(Peter) & Windy is not Person(Peter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael) & -Taller(x)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) & (Taller(y) & Taller(z))) -> Taller(x)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x)) & (Taller(Michael) & MakeContact(x, Michael))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Taller(Michael) & Shooting(Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: exists x. Taller(Peter) & Shooting(Windy) & MakeContact(x, Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. (Taller(Michael) & Class(x) -> EveryoneElse(x))\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. (Taller(Peter) & Taller(Michael) -> Taller(x))\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x)) &!Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(Windy) & BlockShooting(Michael, x) ->!Jump(x))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: exists x. (Person(Windy) & BlockShooting(Peter, x) -> Jump(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: exists x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Taller(Peter) & Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x)) &!Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: BlockShooting(Peter, Windy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(Michael) & -Taller(x)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Taller(Peter) & -Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & -Jump(x) -> BlockShooting(x, Person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. Taller(Michael) & Person(Windy) & -BlockShooting(x, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) & Shooter(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: exists x. Taller(Peter) & Person(Windy) & BlockShooting(x, Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy is not a Person(Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter is a Person(Peter) & Windy is a Person(Windy) & Peter is Taller(Peter) -> BlockShooting(Peter, Windy)\n</EVALUATE>\n\nNote: In FOL, we use the \"all x\" syntax to indicate that a statement holds for all values of x, and the \"Taller(x)\" syntax to indicate that x is taller than some other value. We also use the \"-\" operator to indicate negation, and the \"&\" operator to indicate conjunction (i.e., \"and\").",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(Michael) & Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(Peter) & Taller(Peter, Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x, Michael) & NoJump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Block(Peter, Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x)) &!Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Taller(Michael, Windy) &!BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter is Taller(Peter) & Windy is GreatShooter(Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (Shooting(x) & (!Jump(x)) -> Blocked(x, Michael)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Blocked(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter can BlockShooting(Windy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. (Taller(Michael) & NotEveryone(x))\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. (Taller(Peter) & Taller(Michael))\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x))))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: exists x. (BlockShooting(Peter, Windy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(michael) & Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(peter) & Taller(peter, michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x, y) & -Jump(y) -> Block(x, y))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy(michael) & -Block(michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) & Shooting(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Windy(peter) & -Block(peter, Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, x))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Taller(Michael) & Windy is not Person\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter is Taller(Peter) & Windy is not Person\n</EVALUATE>\n\nNote: In FOL, we use the concept of \"taller\" to represent the height of a person, and use the \"BlockShooting\" function to represent the ability of a taller person to block a shot from a shorter person. The \"Taller\" function is used to compare the height of two people, and the \"GreatShooter\" function is used to determine whether a shooter can jump when shooting.",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is taller than every person in his class.\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is taller than Michael.\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter can block Windy's shooting.\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. (Taller(peter) & -Taller(michael))\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & -Jump(x) -> BlockShooting(x, person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) & Shooter(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: BlockShooting(peter, Windy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is taller than every person in his class.\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is taller than Michael.\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x)) & -Person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter can block Windy's shooting.\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) & Taller(y) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(Michael) & Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(Peter) & Taller(Peter, Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Person(x) & Shooting(x, y) & -Jump(y) -> BlockShooting(x, y))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: Windy & -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: BlockShooting(Peter, Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, Person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Taller(Michael) & Windy is not Person(Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter is Taller(Peter) & Windy is not Person(Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x) & Taller(y)) -> Taller(z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. Taller(peter) & -Taller(michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jumping(x)) & NotJumping(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(x) & Windy(x) -> -BlockShooting(x, x))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jumping(x) -> GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: exists x. (Person(x) & Windy(x) & -BlockShooting(x, x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Laptop(michael) & Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Laptop(peter) & Taller(peter) & -Taller(michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, -Jump(x)) & -Jump(x) -> -BlockShooting(x, x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Taller(windy) & BlockShooting(michael, windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) -> GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Taller(peter) & BlockShooting(peter, windy)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> (Block(x, Michael) &!Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter is Taller(Peter) & Windy is Shooter(Windy) & Block(Peter, Windy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is taller than every person in his class.\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is taller than Michael.\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Shooting(x) -> -Jump(x) -> BlockShooting(x, person(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: BlockShooting(peter, Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, Michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter can BlockShooting(Windy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: exists x. Taller(michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> Taller(x, y, z))\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: exists x. (Taller(peter) & Not(Taller(michael)) & -BlockShooting(peter, michael))\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) & Not(Jumping(x)) -> BlockShooting(x, michael))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: exists x. (Person(windy) & Taller(michael) & Not(BlockShooting(michael, windy)))\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Jumping(x) -> GreatShooter(x))\n\nTEXT: Peter can block Windy's shooting.\nFOL: exists x. (Person(windy) & Taller(peter) & BlockShooting(peter, windy))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x) -> BlockShooting(x, y))\n\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Michael is Taller(Michael)\n\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x) & Taller(y) & Taller(z) -> x > z)\n\nTEXT: Peter is a man who is taller than Michael.\nFOL: Peter is Taller(Peter) & Michael is Taller(Michael)\n\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Person(x) -> (BlockShooting(x, Michael) & -Jump(x)))\n\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(Michael, Windy)\n\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) -> (Jump(x) & GreatShooter(x)))\n\nTEXT: Peter can block Windy's shooting.\nFOL: Peter is Taller(Peter) & Windy is Shooter(Windy)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 101,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(Barutin, BulgarianSettlement)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(Barutin, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: isPartOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if (locatedIn(A, B) & locatedIn(B, C)) then locatedIn(A, C)\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: namedAfter(Barutin, all Islands in Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x) & \"Bulgarian\"(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") & Island(x) & -DeceptionIsland(x) & -GreenwichIsland(x) & SnowIsland(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\"))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocationIn(x, y) & LocationIn(y, x) -> LocationIn(x, y))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> IslandInAntarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Barutin\") & x)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x) & SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"SouthShetlandIslands\") -> Island(x) & x)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> x)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (LocatedIn(x, y) -> LocatedIn(y, x) -> x)\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> IslandInAntarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Bulgarian\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x) & Island(x, \"Snow\"))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Island(x, \"SouthShetland\") -> (Island(x, \"Snow\") & Island(x, \"Greenwich\") & Island(x, \"Deception\"))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (PartOf(x, \"Antarctica\") -> (Island(x, \"SouthShetland\") & IsPartOf(x, \"Antarctica\"))))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (LocatedIn(x, y) -> (LocatedIn(y, z) & Location(x, z)))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Island(x, \"Antarctica\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x) -> Bulgarian(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> Southwest(x) -> Island(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x) -> SouthShetlandIslands(x) -> Island(x) -> SnowIsland(x) & Island(x) -> GreenwichIsland(x) & Island(x) -> DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x) -> SouthShetlandIslands(x) -> PartOf(x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> AllIslandsIn(x) -> Island(x) -> Antarctica(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"South Shetland Islands\") -> Island(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> Island(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Island(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(Barutin, x) -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(Barutin, x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(SouthShetlandIslands, x) -> (IncludeSnowIsland(x) & IncludeGreenwichIsland(x) & IncludeDeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(SouthShetlandIslands, x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(A, B) & LocatedIn(B, C) -> LocatedIn(A, C))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(Barutin, x) -> AllIslandsIn(x, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"SouthShetlandIslands\") & x in {\"Snow Island\", \"Greenwich Island\", \"Deception Island\"})\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (PartOf(x, \"Antarctica\") & Includes(x, \"SouthShetlandIslands\"))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> IslandInAntarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(Barutin, BulgarianSettlement)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(Barutin, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if(locatedIn(A, B) & locatedIn(B, C), locatedIn(A, C))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: namedAfter(Barutin, all Islands in Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(Barutin, BulgarianSettlement)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(Barutin, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: contains(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if (locatedIn(A, B) & locatedIn(B, C)) then locatedIn(A, C)\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: namedAfter(Barutin, all Islands in Antarctica)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x) & \"Bulgarian\"(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"South Shetland Islands\") & Island(x) & -DeceptionIsland(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") & PartOf(x, \"Antarctica\"))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> IslandInAntarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(Barutin, BulgarianSettlement(Barutin))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedOn(Barutin, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland & GreenwichIsland & DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(A, B) & LocatedIn(B, C)) -> LocatedIn(A, C)\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: namedAfter(Barutin, all Islands in Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Bulgarian\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> Island(x, \"Snow Island\") & Island(x, \"Greenwich Island\") & Island(x, \"Deception Island\"))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> PartOf(x, \"South Shetland Islands\"))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> IslandInAntarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"SouthShetlandIslands\") -> Island(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> Island(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (LocatedIn(x, y) -> LocatedIn(y, x))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Island(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(Barutin, BulgarianSettlement(Barutin))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: location(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland & GreenwichIsland & DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (location(A, B) & location(B, C)) -> location(A, C)\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: namedAfter(Barutin, all Islands in Antarctica)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(Barutin, BulgarianSettlement(Barutin))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(Barutin, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (locatedIn(A, B) & locatedIn(B, C)) -> locatedIn(A, C)\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: namedAfter(Barutin, all IslandsInAntarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"SouthShetlandIslands\") & x in {\"SnowIsland\", \"GreenwichIsland\", \"DeceptionIsland\"})\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (PartOf(x, \"Antarctica\") & Includes(x, \"SouthShetlandIslands\"))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> IslandInAntarctica(x))\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(Barutin, x) -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(Barutin, x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(SouthShetland Islands, x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(SouthShetland Islands, x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(A, B) & LocatedIn(B, C) -> LocatedIn(A, C))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(Barutin, x) -> AllIslandsIn(x, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"South Shetland Islands\") -> (Island(x) & In(x, \"Snow Island\", \"Greenwich Island\", \"Deception Island\")))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> IsPartOf(x, \"Antarctica\"))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> AllIslandsIn(x, \"Antarctica\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (PartOf(x, \"Antarctica\") & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> (Antarctica(x) & Barutin(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"South Shetland Islands\") -> (Include(x, \"Snow Island\") & Include(x, \"Greenwich Island\") & Include(x, \"Deception Island\")))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (PartOf(x, \"Antarctica\") & Not(PartOf(x, \"Not Antarctica\")))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> (Include(x, \"Antarctica\") & Not(Include(x, \"Not Antarctica\"))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(Barutin, x) -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(Barutin, x) -> SouthwestCoast(x) & Island(x, Snow))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(SouthShetland, x) -> (Island(x, Snow) & Island(x, Greenwich) & Island(x, Deception)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(SouthShetland, x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(A, x) & LocatedIn(B, y) -> LocatedIn(x, y) & C(x, y))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(Barutin, x) -> IslandInAntarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(Barutin, BulgarianSettlement(Barutin))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(Barutin, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: contains(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if(locatedIn(A, B), locatedIn(B, C), locatedIn(A, C))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: namedAfter(Barutin, all Islands in Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"SouthShetlandIslands\") -> (Include(x, \"SnowIsland\") & Include(x, \"GreenwichIsland\") & Include(x, \"DeceptionIsland\"))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (PartOf(x, \"SouthShetlandIslands\") & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> AllIslandsIn(x, \"Antarctica\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (Island(x) & -DeceptionIsland(x)) & -GreenwichIsland(x) & SnowIsland(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> PartOf(x, \"Antarctica\"))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> AllIslandsIn(x, \"Antarctica\"))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 102,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> Barutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Island(x) -> SouthShetlandIslands(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (Antarctica(x) -> SouthShetlandIslands(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(A, B) & LocatedIn(B, C) -> LocatedIn(A, C))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Cove(x) -> PlaceInBulgaria(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> (BarutinCove(x) & BulgarianSettlement(x)))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Location(x) -> (BarutinCove(x) & SnowIsland(x)))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x) -> (SouthShetlandIslands(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x) -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocationIn(A, B) & LocationIn(B, C) -> LocationIn(A, C))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocationIn(x, Antarctica) & Name(x) -> (BulgarianPlace(x) & Cove(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x) \"Barutin\")\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & Southwest(x) -> BarutinCove(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"SouthShetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> SouthShetlandIslands(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocationIn(x, y))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NamedAfter(x, \"Bulgaria\") & LocationIn(x, \"Antarctica\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> SettlementOfBarutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (CoastOfSnowIsland(x) -> BarutinCove(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIslands(x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (Antarctica(x) -> (SouthShetlandIslands(x) & PartOfAntarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedInB(x,y) & LocatedInC(y,x) -> LocatedInC(x,y))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (CoveInAntarctica(x) & PlaceInBulgaria(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> SettlementOfBarutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (LocationOfCove(x) -> SouthwestCoastOfSnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, SouthShetlandIslands) -> (IslandOfSnow(x) & IslandOfGreenwich(x) & IslandOfDeception(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (PartOfAntarctica(x) -> Includes(x, SouthShetlandIslands))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocationOfA(x) & LocationOfB(y) & LocationOfC(x) -> LocationOfAInC(y))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NameOfCove(x) & PlaceInBulgaria(x) -> True)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x) -> \"Barutin\")\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x) -> Island(x) -> \"Snow Island\")\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"South Shetland Islands\") -> Island(x) -> (\"Snow Island\" | \"Greenwich Island\" | \"Deception Island\"))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> Island(x) -> \"South Shetland Islands\")\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x) -> C(x) -> C(y))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NamedAfter(x, \"Bulgaria\") -> Cove(x) -> Antarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> (Barutin(x) & BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> (BarutinCove(x) & SnowIsland(x)))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Island(x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (Antarctica(x) -> (SouthShetlandIslands(x) & PartOf(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (Location(A) & Location(B) & Location(C) -> (A In C(x y)))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Cove(x) & PlaceInBulgaria(x) -> (Antarctica(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> SettlementOfBarutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (LocationOfCove(x) -> SouthwestCoastOfSnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, SouthShetlandIslands) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (PartOfAntarctica(x) -> Include(x, SouthShetlandIslands))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocationInB(x, y) -> LocationInC(x, y))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NameOfCove(x) & PlaceInBulgaria(x) -> true)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (LocationOfCove(x) -> SouthwestCoast(x) & Island(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Inclusion(x) -> SouthShetlandIslands(x) & Island(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (LocationInB(x) & LocationInC(x) -> LocationInC(x))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocationInAntarctica(x) & NameOfCove(x) -> BulgarianPlace(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> (Barutin(x) & BulgarianSettlement(x)))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Location(x) -> (BarutinCove(x) & SnowIsland(x)))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Inclusion(x) -> (SouthShetlandIslands(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x) -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocationIn(x, y) -> LocationIn(y, x))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (CoveInAntarctica(x) & PlaceInBulgaria(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x) -> \"Barutin\")\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x) -> Island(x) -> \"Snow Island\")\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x) -> Island(x) -> \"Snow Island\") | all y. (Include(y) -> Island(y) -> \"Greenwich Island\") | all z. (Include(z) -> Island(z) -> \"Deception Island\")\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> Islands(x) -> \"South Shetland Islands\")\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x) -> C(x, y) -> C(x))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NamedAfter(x, \"Bulgaria\") -> Cove(x) -> Antarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> SettlementOfBarutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (LocationOfCove(x) -> SouthwestCoastOfSnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(SouthShetlandIslands, x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(SouthShetlandIslands, x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(A, B) & LocatedIn(B, C) -> LocatedIn(A, C))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocationOfCoveInAntarctica(x) & NameOfPlaceInBulgaria(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> (Barutin(x) & Settlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Location(x) -> (BarutinCove(x) & SnowIsland(x)))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x) -> (SouthShetlandIslands(x) & Island(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (Considered(x) -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (Location(x) -> (B(x) & C(x)) -> Location(x)\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Location(x) -> (Antarctica(x) & (BarutinCove(x) & PlaceInBulgaria(x))))\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> (BarutinCove(x) & BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Location(x) -> (BarutinCove(x) & SnowIsland(x)))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x) -> (SouthShetlandIslands(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x) -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (Location(A) & Location(B) & Location(C) -> (A in C & B in C))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Location(x) & Name(x) -> (Antarctica(x) & BulgarianPlace(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> Barutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x) & BarutinCove(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Island(x) -> SouthShetlandIslands(x) & (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (Antarctica(x) -> SouthShetlandIslands(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (Location(A) & Location(B) -> Location(C) & (A in B & B in C))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Cove(x) & PlaceInBulgaria(x))\n</EVALUATE>"
   ],
   [
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: named(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: located(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: considers(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if(A is located in B & B is located in C) then A is located in C\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists(at least one cove in Antarctica, named after a place in Bulgaria)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> SettlementOfBarutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (LocationOfCove(x) -> SouthwestCoastOfSnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(SouthShetlandIslands, x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(SouthShetlandIslands, x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocationOfA(x) & LocationOfB(y) & LocationOfC(x) -> LocationOfAInC(y))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NameOfCove(x) & PlaceInBulgaria(x) -> Antarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Barutin\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (Island(x) & (Snow Island(x) | Greenwich Island(x) | Deception Island(x))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (Island(x) & PartOf(x, \"Antarctica\"))))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NamedAfter(x, \"Bulgaria\") & LocatedIn(\"Antarctica\", x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> SettlementOfBarutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (LocationOfCove(x) -> SouthwestCoastOfSnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Inclusion(x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocationInB(x) & LocationInB(y) -> LocationInC(x))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NameOfCove(x) -> PlaceInBulgaria(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> Barutin(x) & Settlement(x) -> Bulgarian(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Location(x) -> SouthwestCoast(x) & Island(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Inclusion(x) -> SouthShetlandIslands(x) -> Island(x) -> SnowIsland(x) & Island(x) -> GreenwichIsland(x) & Island(x) -> DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (Consideration(x) -> SouthShetlandIslands(x) -> Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (Location(x) -> B(x) & Location(x) -> C(x) -> Location(x) -> C(x))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Location(x) -> Cove(x) & Name(x) -> PlaceInBulgaria(x))\n\n</EVALUATE>"
   ],
   [
    "  Sure, I'd be happy to help you with that! Here's the FOL translation for each sentence in SENTENCES:\n\n<EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (LocationOfCove(x) -> SouthwestCoast(x) & Island(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (IncludedInSouthShetlandIslands(x) -> Island(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (PartOfAntarctica(x) -> IncludedInSouthShetlandIslands(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedInB(x) & LocatedInB(y) -> LocatedInC(x y))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NamedAfterBulgaria(x) & InAntarctica(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> (Barutin(x) & BulgarianSettlement(x)))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> (BarutinCove(x) & SnowIsland(x)))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x) -> (SouthShetlandIslands(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x) -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(A, B) & LocatedIn(B, C) -> LocatedIn(A, C))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (CoveInAntarctica(x) & NamedAfterBulgarianPlace(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NameOfCove(x) -> Settlement(x) -> Barutin(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (LocationOfCove(x) -> Island(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, TheSouthShetlandIslands) -> Island(x) -> SnowIsland(x) & Island(x) -> GreenwichIsland(x) & Island(x) -> DeceptionIsland(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, TheSouthShetlandIslands) -> PartOf(x, Antarctica))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocationOfA(x) & LocationOfB(y) -> LocationOfC(x))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NameOfCove(x) -> PlaceInBulgaria(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> (BarutinCove(x) & BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Location(x) -> (BarutinCove(x) & SnowIsland(x)))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x) -> (SouthShetlandIslands(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x) -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (Location(x) & Location(y) -> (Location(z) -> (x in z & y in z)))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Cove(x) & PlaceInBulgaria(x) -> Antarctica(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (Name(x) -> (Barutin(x) & BulgarianSettlement(x)))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> (BarutinCove(x) & SnowIsland(x)))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x) -> (SouthShetlandIslands(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (Considered(x) -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (Location(A) & Location(B) & Location(C) -> (A in C | B in C | C in A))\n\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Cove(x) & BulgarianPlace(x) -> Antarctica(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 103,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SouthwestCoast(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: contains(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if(locatedIn(A, B) & locatedIn(B, C), locatedIn(A, C))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(locatedIn(Barutin, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x, \"Barutin\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & Southwest(x) -> Location(x, \"Snow Island\"))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: exists x y. (SouthShetlandIslands(x) & Island(y) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIslands(x) & Antarctica(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (Location(A, x) & Location(B, y) & Location(C, x) -> Location(A, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: -Location(Barutin, Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SnowIsland(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> SouthShetlandIslands(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocationIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Barutin\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x)) & (SnowIsland(x) -> Coast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"SouthShetlandIslands\") -> Island(x)) & exists x. (Island(x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> PartOf(x, \"Antarctica\"))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (LocatedIn(x, y) -> LocatedIn(y, x))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: contains(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if(locatedIn(A, B), locatedIn(B, C), locatedIn(A, C))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(locatedIn(Barutin, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Barutin\") & x)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SnowIsland(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (SouthShetlandIslands(x) & x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: all x. (LocatedIn(barutin, antarctica) -> -barutin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x, \"Barutin\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SnowIsland(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SouthwestCoast(x) -> BarutinCove(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Barutin\") & x)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> Southwest(x) & SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (SouthShetlandIslands(x) & x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocationIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not exists x. (LocatedIn(x, \"Antarctica\") & x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: contains(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if (locatedIn(A, B) & locatedIn(B, C)) then locatedIn(A, C)\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(locatedIn(Barutin, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: exists x y. (SouthShetlandIslands(x) & Island(y) -> (SnowIsland(x) & GreenwichIsland(y) & DeceptionIsland(x y)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (PartOf(x, \"Antarctica\") -> SouthShetlandIslands(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> (LocatedIn(y, x) -> C(x)))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not LocatedIn(Barutin, Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x, \"Barutin\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x) & Island(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Island(x) -> SouthShetlandIsland(x) & x in {SnowIsland, GreenwichIsland, DeceptionIsland})\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (Island(x) -> PartOfAntarctica(x) & x in {SouthShetlandIslands})\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x) & x in C & y in B)\n\nTEXT: Barutin is not located in Antarctica.\nFOL: none x. (LocatedIn(x, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Barutin\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x)) & (SnowIsland(x) -> Coast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (SouthShetlandIslands(x) & Antarctica(x)))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x. (LocatedIn(x, y) -> (LocatedIn(y, x) -> x))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedOn(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: considers(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(A, B) & LocatedIn(B, C)) -> LocatedIn(A, C)\n\nTEXT: Barutin is not located in Antarctica.\nFOL: notLocatedIn(Barutin, Antarctica)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Barutin\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"South Shetland Islands\") -> (Include(x, \"Snow Island\") & Include(x, \"Greenwich Island\") & Include(x, \"Deception Island\"))))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> (PartOf(x, \"Antarctica\") & IsLocatedIn(x, \"South Shetland Islands\"))))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) -> LocatedIn(y, x))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, \"Antarctica\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: named(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: located(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland & GreenwichIsland & DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: considers(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (located(A, B) & located(B, C)) -> located(A, C)\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(located(Barutin, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: isPartOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if(locatedIn(A, B) & locatedIn(B, C), locatedIn(A, C))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(locatedIn(Barutin, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x) -> \"Barutin\")\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> Southwest(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Include(x, \"SouthShetlandIslands\") -> Island(x) -> \"SnowIsland\") | exists x. (Include(x, \"SouthShetlandIslands\") -> Island(x) -> \"GreenwichIsland\") | exists x. (Include(x, \"SouthShetlandIslands\") -> Island(x) -> \"DeceptionIsland\")\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> PartOf(x, \"SouthShetlandIslands\")\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not LocatedIn(Barutin, \"Antarctica\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedIn(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if (A locatedIn B & B locatedIn C) then A locatedIn C\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(locatedIn(Barutin, Antarctica))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> BulgarianSettlement(x))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) & SouthwestCoast(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"South Shetland Islands\") -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> SouthShetlandIslands(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: all x. (-LocatedIn(x, \"Antarctica\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: named(BarutinCove, BarutinSettlement)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: located(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (located(A, B) & located(B, C)) -> located(A, C)\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(located(Barutin, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(BarutinCove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedOn(BarutinCove, SnowIsland)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: includes(SouthShetlandIslands, SnowIsland & GreenwichIsland & DeceptionIsland)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: isPartOf(SouthShetlandIslands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: if (A is located in B) & (B is located in C) then A is located in C\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(locatedIn(Barutin, Antarctica))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: all x. (NamedAfter(x, \"Barutin\") -> Settlement(x, \"Barutin\"))\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: all x. (Coast(x) -> SouthwestCoast(x) & Island(x) -> SnowIsland(x))\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (Includes(x, \"SouthShetland Islands\") -> Island(x) -> SnowIsland(x) & Island(x) -> GreenwichIsland(x) & Island(x) -> DeceptionIsland(x))\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (ConsideredPartOf(x, \"Antarctica\") -> Island(x) -> SouthShetlandIslands(x))\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, x) -> LocatedIn(x, y))\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not exists x. (LocatedIn(x, \"Antarctica\") -> Barutin(x))\n\n</EVALUATE>",
    "  Sure, here is the FOL evaluation for the given sentences:\n\n<EVALUATE>\n\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: namedAfter(Barutin Cove, Barutin)\n\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: locatedOn(Barutin Cove, Snow Island)\n\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: contains(South Shetland Islands, Snow Island & Greenwich Island & Deception Island)\n\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: partOf(South Shetland Islands, Antarctica)\n\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (A locatedIn B & B locatedIn C) -> (A locatedIn C)\n\nTEXT: Barutin is not located in Antarctica.\nFOL: not(locatedIn(Barutin, Antarctica))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 104,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  Sure, here's how you can translate the given sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>\n\nIn FOL, the `some` quantifier is represented by the keyword `some`. The `->` operator is used to define the relationship between the quantifier and the predicate. For example, `some x. (Affection(x) -> Love(x))` means that for some value of `x`, if `x` is an affection, then `x` is a love."
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: all x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: all x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: all x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some affection is love.\nFOL: some x. (Affection(x) -> Love(x))\n\nTEXT: Some love is positive.\nFOL: some x. (Love(x) -> Positive(x))\n\nTEXT: Some affection is positive.\nFOL: some x. (Affection(x) -> Positive(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 105,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airlines(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Planes(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Planes(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airlines(x) & Greyhound(x)) -> -Planes(x)\n\nTEXT: Greyhound is an airline.\nFOL: Airlines(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x) & Greyhound(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airlines(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Planes(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Planes(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airlines(x) & Greyhound(x) & -Planes(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airlines(greyhound)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airlines(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Planes(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Planes(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airlines(x) & Greyhound(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airlines(greyhound)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>\"\n\nPlease let me know if you have any questions or need further clarification.",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>"
   ],
   [
    "  \"<EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airlines(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Planes(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Planes(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airlines(x) & Greyhound(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airlines(greyhound)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airlines(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Planes(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Planes(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airlines(x) & Greyhound(x)) -> -Planes(x)\n\nTEXT: Greyhound is an airline.\nFOL: Airlines(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 106,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) -> Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: -Airline(Greyhound) & Boeing707(Greyhound)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Boeing707(x) & Greyhound(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: -Airline(Greyhound) & Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is a Boeing 707.\nFOL: exists x. (Greyhound(x) & Boeing707(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 107,
  "responses": [
   [
    "  \"<EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airlines(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Planes(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Planes(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airlines(x) & Greyhound(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>\"\n\nPlease note that in FOL, we use the \"all x\" syntax to indicate that the statement applies to all values of the variable x. Additionally, we use the \"exists x\" syntax to indicate that the statement applies to at least one value of the variable x.",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & -Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) -> -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(Greyhound) & -Plane(Greyhound))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: exists x. (-Airline(x) & Plane(x))\n\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 108,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> (!Fly(rock) &!Breathe(rock))\n\nTEXT: Rock is a monkey.\nFOL: Rock is Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\n\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Rock -> (Not(Fly(x)) & Not(Breathe(x)))))\n\nTEXT: Rock is a monkey.\nFOL: Rock is a Monkey.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -FlyOrBreathe(rock)\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFliesNorBreathes(rock)\n\nTEXT: Rock is a monkey.\nFOL: Rock is Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. Mammal(x) & Monkey(x)\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. Animal(x) -> (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -FlyOrBreathe(Rock)\n\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Nor(Rock, Fly) & Nor(Rock, Bird)) -> (-Fly(Rock) & -Breathe(Rock))\n\nTEXT: Rock is a monkey.\nFOL: Rock is a Monkey. (Monkey(Rock))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Rock -> (Not(Fly(x)) & Not(Breathe(x))))\n\nTEXT: Rock is a monkey.\nFOL: Rock is a Monkey.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Flies(rock) & -Breathes(rock)\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Nor(Rock, Fly) & Nor(Rock, Bird))\n\nTEXT: Rock is a monkey.\nFOL: Rock is Monkey(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> (-Fly(rock) & -Breathe(rock))\n\nTEXT: Rock is a monkey.\nFOL: Rock is Monkey(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird & Rock neither flies nor breathes\n\nTEXT: Rock is a monkey.\nFOL: Rock is a Monkey\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Rock(rock) & -Fly(rock) & -Breathe(rock))\n\nTEXT: Rock is a monkey.\nFOL: Rock is a monkey. (Monkey(rock))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. Mammal(x) & Monkey(x)\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. Animal(x) -> (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -CanFly(rock) & -Bird(rock) -> -Flies(rock) & -Breathes(rock)\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. -Fly(Rock) -Breathe(Rock)\n\nTEXT: Rock is a monkey.\nFOL: Rock = Monkey(Rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFlyNorBreathe(rock)\n\nTEXT: Rock is a monkey.\nFOL: Rock is Monkey(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Nor(Rock, Fly) & Nor(Rock, Bird) -> (!Fly(Rock) &!Breathe(Rock)))\n\nTEXT: Rock is a monkey.\nFOL: Rock is a Monkey. (Monkey(Rock) -> True)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\n\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 109,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has wings.\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. -CanFly(Rock) & -Breathe(Rock)\n\nTEXT: Rock has wings.\nFOL: Rock has wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) & Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFly(rock) & NeitherBreathe(rock)\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) & Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFly(rock) & NeitherBreathe(rock)\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFliesNorBreathes(rock)\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has wings.\n\n</EVALUATE>",
    "  Sure, I can help you with that! Here's the FOL translation for each sentence in the SENTENCES list:\n\n<EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(x)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFliesNorBreathes(rock)\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(x) nor Bird(x) -> NeitherFlyNorBreathe(Rock)\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -FlyOrBreathe(rock)\n\nTEXT: Rock has wings.\nFOL: Wings(rock)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFlyNorBreathe(rock)\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) & Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly nor Bird.\n\nTEXT: Rock has wings.\nFOL: Rock has Wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -FlyOrBreathe(rock)\n\nTEXT: Rock has wings.\nFOL: Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) & Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFly(rock) & NeitherBreathe(rock)\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Flies(rock) & -Breathes(rock)\n\nTEXT: Rock has wings.\nFOL: Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. Mammal(x) -> Monkey(x)\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFlyNorBreathe(rock)\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. Mammal(x) & Monkey(x)\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: exists x. (-Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock)))\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock has wings.\nFOL: Rock has Wings(rock)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 110,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: exists x. (-Fly(x) & -Bird(x) & Rock(x) -> (-Fly(x) & -Breathe(x)) | (-Bird(x) & Rock(x) -> (-Fly(x) & -Breathe(x))))\n\nTEXT: Rock does not have wings.\nFOL: Rock does not have Wings(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFlyNorBreathe(rock)\n\nTEXT: Rock does not have wings.\nFOL: Rock hasNoWings()\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Rock -> (Not(Fly) & Not(Bird)))\n\nTEXT: Rock does not have wings.\nFOL: Rock has no wings. (Wings(rock) -> False)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Flies(rock) & -Breathes(rock)\n\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) & Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. Mammal(x) & Monkey(x)\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Rock -> neither Fly nor Bird) & (!Fly(Rock) &!Breathe(Rock))\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) -> Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFlyNorBreathe(rock)\n\nTEXT: Rock does not have wings.\nFOL: Rock hasNoWings()\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFliesNorBreathes(rock)\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my answer:\n\n<EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. Mammal(x) & Monkey(x)\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. Animal(x) -> (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: exists x. (-Fly(x) & -Bird(x) & Rock(x))\n\nTEXT: Rock does not have wings.\nFOL: Rock -> -Wings(Rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> NeitherFly(rock) & NeitherBreathe(rock)\n\nTEXT: Rock does not have wings.\nFOL: Rock hasNoWings()\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither Fly(rock) nor Bird(rock) -> (!Fly(rock) &!Breathe(rock))\n\nTEXT: Rock does not have wings.\nFOL: Rock hasNoWings()\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: exists x. (Fly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\n\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: exists x. (Monkey(x) | Bird(x))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock is neither a fly nor a bird. (Rock -> (Not(Fly) & Not(Breathe)))\n\nTEXT: Rock does not have wings.\nFOL: Rock has no wings. (Wings(rock) -> False)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: exists x. (Mammal(x) & Monkey(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\n\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\n\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\n\nTEXT: If something can fly, then it has wings.\nFOL: all x. (CanFly(x) -> Wings(x))\n\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: Rock neither flies nor breathes.\n\nTEXT: Rock does not have wings.\nFOL: Rock has no Wings.\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 111,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> WeddingInJuly(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. ((WeddingInJuly(x) & WellAttended(x)) -> (TravelToParisForHoneymoon(x) | -Wedding(x)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParis(john) & -Married(john)) | (-HasChild(john) & TravelToParis(john) & -Married(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WellAttended(john) & -JulyWedding(john)) | (-WellAttended(john) & JulyWedding(john) & TravelToParis(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) &!TravelToParisHoneymoon(john)) &!Married(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WellAttended(john) & Married(john)) -> (JulyWedding(john) | TravelToParisHoneymoon(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) -> -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WeddingInJuly(john) | -WellAttended(john) -> -TravelToParisForHoneymoon(john) | -Wedding(john)\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingInJuly(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -TravelToParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & Married(john)) -> (JulyWedding(john) | TravelToParis(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & Married(john)) -> (JulyWedding(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttended(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParisForHoneymoon(john)) & (-HasChild(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingInJuly(john) & -WellAttended(john)) | (-WeddingInJuly(john) & WellAttended(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingInJuly(john) & WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) -> -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> -WeddingInJuly(john) | -WellAttended(john) -> TravelToParisForHoneymoon(john)\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttendedWell(john) -> WeddingInJuly(john)) | (-WeddingAttendedWell(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttendedWell(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HasWedding(x) -> HasAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccursInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccursInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. (HasWedding(john) & WellAttended(john)) -> (HasWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. ((WeddingAttendedWell(john) & WeddingInJuly(john)) | (-WeddingAttendedWell(john) & -WeddingInJuly(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttendedWell(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -HoneymoonInParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & WeddingInJuly(john)) | (-WeddingAttended(john) & TravelToParis(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (Child(john) & -TravelToParisForHoneymoon(john) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & WeddingInJuly(john)) | (-WeddingAttended(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParisForHoneymoon(john)) | (-HasChild(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttendedWell(john) -> WeddingInJuly(john)) | (-WeddingAttendedWell(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttendedWell(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WeddingInJuly(john) | -WellAttended(john) -> (TravelToParisForHoneymoon(john) | WeddingInJuly(john))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingInJuly(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -TravelToParis(john) & -Wedding(john)) | (-Child(john) & TravelToParis(john) & Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttendedWell(john) -> WeddingInJuly(john)) | (-WeddingAttendedWell(john) & TravelToParis(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttendedWell(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (-Child(john) -> -HoneymoonInParis(john) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingInJuly(john) & WellAttended(john)) -> (HoneymoonInParis(john) | -Wedding(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingInJuly(john) & WellAttended(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (Honeymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Honeymoon(x) -> Wedding(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & Wedding(x) -> Attended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (-Child(john) -> (-TravelToParis(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & Attended(john)) -> (July(john) & TravelToParis(john) | -July(john) & -TravelToParis(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: Attended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & WeddingInJuly(john)) | (-WeddingAttended(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttended(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -HoneymoonInParis(john) & -Married(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (JulyWedding(john) | HoneymoonInParis(john))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (-Child(john) & TravelToParisForHoneymoon(john) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & WeddingInJuly(john)) | (-WeddingAttended(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WeddingAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john)) -> (July(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (Honeymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Honeymoon(x) -> Wedding(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParis(john) -> -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -Wedding(john) -> -July(john) | -Wedding(john) -> TravelToParis(john)\n\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) -> WellAttended(john)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 112,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. (WeddingAttendedWell(x) -> (WeddingInJuly(x) | TravelToParisForHoneymoon(x)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WeddingAttendedWell(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WeddingInJuly(john) -> -TravelToParisForHoneymoon(john) | -WeddingInJuly(john) -> TravelToParisForHoneymoon(john)\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasAtLeastOneChild(john) & -TravelToParisForHoneymoon(john)) | (-HasAtLeastOneChild(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttendedWell(john) & -WeddingInJuly(john)) | (-WeddingAttendedWell(john) & -TravelToParisForHoneymoon(john)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WeddingAttendedWell(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParis(john) & -Married(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Married(john) & WellAttended(john) -> (JulyWedding(john) | TravelToParis(john)))))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: no x. (WellAttended(john) -> -Married(john))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (Child(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & WeddingInJuly(john)) -> (TravelToParisForHoneymoon(john) | -WeddingInJuly(john)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WeddingAttended(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> WeddingInJuly(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingInJuly(x) & WellAttended(x)) -> (Wedding(x) & TravelToParisForHoneymoon(x)) | (-WeddingInJuly(x) & WellAttended(x)) -> (-Wedding(x) & -TravelToParisForHoneymoon(x)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WeddingInJuly(john) & -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccurInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccurInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (HaveChild(john) & TravelToParisForHoneymoon(john) & HaveWedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((HaveWedding(john) & WellAttended(john)) -> (HaveWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (Honeymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Honeymoon(x) -> Wedding(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -TravelToParis(john) & -Wedding(john)) | (-Child(john) & TravelToParis(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john) -> (July(john) | -July(john))) | (-Wedding(john) & WellAttended(john) -> (TravelToParis(john) | -TravelToParis(john))))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & July(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParisForHoneymoon(john)) | (-HasChild(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john)) -> (July(john) | -TravelToParisForHoneymoon(john)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -HoneymoonInParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. ((WeddingAttended(john) & Wedding(john)) -> (JulyWedding(john) | HoneymoonInParis(john)) | (-WeddingAttended(john) & -Wedding(john)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WeddingAttended(john) & -Wedding(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingInJuly(x) & WellAttended(x)) -> (Wedding(x) & TravelToParisForHoneymoon(x)) | (-WeddingInJuly(x) & WellAttended(x)) -> (-Wedding(x) & -TravelToParisForHoneymoon(x)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (HasChild(john) & HoneymoonInParis(john) & Married(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((HasWedding(john) & WellAttended(john)) -> (JulyWedding(john) | HoneymoonInParis(john)))))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParisForHoneymoon(john)) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john)) -> (July(john) & TravelToParisForHoneymoon(john)) | (-Wedding(john) & -WellAttended(john)) & TravelToParisForHoneymoon(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (Honeymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Honeymoon(x) -> Wedding(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (July(john) & Wedding(john)) | (NotJuly(john) & TravelToParis(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccurInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccurInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HaveAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HaveWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: if -HaveWedding(john) & WellAttended(john) then -HaveWeddingInJuly(john) or -TravelToParisForHoneymoon(john)\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (Honeymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Honeymoon(x) -> Wedding(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & Wedding(x) -> Attended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -Attended(john) -> (July(john) & Wedding(john) | -July(john) & TravelToParis(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Attended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> WeddingInJuly(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. (WeddingInJuly(x) -> (WellAttended(x) -> Wedding(x)) | (WellAttended(x) -> TravelToParisForHoneymoon(x)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -TravelToParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -HasChild(john) -> -Wedding(john) & (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -HasChild(john) -> -WeddingAttended(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) & TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. (Wedding(john) & WellAttended(john) -> (July(john) | -July(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -HoneymoonInParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -HasChild(john) -> -Wedding(john) & (WeddingInJuly(john) | HoneymoonInParis(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -HasChild(john) -> -Wedding(john) & -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingInJuly(john) & WellAttended(john)) -> (Wedding(john) & TravelToParisForHoneymoon(john)) | (-WeddingInJuly(john) & -WellAttended(john) & Wedding(john) & -TravelToParisForHoneymoon(john)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -HoneymoonInParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (WeddingInJuly(john) | HoneymoonInParis(john))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & Married(john)) -> (JulyWedding(john) | TravelToParisForHoneymoon(john)))\n\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WeddingAttended(john)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 113,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParisForHoneymoon(john)) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john)) -> (July(john) | TravelToParisForHoneymoon(john)) )\n\nTEXT: John has at least one child.\nFOL: exists x. (Child(john) & HasChild(john))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -HoneymoonInParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WeddingInJuly(john) | -WellAttended(john) -> HoneymoonInParis(john)\n\nTEXT: John has at least one child.\nFOL: Child(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: some x. (WeddingInJuly(x) -> Attended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: John. Child(John). -TravelToParisForHoneymoon(John). -Wedding(John)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: John. WeddingInJuly(John). -Attended(John). -TravelToParisForHoneymoon(John)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -Child(john) & WeddingInJuly(john) -> TravelToParisForHoneymoon(john) | -Child(john) & -WeddingInJuly(john) -> TravelToParisForHoneymoon(john)\n\nTEXT: John has at least one child.\nFOL: Child(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has at least one child.\nFOL: Child(john)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (Child(john) & -TravelToParisForHoneymoon(john) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & WeddingInJuly(john)) | (-WeddingAttended(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has at least one child.\nFOL: Child(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParisForHoneymoon(john)) & (-HasChild(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttendedWell(john) & WeddingInJuly(john)) | (-WeddingAttendedWell(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has at least one child.\nFOL: HasChild(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has at least one child.\nFOL: Child(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> WeddingInJuly(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & WeddingInJuly(john)) -> (TravelToParisForHoneymoon(john) | -WeddingInJuly(john)) | (-WeddingAttended(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has at least one child.\nFOL: Child(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WeddingInJuly(john) | -Wedding(john) -> (TravelToParisForHoneymoon(john) & WeddingInJuly(john)) | (TravelToParisForHoneymoon(john) & -WeddingInJuly(john))\n\nTEXT: John has at least one child.\nFOL: Child(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: some x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -TravelToParisForHoneymoon(john)) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john)) -> (July(john) & TravelToParisForHoneymoon(john)) | (-Wedding(john) & -TravelToParisForHoneymoon(john)))\n\nTEXT: John has at least one child.\nFOL: exists x. (Child(x) & John(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. ((WeddingAttended(john) & WeddingInJuly(john)) | (-WeddingAttended(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has at least one child.\nFOL: Child(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. (WeddingAttendedWell(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has at least one child.\nFOL: Child(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> -WeddingInJuly(john) | -WeddingInJuly(john) -> TravelToParisForHoneymoon(john)\n\nTEXT: John has at least one child.\nFOL: Child(john)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: if HasWeddingThatIsWellAttended(john) then exists x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x)) or exists x. (July(x) & Wedding(x) -> DoesNotTravelToParisForHoneymoon(x))\n\nTEXT: John has at least one child.\nFOL: HasChild(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -Wedding(john) -> -July(john) | -Wedding(john) -> -TravelToParisForHoneymoon(john)\n\nTEXT: John has at least one child.\nFOL: Child(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HasWedding(x) -> HasAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccursInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccursInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -HasWedding(john) & WellAttended(john) -> (HasWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HasWedding(x) -> HasAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccursInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccursInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -HasWedding(john) -> (HasWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (Honeymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Honeymoon(x) -> Wedding(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -TravelToParis(john) & -Wedding(john)) | (-Child(john) & TravelToParis(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john) -> WeddingInJuly(john)) | (-Wedding(john) & WellAttended(john) -> TravelToParis(john)))\n\nTEXT: John has at least one child.\nFOL: exists x. (Child(john) | -Child(john))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccurInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccurInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HaveAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HaveWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> -HaveWeddingInJuly(john) | -HaveWeddingInJuly(john) -> TravelToParisForHoneymoon(john)\n\nTEXT: John has at least one child.\nFOL: HaveAtLeastOneChild(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & July(x) & -WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) & -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (July(john) & Wedding(john) | -July(john) & TravelToParisForHoneymoon(john))\n\nTEXT: John has at least one child.\nFOL: HasChild(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> WeddingInJuly(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingInJuly(john) & WellAttended(john)) -> (TravelToParisForHoneymoon(john) | Wedding(john)))\n\nTEXT: John has at least one child.\nFOL: Child(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> -July(john) | -WellAttended(john) -> -TravelToParisForHoneymoon(john)\n\nTEXT: John has at least one child.\nFOL: Child(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccurInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccurInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (HaveAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HaveWedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((HaveWedding(john) & WellAttended(john)) -> (HaveWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has at least one child.\nFOL: HaveAtLeastOneChild(john)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 114,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (HasChild(john) -> -HoneymoonInParis(john) & -Married(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((HasWedding(john) & WellAttended(john)) -> (JulyWedding(john) | HoneymoonInParis(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: all x. (-HasWedding(john) & -HoneymoonInParis(john))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (-Child(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john)) -> (July(john) | TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: all x. (-Wedding(john) & -TravelToParisForHoneymoon(john))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) & TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -TravelToParisForHoneymoon(john)) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & WeddingInJuly(john)) | (-WeddingAttended(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WeddingAttended(john) & -TravelToParisForHoneymoon(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -TravelToParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & Married(john)) -> (JulyWedding(john) | TravelToParis(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WeddingAttended(john) & -TravelToParis(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & July(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasAtLeastOneChild(john) & -TravelToParisForHoneymoon(john)) | (-HasAtLeastOneChild(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john)) -> (July(john) | -TravelToParisForHoneymoon(john))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HasAtLeastOneChild(john) & -Wedding(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -TravelToParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & Married(john)) -> (JulyWedding(john) | TravelToParis(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WeddingAttended(john) & -TravelToParis(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -TravelToParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (JulyWedding(john) & TravelToParis(john)) | (-WellAttended(john) & -JulyWedding(john) & -TravelToParis(john))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HasChild(john) & -WellAttended(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccurInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccurInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HaveAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HaveWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. ((HaveWedding(john) & WellAttended(john)) -> (HaveWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HaveWedding(john) & -TravelToParisForHoneymoon(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (HasChild(john) & -HoneymoonInParis(john) & -Married(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((HasWedding(john) & WellAttended(john)) -> (JulyWedding(john) | HoneymoonInParis(john)))))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HasWedding(john) & -HoneymoonInParis(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HaveAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HaveWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. ((HaveWedding(john) & WellAttended(john)) -> (HaveWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HaveWedding(john) & -TravelToParisForHoneymoon(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. (Wedding(john) & WellAttended(john) -> (July(john) & TravelToParisForHoneymoon(john)) | (-Wedding(john) & -WellAttended(john) -> TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HasChild(john) & -TravelToParisForHoneymoon(john) & -Wedding(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (Honeymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Honeymoon(x) -> Wedding(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -TravelToParis(john) & -Wedding(john)) | (-Child(john) & TravelToParis(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john) -> (July(john) | -July(john))) | (-Wedding(john) & WellAttended(john) -> (TravelToParis(john) | -TravelToParis(john))))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -Wedding(john) & -TravelToParis(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HaveAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HaveWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. ((HaveWedding(john) & WellAttended(john)) -> (HaveWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HaveWedding(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) & TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (Child(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) -> (WeddingInJuly(john) | TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WeddingAttended(john) & -TravelToParisForHoneymoon(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (OccurInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (OccurInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HaveAtLeastOneChild(john) & -TravelToParisForHoneymoon(john)) | (-HaveAtLeastOneChild(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((HaveWedding(john) & WellAttended(john)) -> (HaveWeddingInJuly(john) | TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: none x. (WellAttended(john) & TravelToParisForHoneymoon(john))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. (WeddingInJuly(john) & WellAttended(john) -> (TravelToParisForHoneymoon(john) | -WeddingInJuly(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -Child(john) & -WeddingInJuly(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -HoneymoonInParis(john) & -Married(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Married(john) & WellAttended(john)) -> (JulyWedding(john) | HoneymoonInParis(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -HoneymoonInParis(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -Child(john) -> -TravelToParisForHoneymoon(john) -> -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: exists x. (Wedding(john) & WellAttended(john) -> (July(john) | -July(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -HoneymoonInParis(john)) | (-Child(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingInJuly(john) & -WellAttended(john)) | (-WeddingInJuly(john) & WellAttended(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WeddingInJuly(john) & -HoneymoonInParis(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HaveAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HaveWedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -WellAttended(john) -> (HaveWeddingInJuly(john) | TravelToParisForHoneymoon(john))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HaveWeddingInJuly(john) & -TravelToParisForHoneymoon(john)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) -> WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -TravelToParisForHoneymoon(john) & -Wedding(john)) | (-Child(john) & TravelToParisForHoneymoon(john) & Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingInJuly(john) & WeddingWellAttended(john)) -> (TravelToParisForHoneymoon(john) | -WeddingInJuly(john)) | (-WeddingWellAttended(john) & TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WeddingInJuly(john) & -TravelToParisForHoneymoon(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. (Child(john) -> -HoneymoonInParis(john) & -Married(john))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WellAttended(john) & Married(john)) -> (JulyWedding(john) | HoneymoonInParis(john)))))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -HoneymoonInParis(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> Child(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (Wedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((Child(john) & -TravelToParisForHoneymoon(john)) & (-Child(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((Wedding(john) & WellAttended(john)) -> (July(john) & TravelToParisForHoneymoon(john)) | (-Wedding(john) & -WellAttended(john)) -> (-July(john) & -TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -Wedding(john) & -TravelToParisForHoneymoon(john)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) & Wedding(x) -> TravelToParisForHoneymoon(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: all x. ((HasChild(john) & -TravelToParisForHoneymoon(john)) | (-HasChild(john) & -Wedding(john)))\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: all x. ((WeddingAttended(john) & -July(john)) | (-WeddingAttended(john) & -TravelToParisForHoneymoon(john)))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WeddingAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Married(x) -> HasChild(x))\n\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (HoneymoonInParis(x) -> Married(x))\n\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> HoneymoonInParis(x))\n\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\n\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasChild(john) -> -Married(john) & -TravelToParis(john) & -Wedding(john)\n\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: -HasChild(john) & -WeddingIsWellAttended(john) -> Or(WeddingInJuly(john) & TravelToParis(john))\n\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -HasChild(john) & -WeddingIsWellAttended(john) & -TravelToParis(john)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 115,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. ((Mammal(x) & NoTeeth(x)) & Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & Platypus(x) -> NoTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & Platypus(x) -> NoTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & NoTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. ((Mammal(x) & NoTeeth(x)) & Platypus(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & NoTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. ((Mammal(x) & NoTeeth(x)) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & NoTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. ((Mammal(x) & NoTeeth(x)) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & NoTeeth(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. ((Mammal(x) & NoTeeth(x)) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & NoTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. ((Mammal(x) & NoTeeth(x)) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & NoTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. ((Mammal(x) & NoTeeth(x)) & Platypus(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & -HasTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> HasTeeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. (Mammal(x) & Platypus(x) -> -HasTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. ((Mammal(x) & NoTeeth(x)) -> Platypus(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. ((Mammal(x) & NoTeeth(x)) -> Platypus(x))\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: all x. (Platypus(x) -> -Teeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Platypus(x) -> Mammal(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Platypus(x) & -Teeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & -HasTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> HasTeeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & Platypus(x) -> -HasTeeth(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & -HasTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> HasTeeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. ((Mammal(x) & Platypus(x)) -> -HasTeeth(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x) & Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. ((Mammal(x) & NoTeeth(x)) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: exists x. ((Mammal(x) & NoTeeth(x)) & Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\n\nTEXT: Platypus are mammals with no teeth.\nFOL: all x. (Mammal(x) & NoTeeth(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 116,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: all x. (Reptile(x) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Reptile(x) -> Platypus(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Reptile(x) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) -> Reptile(platypus)\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Reptile(x) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & -HasTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> HasTeeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Platypus(x) -> Reptile(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Reptile(x) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x) -> - Platypus(x))\n\nTEXT: Platypus are mammals.\nFOL: Platypus(x) -> Mammal(x)\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> HasTeeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) -> -Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) -> Reptile(platypus)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) -> Reptile(platypus)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x) -> -Teeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x) -> Human(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) -> Reptile(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: all x. (Reptile(x) -> Platypus(x))\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Reptile(x) -> Platypus(x))\n\n</EVALUATE>\n\nPlease let me know if you have any questions or if you'd like me to translate any other sentences!",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: all x. (Reptile(x) -> Platypus(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Humans(x) & Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Reptiles(x) & Platypus(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) -> Reptile(platypus)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & -HasTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: exists x. (Mammal(x) & Human(x) -> HasTeeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Reptile(x))\n\n</EVALUATE>",
    "  Sure! Here's the translation of the given sentences:\n\n<EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: exists x. (Mammal(x) & Reptile(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Platypus are reptiles.\nFOL: all x. (Reptile(x) -> Platypus(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 117,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & -HasTeeth(x) & Platypus(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Human(x) -> HasTeeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> HasTeeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Humans(x) -> Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Humans(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & HasTeeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & -HasTeeth(x) & Platypus(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Human(x) -> HasTeeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Humans(x) -> Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Humans(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Humans(x) -> Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Humans(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & -HasTeeth(x) & Platypus(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Human(x) -> HasTeeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. Platypus(x) & -HasTeeth(x)\n\nTEXT: Platypus are mammals.\nFOL: Platypus(x) -> Mammal(x)\n\nTEXT: Humans have teeth.\nFOL: Humans(x) -> HasTeeth(x)\n\nTEXT: Humans are mammals.\nFOL: Humans(x) -> Mammal(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & HaveTeeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> HasTeeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. Platypus(x) -> HasNoTeeth(x)\n\nTEXT: Platypus are mammals.\nFOL: exists x. Platypus(x) -> IsMammal(x)\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> HasTeeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> IsMammal(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Mammal(x) & Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Mammal(x) -> Human(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some mammals have teeth.\nFOL: all x. (Mammal(x) -> Teeth(x))\n\nTEXT: Platypus have no teeth.\nFOL: exists x. (Mammal(x) & NoTeeth(x))\n\nTEXT: Platypus are mammals.\nFOL: all x. (Mammal(x) -> Platypus(x))\n\nTEXT: Humans have teeth.\nFOL: all x. (Human(x) -> Teeth(x))\n\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 118,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Sucks(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Sucks(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Sucks(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Sucks(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Sucks(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: Space(space) -> Suck(space)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Sucks(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Sucks(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Sucks(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Sucks(x))\n\nTEXT: Space sucks.\nFOL: Space(space) -> Sucks(space)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: Space(space) -> Suck(space)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Sucks(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Sucks(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Sucks(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Sucks(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Sucks(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Sucks(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Sucks(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Sucks(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Sucks(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Sucks(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) -> Suck(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: Space(space) -> Suck(space)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: Space(space) -> Suck(space)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Suck(x))\n\n</EVALUATE>\n\nNote: In FOL, we use the existential quantifier \"exists x\" to indicate that a statement is true for some value of x, but not necessarily for all values of x. We also use the negation operator \"-\" to indicate the opposite of a statement.",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Sucks(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Sucks(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Sucks(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Sucks(x))\n\nTEXT: Space sucks.\nFOL: exists x. (Space(x) & Sucks(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 119,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Sucks(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Sucks(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Sucks(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Sucks(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: Space(space) -> Vacuum(space)\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (HouseholdAppliance(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: Space(space) -> Vampire(space)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) -> Vampire(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: Space(space) -> Vacuum(space)\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: Space(space) -> Vampire(space)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) -> Vampire(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) -> Vampire(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) -> Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) -> Vampire(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) & Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: exists x. (Space(x) -> Vampire(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: Space(space) -> Vacuum(space)\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (HouseholdAppliance(x) & -Suck(x))\n\nTEXT: Space is a vampire.\nFOL: Space(space) -> Vampire(space)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 120,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: exists x. (-HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: exists x. (-HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: exists x. (-HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: exists x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>"
   ],
   [
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> -Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> -Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> -Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> -Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>"
   ],
   [
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my response:\n\n<EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: Space(space) -> Vacuum(space)\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (HouseholdAppliance(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: exists x. (-HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the FOL translation for each sentence:\n\n<EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) & Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) & -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\n\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\n\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\n\nTEXT: Space is a vacuum.\nFOL: exists x. (Space(x) -> Vacuum(x))\n\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: exists x. (Duster(x) -> -Suck(x))\n\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 121,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: LovesChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: all x. (LovedByChildren(ben) -> Funny(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is loved by children.\nFOL: LovesChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: all x. (LovedByChildren(ben) -> Funny(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: all x. (LovedByChildren(ben) -> ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: all x. (LovedByChildren(ben) -> Funny(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: LovesChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is loved by children.\nFOL: lovedByChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: all x. (LovedByChildren(ben) -> ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: LovesChildren(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is loved by children.\nFOL: all x. (LovedByChildren(ben) -> ben)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 122,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben)) or ben\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is ugly or yellow.\nFOL: or (Ugly(ben) & Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben is ugly or yellow.\n\nTEXT: Ben is ugly or yellow.\nFOL: ben is either ugly or yellow.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) & Yellow(ben)) or (not Ugly(ben) & Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: all x. (Ben -> (FromTheSimpsons(x) | Funny(x)))\n\nTEXT: Ben is ugly or yellow.\nFOL: all x. (Ben -> (Ugly(x) | Yellow(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is ugly or yellow.\nFOL: or (Ugly(ben) & Yellow(ben)) or -Yellow(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben is yellow.\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) & -Yellow(ben)) or ben is yellow.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben)) or (not Ugly(ben) & not Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben)) or -Ugly(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (Not(FromTheSimpsons(ben)) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben)) or (Not(Ugly(ben)) & Not(Yellow(ben)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is ugly or yellow.\nFOL: or (Ugly(ben) & Yellow(ben)) or -Yellow(ben)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is ugly or yellow.\nFOL: or (Ugly(ben) & Yellow(ben)) or -Yellow(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or ben\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben)) or ben\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) & Yellow(ben)) or (not Ugly(ben) & Yellow(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is ugly or yellow.\nFOL: either (Ugly(ben) | Yellow(ben))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 123,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: all x. (Ben & -FromTheSimpsons(x) | -Ben & Funny(x))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: all x. (Ben & Yellow(x) & Ugly(x) | -Ben & neither yellow nor ugly)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: all x. (Ben -> (FromTheSimpsons(x) | Funny(x)))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: all x. (Ben -> (YellowAndUgly(x) | NeitherYellowNorUgly(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: all x. (Ben -> (FromTheSimpsons(x) | Funny(x)))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: all x. (Ben -> (YellowAndUgly(x) | NeitherYellowNorUgly(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: exists x. ((FromTheSimpsons(x) & Funny(x)) | (-FromTheSimpsons(x) & Funny(x)))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: exists x. ((Yellow(x) & Ugly(x)) | (-Yellow(x) & -Ugly(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (YellowAndUgly(ben) & -NeitherYellowNorUgly(ben)) or NeitherYellowNorUgly(ben)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or neither (not FromTheSimpsons(ben) & not Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (YellowAndUgly(ben) & NotNeitherYellowNorUgly(ben)) or neither (not YellowAndUgly(ben) & not NotNeitherYellowNorUgly(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: exists x. (FromTheSimpsons(ben) & Funny(ben) | -FromTheSimpsons(ben) & -Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: exists x. (Yellow(ben) & Ugly(ben) | -Yellow(ben) & -Ugly(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: all x. (Ben & (FromTheSimpsons(x) | Funny(x)))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: all x. (Ben & (YellowAndUgly(x) | NeitherYellowNorUgly(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or (not Yellow(ben) & not Ugly(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or -Yellow(ben) & -Ugly(ben)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: exists x. (-FromTheSimpsons(x) & Funny(x))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: exists x. ((-Yellow(x) & Ugly(x)) | (-Yellow(x) & -Ugly(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (YellowAndUgly(ben) & NeitherYellowNorUgly(ben)) or (not YellowAndUgly(ben) & NeitherYellowNorUgly(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (-FromTheSimpsons(ben) & -Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (-FromTheSimpsons(ben) & -Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or (-Yellow(ben) & -Ugly(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (-FromTheSimpsons(ben) & -Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (-FromTheSimpsons(ben) & -Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or (-Yellow(ben) & -Ugly(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: all x. (Ben -> (FromTheSimpsons(x) | Funny(x)))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: all x. (Ben -> (YellowAndUgly(x) | NeitherYellowNorUgly(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or -Yellow(ben) & -Ugly(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -FromTheSimpsons(ben)\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or -Yellow(ben) & -Ugly(ben)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or -Funny(ben)\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (YellowAndUgly(ben) & NeitherYellowNorUgly(ben)) or -NeitherYellowNorUgly(ben)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: all x. (Ben & (FromTheSimpsons(x) | Funny(x)))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: all x. (Ben & (YellowAndUgly(x) | NeitherYellowNorUgly(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (not FromTheSimpsons(ben) & Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (YellowAndUgly(ben) & NeitherYellowNorUgly(ben)) or (not YellowAndUgly(ben) & NeitherYellowNorUgly(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> NotPopular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or neither (not FromTheSimpsons(ben) & not Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (YellowAndUgly(ben) & NotNeitherYellowNorUgly(ben)) or neither (not YellowAndUgly(ben) & not NotNeitherYellowNorUgly(ben))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (-FromTheSimpsons(ben) & -Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\n\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\n\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\n\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\n\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\n\nTEXT: Ben is either from The Simpsons or funny.\nFOL: either (FromTheSimpsons(ben) & Funny(ben)) or (-FromTheSimpsons(ben) & -Funny(ben))\n\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: either (Yellow(ben) & Ugly(ben)) or (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 124,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) -> ResembleAurochs(x))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x))\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(x) -> HeckCattle(x) -> 1920s(x) -> Aurochs(x))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (AnimalsToBeBredBack(x) -> ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-HeckCattle(x) & ArtificiallySelected(x))\n\n</EVALUATE>\n\nNote: In FOL, the `exists` keyword is used to indicate the existence of a certain property or relationship between entities. In this case, it is used to indicate the existence of animals that are to be bred-back and resemble extinct animals, as well as Heck cattle that are artificially selected.",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle, 1920) -> ResembleAurochs(heckCattle))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimals))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(heckCattle, x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) -> ResembleAurochs(x))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(heckCattle))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle, 1920) -> ResembleAurochs(heckCattle))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & In1920s(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (MakeBreedingBack(x) -> Resemble(x, ExtinctAnimals(x)))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x) & HeckCattle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) -> Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, ExtinctAnimals(x)))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(heckCattle, x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & In1920s(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (MakeResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(heckCattle))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(1920s) & Aurochs(resemble)\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(are) & Animal(HeckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(are) & Animal(Aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: some x. (Animal(x) & Resemble(x, extinct))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: some x. (HeckCattle(x) & ArtificiallySelected(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(x) -> HeckCattle(x) & ResembleAurochs(x) & 1920s(x))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(x) & HeckCattle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & In1920s(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (MakeBreedingBack(x) & Resemble(x, ExtinctAnimal(x)))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x) & HeckCattle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) -> Aurochs(aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\nTEXT: [BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(heckCattle))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & ResembleAurochs(heckCattle))\n\n[BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\n[BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimal(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(heckCattle))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(1920s) & Aurochs(resemble)\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(are) & Animals(HeckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(are) & Animals(Aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (AnimalsToBeBreedBack(x) & Resemble(x, ExtinctAnimals(x)))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-HeckCattle(x) & ArtificiallySelected(x))\n\n</EVALUATE>"
   ],
   [
    "  Sure, here is the FOL translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(1920s) & Aurochs(resemble)\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(are) & Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(are) & Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (MakeAnimals(x) & ResembleAnimals(x) -> ExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-HeckCattle(x) & ArtificiallySelected(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (MakeResemble(x, extinctAnimals))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(x, HeckCattle))\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(1920s) -> Aurochs -> BredBack(HeckCattle)\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(are) -> Animal(HeckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(are) -> Animal(Aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: some x. (MakeBreedingBack(x) -> Resemble(x, ExtinctAnimals(x)))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: some x. (ArtificiallySelected(x) -> HeckCattle(x))\n\n</EVALUATE>\n\nNote that I've used the `all x` notation to indicate that the FOL statement applies to all instances of the variable `x`.",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle, 1920) -> ResembleAurochs(heckCattle))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(heckCattle))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimals))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x) & HeckCattle(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) -> ResembleAurochs(x))\n\n[BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\n[BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle, 1920) -> ResembleAurochs(heckCattle))\n\n[BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\n[BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & ResembleAurochs(x))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) & Animal(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs) & Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimals))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (-ArtificiallySelected(x) & HeckCattle(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimals))\n\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (ArtificiallySelected(heckCattle, x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 125,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & ResembleAurochs(x))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & ResembleAurochs(x))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (MakeResembleExtinctAnimals(x) -> -ExtinctAnimals(x))\n\nTEXT: Aurochs are extinct.\nFOL: ExtinctAnimals(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\nTEXT: [BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimal) & BredBack(x))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) -> Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (Resemble(x, extinctAnimals))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & ResembleAurochs(x))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\nTEXT: [BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (ResembleExtinctAnimal(x))\n\nTEXT: Aurochs are extinct.\nFOL: -Aurochs(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & ResembleAurochs(x))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimals(x))\n\nTEXT: Aurochs are extinct.\nFOL: AurochsExtinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & ResembleAurochs(heckCattle))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (ResembleExtinctAnimal(x) -> BredBack(x))\n\nTEXT: Aurochs are extinct.\nFOL: AurochsExtinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(1920s) & Aurochs(resemble)\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(are) & Animals(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(are) & Animals(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: some x. (Animals(x) & Resemble(x, extinctAnimals))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(are) & Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(x) -> HeckCattle(x) & 1920s(x) & Aurochs(x))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\nTEXT: [BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Animal(x) -> (ResembleExtinctAnimal(x) & Not(x)))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the FOL translation for each sentence in the SENTENCES list:\n\n<EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(1920s) & Aurochs(resemble)\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(are) & Animal(heck cattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(are) & Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: some x. (Animal(x) & Resemble(x, ExtinctAnimal(x)))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(are) & Extinct(aurochs)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance."
   ],
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) -> ResembleAurochs(x))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (ResembleExtinctAnimals(x) -> BredBack(x))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\nTEXT: [BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimal) & -BreedingBack(x))\n\nTEXT: Aurochs are extinct.\nFOL: -Aurochs(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (Resemble(x, extinctAnimals))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: some x. (BredBack(heckCattle, x) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) & Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) & Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: some x. (Resemble(x, extinctAnimals))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) & Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & ResembleAurochs(heckCattle))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ResembleExtinctAnimal(x) & -BredBack(x))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & In1920s(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (MakeBreedingBack(x) -> Resemble(x, ExtinctAnimal(x)))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(1920s) & Aurochs(resemble)\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(are) & Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(are) & Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (Resemble(x, ExtinctAnimals(x)))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(are) & Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle, 1920) -> ResembleAurochs(heckCattle))\n\n[BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\n[BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (ResembleExtinctAnimals(x) -> BredBack(x))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimals))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(1920s) & Aurochs(resemble)\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(are) & Animal(heck cattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(are) & Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (Resemble(x, extinct) -> BredBack(x))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(are) & Extinct(aurochs)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(x) -> HeckCattle(x) & 1920s(x) & Resemble(x, Aurochs(x)))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: all x. (HeckCattle(x) -> Animal(x))\n\nTEXT: [BG] Aurochs are animals.\nFOL: all x. (Aurochs(x) -> Animal(x))\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (Resemble(x, ExtinctAnimal(x)))\n\nTEXT: Aurochs are extinct.\nFOL: -Aurochs(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & -Aurochs(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimal) & -BredBack(x))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) & Extinct(aurochs)\n\n</EVALUATE>",
    "  Sure, I can help you with that! Here's the translation of the given sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) & SelectiveBreeding(x) & DomesticAnimal(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(x) -> HeckCattle(x) & 1920s(x) & Aurochs(x))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (MakeBreedingBack(x) -> (ResembleExtinctAnimal(x) & Extinct(x)))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>\n\nNote that in FOL, the `exists` keyword is used to indicate the existence of a certain property or relation, and the `all` keyword is used to indicate a universal property or relation. The `LaTeX` syntax is used to define the variables and their types.",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x) -> SelectiveBreeding(x) -> DomesticAnimals(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & In1920s(heckCattle) & Resemble(heckCattle, aurochs))\n\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle) -> Animal(heckCattle)\n\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs) -> Animal(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: all x. (MakeBreedingBack(x) -> Resemble(x, ExtinctAnimals(x)))\n\nTEXT: Aurochs are extinct.\nFOL: Aurochs(aurochs) -> Extinct(aurochs)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\n\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: all x. (BredBack(heckCattle) & Resemble(heckCattle, aurochs))\n\nBG: Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\n\nBG: Aurochs are animals.\nFOL: Aurochs(aurochs)\n\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (Resemble(x, extinctAnimals))\n\nBG: Aurochs are extinct.\nFOL: AurochsExtinct(aurochs)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 126,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) -> Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither Jerry. (Teach(Jerry) | Manager(Jerry))\n\nTEXT: Rose is young or a student.\nFOL: either Rose. (Young(Rose) | Student(Rose))\n\nTEXT: Jerry is young.\nFOL: Young(Jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> EitherStudy(x) & EitherTeach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> Either(study(x), teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teaches(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> Either(study(x), teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(rose) | Student(rose))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(rose) | Student(rose))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teaches(jery) & Manager(jery))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(rose) | Student(rose))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -x)\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -x)\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> Either(Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is young.\nFOL: Young(jerry)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 127,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> EitherStudyOrTeach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the FOL translation for each sentence in SENTENCES:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: not x. (Young(j Jerry) | -Teach(j Jerry))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> EitherStudyOrTeach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teaches(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x) -> -Teach(x) & -Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or if you'd like me to translate any other sentences.",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: not jerry. YoungPerson(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: not Jerry. (Young(Jerry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> Either(Study(x), Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: (YoungPerson(rose) | Student(rose))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> Either(Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -YoungPerson(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> EitherStudyOrTeach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teaches(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: not jerry. YoungPerson(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 128,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Rose(x) -> (Young(x) | Student(x)))\n\nTEXT: Rose is a human or a manager.\nFOL: all x. (Rose(x) -> (Human(x) | Manager(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x) -> -Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Rose(x) -> (YoungPerson(x) | Student(x)))\n\nTEXT: Rose is a human or a manager.\nFOL: all x. (Rose(x) -> (Human(x) | Manager(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: all x. (Human(x) | Manager(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: all x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither Jerry nor Teaches(j Jerry) nor Manager(j Jerry)\n\nTEXT: Rose is young or a student.\nFOL: Rose either Young(Rose) or Student(Rose)\n\nTEXT: Rose is a human or a manager.\nFOL: Rose either Human(Rose) or Manager(Rose)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither Jerry. (Teach(j Jerry) | Manager(j Jerry))\n\nTEXT: Rose is young or a student.\nFOL: Rose. (Young(Rose) | Student(Rose))\n\nTEXT: Rose is a human or a manager.\nFOL: Rose. (Human(Rose) | Manager(Rose))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: all x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my response:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: exists x. (-Teach(x) & -Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: exists x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: exists x. (Human(x) | Manager(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance."
   ],
   [
    "  Sure, I can help you with that! Here's the translation of the given sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: exists x. (-Teach(x) & -Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n\n</EVALUATE>\n\nNote: In FOL, the `exists` keyword is used to specify that a certain property holds for at least one individual in the domain of discourse. The `all` keyword is used to specify that a property holds for every individual in the domain of discourse. The `either` keyword is used to specify that a property holds for at least one individual in the domain of discourse.",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> EitherStudyOrTeach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teaches(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: all x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 129,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(jerry))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(jerry))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(jerry))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: all x. (Human(x) | Manager(jerry))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Rose(x) -> (YoungPerson(x) | Student(x)))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: all x. (Rose(x) -> (Human(x) | Manager(jerry)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither Jerry (Teach(j Jerry) & Manager(j Jerry))\n\nTEXT: Rose is young or a student.\nFOL: either Rose (YoungPerson(Rose) | Student(Rose))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either Rose (Human(Rose) | Manager(Jerry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: all x. (Human(x) | Manager(jerry))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> Either(study(x), teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: all x. (Human(x) | Manager(jerry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: all x. (Human(x) | Manager(jerry))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -x)\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: all x. (Human(x) | Manager(jerry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: all x. (Human(x) | Manager(jerry))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(jerry))\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(jerry))\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(jerry))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: Rose is a human or Jerry is a manager.\nFOL: either x. (Human(x) | Manager(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 130,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> Either(study(x), teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teaches(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither Jerry teaches nor Jerry is a manager.\n\nTEXT: Rose is young or a student.\nFOL: Rose is either young or student.\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: not true Rose is student & Jerry is human.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> EitherStudyOrTeach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -x)\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) & Manager(x) -> -x)\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither Jerry. (Teach(Jerry) | Manager(Jerry))\n\nTEXT: Rose is young or a student.\nFOL: either Rose. (Young(Rose) | Student(Rose))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: not Rose & Jerry. (Student(Rose) & Human(Jerry))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & -Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & -Human(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither Jerry. (Teach(j Jerry) | Manager(j Jerry))\n\nTEXT: Rose is young or a student.\nFOL: either Rose. (Young(Rose) | Student(Rose))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: not (Student(Rose) & Human(Jerry)).\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: either x. (Study(x) | Teach(x))\n\nTEXT: No young person teaches.\nFOL: exists x. (YoungPerson(x) & Teach(x) -> -x)\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither x. (Teach(x) | Manager(x))\n\nTEXT: Rose is young or a student.\nFOL: either x. (Young(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & -Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: exists x. (-YoungPerson(x) & Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: neither Jerry nor Teaches(j Jerry) nor Manager(j Jerry)\n\nTEXT: Rose is young or a student.\nFOL: either Rose is Young(Rose) or Rose is Student(Rose)\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(Rose) & -Human(Jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: exists x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: either x. (YoungPerson(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for the given sentences:\n\n<EVALUATE>\n\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\n\nTEXT: If someone studies, then they are a student.\nFOL: exists x. (Study(x) -> Student(x))\n\nTEXT: A person either studys or teaches.\nFOL: all x. (Person(x) -> (Study(x) | Teach(x)))\n\nTEXT: No young person teaches.\nFOL: all x. (YoungPerson(x) -> -Teach(x))\n\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\n\nTEXT: Rose is young or a student.\nFOL: all x. (Young(x) | Student(x))\n\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & Human(jerry)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 131,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: EnglishBook(NeapolitanChronicles)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & exists L(NewVesselPress) & (Translate(H,L) -> English(L))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) & English(x) & NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (EnglishBook(x) & NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & exists L(NewVesselPress) & -exists T(NewVesselPress)\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) = English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) & NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) & PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (EnglishBook(x) & NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(newVesselPress) & (Translate(H, English) -> Publisher(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: Translate(NeapolitanChronicles, Italian)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: Language(NeapolitanChronicles, English)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & forAll x (H(x) -> (Literature(x) & Foreign(x) & Translate(x, English)))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x (NeapolitanChronicles(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x (NeapolitanChronicles(x) & TranslatedFromItalian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x (PalaceOfFlies(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x (NeapolitanChronicles(x) & EnglishBook(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) -> English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) & English(x) -> NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslation(x, English))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x, NeapolitanChronicles))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) & Language(x, English))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) & English(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & forAll x (H(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) & =NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) & =PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(newVesselPress) & (Translate(H, English) -> Publish(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) = English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: Translate(NeapolitanChronicles, Italian)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: Language(NeapolitanChronicles) = English\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (EnglishBook(x) & NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & (Translate(H, ForeignLiterature) -> English(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -Italian(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Translate(x, Italian) & Book(x) & -Italian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -Italian(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) & -NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) & English(x) & -NeapolitanChronicles(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(newVesselPress) & (Translate(H, English) & Publisher(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) & NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) & PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: EnglishBook(NeapolitanChronicles)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (EnglishBook(x) & NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (EnglishBook(x) & Book(x) & PublishedByNewVesselPress(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & NewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & NewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) & English(x) -> NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & NewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & NeapolitanChronicles(x) -> TranslatedFromItalian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & NewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) & NeapolitanChronicles(x) -> English(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & exists L(NewVesselPress) & -L(H(NewVesselPress))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: EnglishBook(NeapolitanChronicles)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & NeapolitanChronicles(x) -> TranslatedFromItalian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) & NeapolitanChronicles(x) -> English(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (NeapolitanChronicles(x) & TranslatedFromItalian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (NeapolitanChronicles(x) & EnglishBook(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) & Book(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslateFromItalian(x) & Book(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PublishedBook(x) & NewVesselPress(x) & Book(x) -> PalaceOfFlies(x))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (Book(x) -> Language(x) -> English & NeapolitanChronicles(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & (SpecializesInTranslating(H, ForeignLiterature) & LanguageOfPublications(H, English))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> LanguageOfPublications(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (PublishedBooks(x) & (Title(x) -> NeapolitanChronicles)))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFrom(x, Italian) & PublishedBooks(x) & (Title(x) -> NeapolitanChronicles)))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PublishedBooks(x) & (Title(x) -> PalaceOfFlies)))\n\nTEXT: Neapolitan Chronicles is an English book.\nFOL: exists x. (LanguageOfPublications(x, English) & PublishedBooks(x) & (Title(x) -> NeapolitanChronicles)))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 132,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: False\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & Italian(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & English(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & Language(x) -> Italian(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: False\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslation(x, English))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) & Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> HarryPotter(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & TranslateForeignLiterature(x) -> English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) & English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> HarryPotter(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x) & Language(x) = English)\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) = English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = NeapolitanChronicles)\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & Title(x) = NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = PalaceOfFlies)\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = HarryPotter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & Language(x) -> Italian(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) -> TranslatedFromItalian(x) & Language(x) -> Italian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & Language(x) = English)\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) = English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Language(x) = Italian)\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(NeapolitanChronicles, Italian)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: False\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> HarryPotter(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x) & Language(x) = English)\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) & Language(x) = English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Language(x) = Italian)\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: False\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & exists L(NewVesselPress) & exists T(NewVesselPress) & -exists P(NewVesselPress)\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) = English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = \"Neapolitan Chronicles\")\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = \"Neapolitan Chronicles\" & Language(x) = \"Italian\")\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = \"Palace of Flies\")\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = \"Harry Potter\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & Language(x) -> Italian(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) -> TranslatedFromItalian(x) & Language(x) -> Italian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) & =NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & =NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) & =PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (PublishedBookByNewVesselPress(x) & =HarryPotter(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H. (PublishingHouse(H) -> TranslateForeignLiteratureIntoEnglish(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> HarryPotter(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(newVesselPress) & exists L(newVesselPress) & -exists T(newVesselPress)\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFrom(x, Italian) & Book(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> HarryPotter(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x) -> English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) & English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> HarryPotter(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & -NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> HarryPotter(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> HarryPotter(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -Italian(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) & -Italian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: false\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 133,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & NewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Translate(x, Italian) & NeapolitanChronicles(x) -> True)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & NewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Translate(x, Italian) & PalaceOfFlies(x) -> True)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) -> English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) -> PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslation(x, English))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x, NeapolitanChronicles))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x, PalaceOfFlies))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & (Translate(H, ForeignLiterature) -> English(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & (Translate(H, English) -> PublishingHouse(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (NeapolitanChronicles(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: Translate(NeapolitanChronicles, Italian)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PalaceOfFlies(x) & PublishedByNewVesselPress(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: Translate(PalaceOfFlies, Italian)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (BookPublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) -> TranslatedFromItalian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & Language(x) -> English(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) -> TranslatedFromItalian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) -> PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(newVesselPress) & (Translate(H, English) -> Publish(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Name(x, NeapolitanChronicles))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Translate(x, Italian) & Book(x) & PublishedByNewVesselPress(x) & Name(x, NeapolitanChronicles))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Name(x, PalaceOfFlies))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Translate(x, Italian) & Book(x) & PublishedByNewVesselPress(x) & Name(x, PalaceOfFlies))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(newVesselPress) & H(newVesselPress) -> (Translate(H(newVesselPress), English) & Publisher(newVesselPress))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: Translate(NeapolitanChronicles, Italian)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: Translate(PalaceOfFlies, Italian)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & forAll x (H(x) -> (ForeignLiterature(x) & Translate(x, English)))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (NeapolitanChronicles(x) & PublishedBook(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (NeapolitanChronicles(x) & TranslatedFromItalian(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (PalaceOfFlies(x) & PublishedBook(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (PalaceOfFlies(x) & TranslatedFromItalian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) = English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & -NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & -PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & -PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(newVesselPress) & (Translate(H, English) -> Publish(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) = English)\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Translate(x, Italian) & Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Translate(x, Italian) & Book(x) & PublishedBy(x, newVesselPress))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslation(x, English))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x, NeapolitanChronicles))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x, PalaceOfFlies))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) & English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) & NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (TranslatedFromItalian(x) & Book(x) & PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) -> English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(NewVesselPress) & (Translate(H, English) -> Publisher(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = \"Neapolitan Chronicles\")\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: Translate(NeapolitanChronicles, Italian)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Title(x) = \"Palace of Flies\")\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: Translate(PalaceOfFlies, Italian)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists H(newVesselPress) & (Translate(H, English) -> Publish(H))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> Language(x, English))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: Translate(NeapolitanChronicles, Italian)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedBy(x, newVesselPress))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: Translate(PalaceOfFlies, Italian)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Name(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & Name(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) & PublishedByNewVesselPress(x) & Name(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) & TranslatedFromItalian(x) & Name(x) -> PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiteratureIntoEnglish(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> Language(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & Title(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: exists x. (Book(x) -> TranslatedFromItalian(x) & Title(x) -> NeapolitanChronicles(x))\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) & Title(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: exists x. (Book(x) -> TranslatedFromItalian(x) & Title(x) -> PalaceOfFlies(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: exists x. (PublishingHouse(x) -> TranslateForeignLiterature(x) -> English(x))\n\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBooks(x) -> English(x))\n\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) -> NeapolitanChronicles(x))\n\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\n\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: exists x. (Book(x) -> PublishedByNewVesselPress(x) -> PalaceOfFlies(x))\n\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 134,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (VisitOfficeSupplyStore(x) -> WorkAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganize(x) -> -LateBedtime(x) & -WakeUpLateEveryDay(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -LateBedtime(Remy) & -WakeUpLateEveryDay(Remy) & TidyAndOrganize(Remy) or -LateBedtime(Remy) & -WakeUpLateEveryDay(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (VisitOfficeSupplyStore(x) -> WorkAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganize(x) -> NoLateBedtime(x) & NoLateWakeup(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -NoLateBedtime(Remy) & -NoLateWakeup(Remy) & TidyAndOrganize(Remy) | -NoLateBedtime(Remy) & -NoLateWakeup(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganize(x) -> -LateBedtime(x)) | (-TidyAndOrganize(x) & LateBedtime(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> Either(x, y))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: exists x. (Remy(x) & VisitOfficeSupplyStore(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x) & VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -BedLate(x) & -WakeUpAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (BedLate(remy) & WakeUpAfterNoon(remy) & TidyAndOrganize(remy)) or (not BedLate(remy) & not WakeUpAfterNoon(remy) & not TidyAndOrganize(remy))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganizeSpacesAtHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & TidyAndOrganizeSpacesAtHome(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesAtHome(x)))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: exists x. Remy(x) & OfficeSupplyStoreVisit(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganizeSpacesAtHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> either GoToBedLateAndWakeUpEveryDayAfterNoon(x) & TidyAndOrganizeSpacesAtHome(x) | -GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesAtHome(x)))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore regularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganize(x) -> -LateBedtime(x) & -WakeUpLate(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -LateBedtime(Remy) & -WakeUpLate(Remy) & TidyAndOrganize(Remy) or -LateBedtime(Remy) & -WakeUpLate(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy) regularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOften(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLate(Remy) & WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganize(Remy)) or (not GoToBedLate(Remy) & not WakeUpEveryDayAfterNoon(Remy) & not TidyAndOrganize(Remy))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy) regularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> TidyAndOrganizeSpacesAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpacesAtHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x) | -TidyAndOrganizeSpacesAtHome(x)))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits the office supply store regularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (StockedAndImpressiveHomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (GoesToBedLateAndWakesUpEveryDayAfterNoon(x) & SpendFreeTimeTidyingAndOrganizing(x)) | (-GoesToBedLateAndWakesUpEveryDayAfterNoon(x) & -SpendFreeTimeTidyingAndOrganizing(x)))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStoreRegularly.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & TidyAndOrganize(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganize(x))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(x) regularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganizeSpaces(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganizeSpaces(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpaces(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStoreRegularly(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizing(Remy) | -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -DoNotSpendFreeTimeTidyingAndOrganizing(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStoreRegularly(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -LateBedtimeAndLateWakeup(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (LateBedtimeAndLateWakeup(Remy) & TidyAndOrganize(Remy)) or -LateBedtimeAndLateWakeup(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitRegularly(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganize(x) -> -LateBedtime(x)) | (-TidyAndOrganize(x) -> NoLateWakeup(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -LateBedtime(Remy) & -NoLateWakeup(Remy) & TidyAndOrganize(Remy) | -LateBedtime(Remy) & -NoLateWakeup(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy) regularly.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOften(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (-TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganize(Remy) or -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy) regularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (VisitOfficeSupplyStore(x) -> WorkAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (-TidyAndOrganize(x) -> (-GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganize(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStoreRegularly(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLate(Remy) & WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganize(Remy)) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy) regularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTimeTidying(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (FreeTimeTidying(x) -> -BedLateAndWakeUpLate(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -BedLateAndWakeUpLate(Remy) & -FreeTimeTidying(Remy) | -BedLateAndWakeUpLate(Remy) & FreeTimeTidying(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStoreRegularly(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganize(x) -> NoLateBedtimeAndEarlyWakeup(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -TidyAndOrganize(Remy) & -NoLateBedtimeAndEarlyWakeup(Remy) | +TidyAndOrganize(Remy) & +NoLateBedtimeAndEarlyWakeup(Remy)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy) regularly.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x) & -TidyAndOrganize(x) | -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x) & -NotTidyAndOrganize(x)\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy -> VisitOfficeSupplyStoreRegularly(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpacesInHome(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & TidyAndOrganizeSpacesInHome(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesInHome(x)))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStoreRegularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTimeTidyingAndOrganizing(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((FreeTimeTidyingAndOrganizing(x) & -LateBedtimeAndLateWakeup(x)) | (-FreeTimeTidyingAndOrganizing(x) & LateBedtimeAndLateWakeup(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (LateBedtimeAndLateWakeup(x) & FreeTimeTidyingAndOrganizing(x)) | (-Remy(x) & LateBedtimeAndLateWakeup(x) & -FreeTimeTidyingAndOrganizing(x)))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: exists x. Remy(x) & OfficeSupplyStoreVisit(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (-TidyAndOrganizeSpaces(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)) | (-GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore regularly.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLate(Remy) & WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganize(Remy)) | (not GoToBedLate(Remy) & not WakeUpEveryDayAfterNoon(Remy) & not TidyAndOrganize(Remy))\n\nTEXT: Remy visits the office supply store regularly.\nFOL: Remy visits OfficeSupplyStore(Remy) regularly.\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 135,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTimeTidying(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -FreeTimeTidying(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)) | (-GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy(x) & HomeOffice(x) & OfficeSupplyStoreVisit(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (-TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganize(Remy) or -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(Remy) & VisitOfficeSupplyStore(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) | +GoToBedLateAndWakeUpEveryDayAfterNoon(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has FullyStockedAndImpressiveHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHomeRegularly(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHomeRegularly(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpaces(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganizeSpaces(Remy) or -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpaces(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has FullyStockedHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (VisitOfficeSupplyStore(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpacesAtHome(x) -> -LateBedtime(x) & -EveryDayAfterNoonWakeup(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -LateBedtime(Remy) & -EveryDayAfterNoonWakeup(Remy) & TidyAndOrganizeSpacesAtHome(Remy) | -LateBedtime(Remy) & -EveryDayAfterNoonWakeup(Remy) & -TidyAndOrganizeSpacesAtHome(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(Remy) & VisitOfficeSupplyStore(Remy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpaces(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)) | (-GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy(x) -> (FullyStockedHomeOffice(x) & VisitOfficeSupplyStoreRegularly(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganize(x) -> -LateBedTime(x)) | (-TidyAndOrganize(x) -> NoLateBedTime(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> EitherBedTime(x))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(x) & VisitOfficeSupplyStore(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLate(Remy) & WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganize(Remy)) or (-GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: (HomeOffice(Remy) & VisitOfficeSupplyStore(Remy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> EitherGoesToBedLateAndWakesUpEveryDayAfterNoonOrDoesNotGoToBedLateAndWakeUpEveryDayAfterNoonNorSpendsFreeTimeTidyingAndOrganizing(x))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy(x) -> (FullyStockedAndImpressiveHomeOffice(x) & VisitOfficeSupplyStoreRegularly(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganize(x) -> NoLateBedtimeAndNoLateWakeup(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -LateBedtimeAndLateWakeup(Remy) & -TidyAndOrganize(Remy) | -LateBedtimeAndLateWakeup(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has (HomeOffice(Remy) & OfficeSupplyStore(Remy))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> TidyAndOrganizeSpacesAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpacesAtHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & TidyAndOrganizeSpacesAtHome(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesAtHome(x))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: (HomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (-TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganize(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(Remy) & VisitOfficeSupplyStore(Remy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganizeSpacesInHome(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpacesInHome(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganizeSpacesInHome(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has (HomeOffice(Remy) & VisitOfficeSupplyStore(Remy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> FreeTimeTidyingAndOrganizing(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (FreeTimeTidyingAndOrganizing(x) -> BedTimeNotLateAndWakeUpTimeAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -BedTimeLateAndWakeUpAfterNoon(Remy) & -FreeTimeTidyingAndOrganizing(Remy) | +BedTimeLateAndWakeUpAfterNoon(Remy) & +FreeTimeTidyingAndOrganizing(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has (HomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpaces(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpaces(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganizeSpaces(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has (HomeOffice(Remy) & OfficeSupplyStore(Remy))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganize(x) -> -GoToBedLate(x)) | (-TidyAndOrganize(x) -> WakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> EitherGoToBedLateAndWakeUpEveryDayAfterNoon(x) | -EitherGoToBedLateAndWakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy(homeOffice) & Remy(visitOfficeSupplyStore)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTimeTidyingAndOrganizing(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -FreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -FreeTimeTidyingAndOrganizing(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -FreeTimeTidyingAndOrganizing(x))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(x) & Remy visits OfficeSupplyStore(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. ((TidyAndOrganizeSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpacesInHome(Remy) | -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -DoNotTidyAndOrganizeSpacesInHome(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has (HomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x) & VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganize(Remy) or -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(Remy) & VisitOfficeSupplyStore(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x) & VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (-FreeTime(x) -> (-TidyAndOrganize(x) & BedLate(x)) | BedLate(x) & NoWakeUpAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -BedLate(remy) & -WakeUpAfterNoon(remy) & TidyAndOrganize(remy) | -BedLate(remy) & -WakeUpAfterNoon(remy) & -TidyAndOrganize(remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(remy) & VisitOfficeSupplyStore(remy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & SpendFreeTimeTidyingAndOrganizing(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -SpendFreeTimeTidyingAndOrganizing(x)))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy(Remy) & FullyStockedAndImpressiveHomeOffice(Remy) & VisitOfficeSupplyStoreRegularly(Remy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpaces(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & TidyAndOrganizeSpaces(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -TidyAndOrganizeSpaces(remy))\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: (FullyStockedHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpacesInHome(x) -> -LateBedtimeAndLateWakeup(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -LateBedtimeAndLateWakeup(Remy) & -TidyAndOrganizeSpacesInHome(Remy) | -LateBedtimeAndLateWakeup(Remy) & +TidyAndOrganizeSpacesInHome(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(Remy) & Remy visits OfficeSupplyStore(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOften(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x) & VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (-TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & TidyAndOrganize(Remy) or -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has HomeOffice(Remy) & VisitOfficeSupplyStore(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizingSpacesInHome(Remy) | -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -DoNotSpendFreeTimeTidyingAndOrganizingSpacesInHome(Remy)\n\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: Remy has FullyStockedAndImpressiveHomeOffice(Remy) & Remy visits OfficeSupplyStoreRegularly(Remy)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 136,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularly(x) & WorkOften(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyingAndOrganizing(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x) & VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyingAndOrganizing(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either (GoesToBedLate(Remy) & WakesUpEveryDayAfterNoon(Remy)) | (-GoesToBedLate(Remy) & -WakesUpEveryDayAfterNoon(Remy))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either (VisitsOfficeSupplyStore(Remy) & GoesToBedLate(Remy) & WakesUpEveryDayAfterNoon(Remy)) | (-VisitsOfficeSupplyStore(Remy) & -GoesToBedLate(Remy) & -WakesUpEveryDayAfterNoon(Remy))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> FreeTimeTidying(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHome(x) -> VisitOfficeSupplyStore(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (FreeTimeTidying(x) -> BedTimeNotLate(x) & WakeUpTimeNotAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -BedTimeLate(Remy) & -WakeUpTimeAfterNoon(Remy) & -FreeTimeTidying(Remy) | -BedTimeLate(Remy) & -WakeUpTimeAfterNoon(Remy) & -FreeTimeTidying(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -VisitOfficeSupplyStore(Remy) & -FreeTimeTidying(Remy) | -VisitOfficeSupplyStore(Remy) & -HomeOffice(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOften(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganize(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganize(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) | -VisitOfficeSupplyStore(Remy) -> -TidyAndOrganize(Remy) & -HomeOffice(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpacesInHome(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy(x) -> (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & TidyAndOrganizeSpacesInHome(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesInHome(x)))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: all x. (Remy(x) -> (VisitOfficeSupplyStoreRegularly(x) & (-TidyAndOrganizeSpacesInHome(x) & -HomeOffice(x))) | (-VisitOfficeSupplyStoreRegularly(x) & -TidyAndOrganizeSpacesInHome(x) & -HomeOffice(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (VisitOfficeSupplyStore(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpacesInHome(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpacesInHome(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganizeSpacesInHome(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -VisitOfficeSupplyStore(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotHaveFullyStockedAndImpressiveHomeOffice(Remy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy -> either (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & SpendFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -SpendFreeTimeTidyingAndOrganizingSpaces(x)))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: all x. (Remy -> either (VisitOfficeSupplyStoreRegularly(x) & -SpendFreeTimeTidyingAndOrganizingSpaces(x)) | (-VisitOfficeSupplyStoreRegularly(x) & -HaveFullyStockedAndImpressiveHomeOffice(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpacesAtHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesAtHome(x) | -GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -DoNotTidyAndOrganizeSpacesAtHome(x)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -VisitOfficeSupplyStoreRegularly(x) | -VisitOfficeSupplyStoreRegularly(x) & -DoNotHaveFullyStockedAndImpressiveHomeOffice(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOften(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x) & VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either (GoesToBedLate(Remy) & WakesUpEveryDayAfterNoon(Remy)) | (!GoesToBedLate(Remy) &!WakesUpEveryDayAfterNoon(Remy))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either (VisitsOfficeSupplyStoreRegularly(Remy) & (GoesToBedLate(Remy) & WakesUpEveryDayAfterNoon(Remy))) | (!VisitsOfficeSupplyStoreRegularly(Remy) & (!GoesToBedLate(Remy) &!WakesUpEveryDayAfterNoon(Remy))))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpaces(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpaces(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganizeSpaces(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -VisitOfficeSupplyStoreRegularly(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotHaveFullyStockedHomeOffice(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOften(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x) & VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganize(x) -> -LateBedtime(x) & -WakeUpLate(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -LateBedtime(Remy) & -WakeUpLate(Remy) & TidyAndOrganize(Remy) | -LateBedtime(Remy) & -WakeUpLate(Remy) & -TidyAndOrganize(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -LateBedtime(Remy) & -WakeUpLate(Remy) & -VisitOfficeSupplyStore(Remy) | -LateBedtime(Remy) & -WakeUpLate(Remy) & -HomeOffice(Remy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (VisitOfficeSupplyStore(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpacesAtHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) | -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) -> -SpendFreeTimeTidyingAndOrganizingSpacesAtHome(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) | -VisitOfficeSupplyStoreRegularly(Remy) -> -HasFullyStockedAndImpressiveHomeOffice(Remy) & -SpendFreeTimeTidyingAndOrganizingSpacesAtHome(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoesToBedLateAndWakesUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpacesInHome(Remy) | -GoesToBedLateAndWakesUpEveryDayAfterNoon(Remy) & -DoesNotTidyAndOrganizeSpacesInHome(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoesToBedLateAndWakesUpEveryDayAfterNoon(Remy) & -VisitOfficeSupplyStoreRegularly(Remy) | -VisitOfficeSupplyStoreRegularly(Remy) & -HasFullyStockedAndImpressiveHomeOffice(Remy)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkAtHome(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpaces(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpaces(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganizeSpaces(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -VisitOfficeSupplyStoreRegularly(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotHaveFullyStockedHomeOffice(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & SpendFreeTimeTidyingAndOrganizingSpacesInHome(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: all x. (VisitOfficeSupplyStoreRegularly(x) & GoToBedLateAndWakeUpEveryDayAfterNoon(x)) -> -SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) & -HaveFullyStockedAndImpressiveHomeOffice(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizingSpacesInHome(Remy) | -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -DoNotSpendFreeTimeTidyingAndOrganizingSpacesInHome(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -VisitOfficeSupplyStoreRegularly(Remy) | -VisitOfficeSupplyStoreRegularly(Remy) & -DoNotSpendFreeTimeTidyingAndOrganizingSpacesInHome(Remy)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTimeTidyingAndOrganizing(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (FreeTimeTidyingAndOrganizing(x) -> BedTimeNotLateAndWakeUpTimeAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -BedTimeLateAndWakeUpLateAndFreeTimeTidyingAndOrganizing(Remy) | +BedTimeLateAndWakeUpLateAndFreeTimeTidyingAndOrganizing(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -VisitOfficeSupplyStoreRegularlyAndFreeTimeTidyingAndOrganizing(Remy) | +VisitOfficeSupplyStoreRegularlyAndFreeTimeTidyingAndOrganizing(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpacesInHome(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -TidyAndOrganizeSpacesInHome(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotTidyAndOrganizeSpacesInHome(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -VisitOfficeSupplyStoreRegularly(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -NotHaveFullyStockedAndImpressiveHomeOffice(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -SpendFreeTimeTidyingAndOrganizing(Remy) | -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -DoNotSpendFreeTimeTidyingAndOrganizing(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLateAndWakeUpEveryDayAfterNoon(Remy) & -VisitOfficeSupplyStoreRegularly(Remy) | -VisitOfficeSupplyStoreRegularly(Remy) & -DoNotSpendFreeTimeTidyingAndOrganizing(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpaces(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularly(x) & VisitRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (FreeTime(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -FreeTime(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & FreeTime(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -VisitOfficeSupplyStoreRegularly(Remy) | -GoToBedLate(Remy) & -WakeUpEveryDayAfterNoon(Remy) & -HasFullyStockedAndImpressiveHomeOffice(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (Remy -> (GoToBedLateAndWakeUpEveryDayAfterNoon & SpendFreeTimeTidyingAndOrganizingSpacesInHome) | (-GoToBedLateAndWakeUpEveryDayAfterNoon & -SpendFreeTimeTidyingAndOrganizingSpacesInHome)))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: all x. (Remy -> (VisitOfficeSupplyStoreRegularly & -SpendFreeTimeTidyingAndOrganizingSpacesInHome) | (-VisitOfficeSupplyStoreRegularly & -HaveFullyStockedAndImpressiveHomeOffice(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (VisitOfficeSupplyStore(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & TidyAndOrganizeSpacesInHome(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesInHome(x))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: either (VisitOfficeSupplyStore(x) & GoToBedLateAndWakeUpEveryDayAfterNoon(x)) | (-VisitOfficeSupplyStore(x) & -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (VisitOfficeSupplyStore(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: all x. (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesInHome(x)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesInHome(x)))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: all x. (VisitOfficeSupplyStore(x) & -TidyAndOrganizeSpacesInHome(x) & -HomeOffice(x)) | (-VisitOfficeSupplyStore(x) & -TidyAndOrganizeSpacesInHome(x) & -HomeOffice(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (Monitor(x) -> WorkRegularlyAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> Monitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganize(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStore(x) -> WorkRegularlyAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganize(x) -> -LateBedtime(x) & -WakeUpAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either -LateBedtime(Remy) & -WakeUpAfterNoon(Remy) & -TidyAndOrganize(Remy) | -LateBedtime(Remy) & -WakeUpAfterNoon(Remy) & -NotTidyAndOrganize(Remy)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either -LateBedtime(Remy) & -WakeUpAfterNoon(Remy) & -VisitOfficeSupplyStore(Remy) | -LateBedtime(Remy) & -WakeUpAfterNoon(Remy) & -NotHaveFullyStockedHomeOffice(Remy)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> RegularWorkAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> DesktopMonitor(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularWorkAtHome(x) -> FreeTimeTidying(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularWorkAtHome(x) -> VisitOfficeSupplyStore(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -FreeTimeTidying(x) -> -GoToBedLate(x) & -WakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: Remy either (GoesToBedLate(Remy) & WakesUpEveryDayAfterNoon(Remy)) | (-GoesToBedLate(Remy) & -WakesUpEveryDayAfterNoon(Remy))\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: Remy either (VisitsOfficeSupplyStore(Remy) & GoesToBedLate(Remy) & WakesUpEveryDayAfterNoon(Remy)) | (-VisitsOfficeSupplyStore(Remy) & -GoesToBedLate(Remy) & -WakesUpEveryDayAfterNoon(Remy))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (MonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> MonitorAtHome(x))\n\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (FreeTime(x) -> TidyAndOrganizeSpacesInHome(x))\n\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (OfficeSupplyStoreVisit(x) -> WorkRegularlyAndOftenAtHome(x))\n\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: -TidyAndOrganizeSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x)\n\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: either (GoToBedLateAndWakeUpEveryDayAfterNoon(x) & TidyAndOrganizeSpacesInHome(x)) | -GoToBedLateAndWakeUpEveryDayAfterNoon(x) & -TidyAndOrganizeSpacesInHome(x)\n\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: either (VisitOfficeSupplyStoreRegularly(x) & -TidyAndOrganizeSpacesInHome(x)) | -VisitOfficeSupplyStoreRegularly(x) & -TidyAndOrganizeSpacesInHome(x)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 137,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (-Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (-Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (-Greek(x) & Mortal(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (-Greek(x) & Mortal(x))\n\n</EVALUATE>\""
   ],
   [
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (-Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\n\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 138,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) & Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) & ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (Instructed(x) & TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingInLab(x) & InstructedByProfessorDavid(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -Library(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (University(x) & PartTimeJobOffered(x) & James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & -James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & Student(x) & -James(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & Department(x) & ComputerScienceDepartment(x) -> Student(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Course(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -University(jack) & -Lab(jack) & -PartTimeJobOfferedByUniversity(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: University(james) & PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> PartTimeJobOffered(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> DatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> Instructed(x) -> TakeCourse(x) -> DatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> Instructed(x) -> ProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -Lab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (University(x) & PartTimeJobOffered(x) -> James(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) -> Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (Instructed(x) -> TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingIn(x) -> InstructedBy(x, ProfessorDavid)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-University(x) & -Lab(x) & Jack(x))\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (University(x) & PartTimeJobOffered(x) & James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & James(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & Student(x) & James(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & -James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & Student(x) & -James(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) & TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) & InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & WorkInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & James(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) & Student(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) & ComputerScienceDepartment(x) -> Student(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) & TakeDatabaseCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) & InstructedByDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & WorkingInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & ComputerScienceDepartment(x) -> Student(x) & TakeCourse(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & TakeCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Lab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(james) & WorkInLab(james))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (PartTimeJobOfferedByUniversity(james) & Student(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & Student(x) -> James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & WorkInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & ComputerScienceDepartment(x) -> Student(x) & TakeCourse(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & TakeCourse(x) -> Student(x) & DatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> Student(x) & InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Lab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & James(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorksInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & Name(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & WorkInLibrary(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James has a part-time job offered by the university.\nFOL: exists x. (HasPartTimeJobOfferedByUniversity(x) & Student(x) & James(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 139,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & WorkInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) & Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) & ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (Instructed(x) & TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingInLab(x) & InstructedByProfessorDavid(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -Library(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOffered(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & Department(x) -> DatabaseCourse(x) & ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Course(x) -> InstructedByProfessorDavid(x) & TakingCourse(x) & DatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> InstructedByProfessorDavid(x) & WorkingInLab(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & WorkingInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(x) & WorkingInLab(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorksInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) & Student(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) & ComputerScienceDepartment(x) -> Student(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) & TakeDatabaseCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) & InstructedByDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & WorkingInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HasPartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & Department(x) -> DatabaseCourse(x) & ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Course(x) -> InstructedByProfessorDavid(x) & TakingDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Lab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & Department(x) -> DatabaseCourse(x) & ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Course(x) -> InstructedByProfessorDavid(x) & TakingDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Library(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & -James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorksInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & ComputerScienceDepartment(x) -> Student(x) & TakeCourse(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & TakeCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> Student(x) & InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Lab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(x) & WorkingInLab(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(james) & WorkingInLab(james))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(x) & WorkInLab(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & -James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorksInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & Department(x) -> DatabaseCourse(x) & ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Course(x) -> InstructedByProfessorDavid(x) & TakingCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(x) & Lab(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Lab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HasPartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -James(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James does not have a part-time job offered by the university.\nFOL: -HasPartTimeJobOfferedByUniversity(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 140,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & -HasPartTimeJobOfferedByUniversity(james)) | (-TakeDatabaseCourse(james) & HasPartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) & Library(x) -> Student(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) & ComputerScienceDepartment(x) -> Student(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) & TakeDatabaseCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) & InstructedByDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Library(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & PartTimeJobOfferedByUniversity(james)) or (Student(james) & Library(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & Department(x) & ComputerScienceDepartment(x) -> Student(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Course(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Lab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (DatabaseCourse(james) | PartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & ComputerScienceDepartment(x) -> Student(x) & TakeCourse(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & TakeCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> Student(x) & InstructedBy(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -University(jack) & -Lab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeCourse(james) & University(james)) or (PartTimeJobOfferedByUniversity(james) & Library(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOfferedByUniversity(x) -> Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingInLab(x) -> InstructedByProfessorDavid(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | PartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) & Library(x) -> Student(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) & ComputerScienceDepartment(x) -> Student(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) & TakeDatabaseCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) & InstructedByProfessorDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Library(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & PartTimeJobOfferedByUniversity(james)) or Student(james)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: exists x. (TakeDatabaseCourse(x) | HasPartTimeJobOfferedByUniversity(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(x) & WorkingInLab(x) & -InstructedByProfessorDavid(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | PartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & WorkingInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & PartTimeJobOfferedByUniversity(james)) or (Student(james) & WorkingInLab(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) & Library(x) -> Student(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) & ComputerScienceDepartment(x) -> Student(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) & TakeDatabaseCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) & InstructedByProfessorDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Library(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & -PartTimeJobOfferedByUniversity(james)) | (-TakeDatabaseCourse(james) & PartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (James & WorkInLab(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & PartTimeJobOfferedByUniversity(james)) or (WorkInLab(james) & -PartTimeJobOfferedByUniversity(james))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(x) & WorkingInLab(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | PartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & -HasPartTimeJobOfferedByUniversity(james)) | (-TakeDatabaseCourse(james) & HasPartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorksInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & HasPartTimeJobOfferedByUniversity(james)) or (NotTakeDatabaseCourse(james) & -HasPartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | HasPartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: exists x. ((TakeDatabaseCourse(x) & -HasPartTimeJobOfferedByUniversity(x)) | (-TakeDatabaseCourse(x) & HasPartTimeJobOfferedByUniversity(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) & Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) & ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (InstructedBy(x) & TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingIn(x) & InstructedBy(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -Library(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & PartTimeJobOffered(james)) | (Student(james) & Library(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & Name(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorksInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & HasPartTimeJobOfferedByUniversity(james)) or (WorksInLab(james) & HasPartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & Name(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: exists x. (TakeDatabaseCourse(x) | HasPartTimeJobOfferedByUniversity(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Student(x) & WorkingInLab(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | PartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) & Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) & ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (InstructedBy(x) & TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingIn(x) & InstructedBy(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -WorkingIn(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | PartTimeJobOffered(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) & Library(x) -> Student(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) & ComputerScienceDepartment(x) -> Student(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) & TakeDatabaseCourse(x) -> Student(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) & InstructedByDavid(x) -> Student(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Library(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | PartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & Name(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | HasPartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & Name(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) & HasPartTimeJobOfferedByUniversity(james)) or (NotTakeDatabaseCourse(james) & NotHasPartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: either (TakeDatabaseCourse(james) | HasPartTimeJobOfferedByUniversity(james))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 141,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> PartTimeJobOffered(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> DatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> Instructed(x) -> Course(x) -> DatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> WorkingInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) -> WorkingInLab(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-University(x) & -Lab(x))\n\nTEXT: Jack takes the database course.\nFOL: Course(jack)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (HasPartTimeJobOffered(x) & Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) & ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (InstructedBy(x) & TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingIn(x) & InstructedBy(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-University(x) & -Lab(x) & Jack(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (Course(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & -James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & -James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HasPartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & Department(x) -> Student(x) & ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Course(x) -> Student(x) & Taking(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> Student(x) & Instructed(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Lab(jack)\n\nTEXT: Jack takes the database course.\nFOL: Course(jack)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HavePartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) -> Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (Instructed(x) -> TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingIn(x) -> InstructedBy(x, ProfessorDavid)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & WorkingIn(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-University(x) & -Lab(x) & PartTimeJobOffered(x) & Jack(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (Course(x) & TakeDatabaseCourse(x) & Jack(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) -> Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (Instructed(x) -> TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingIn(x) -> InstructedBy(x, ProfessorDavid)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & WorkingIn(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -Library(jack)\n\nTEXT: Jack takes the database course.\nFOL: Course(jack) -> TakeDatabaseCourse(jack)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & Name(x) = \"James\")\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & -WorkInLab(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) -> Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (InstructedBy(x) -> TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingIn(x) -> InstructedBy(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & WorkingIn(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -WorkingIn(jack)\n\nTEXT: Jack takes the database course.\nFOL: Course(jack)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (HasPartTimeJobOffered(x) -> Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (InstructedBy(x) -> TakeDatabaseCourse(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingIn(x) -> InstructedBy(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOffered(jack) & -WorkingIn(jack)\n\nTEXT: Jack takes the database course.\nFOL: Course(jack)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) & TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) & InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: Student(james) & WorkingInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\n\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-PartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) -> (PartTimeJobOffered(x) & Library(x)))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) -> (TakeDatabaseCourse(x) & ComputerScienceDepartment(x)))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> (TakeDatabaseCourse(x) & -NotInstructedByDavid(x)))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> (WorkingInLab(x) & InstructedByDavid(x)))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (Lab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -Library(jack)\n\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScienceDepartment(x) -> -Student(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (University(x) & PartTimeJobOfferedByUniversity(x) -> Student(x) & Library(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Course(x) & Department(x) -> DatabaseCourse(x) & ComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Course(x) -> StudentInstructedByProfessorDavid(x) & TakingDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> StudentWorkingInLab(x) & InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: StudentWorkingInLab(james)\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -Library(jack)\n\nTEXT: Jack takes the database course.\nFOL: Course(jack)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HasPartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & Name(x) = \"James\")\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & -WorkInLab(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HasPartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: exists x. (-HasPartTimeJobOfferedByUniversity(x) & -WorkInLab(x))\n\nTEXT: Jack takes the database course.\nFOL: exists x. (TakeDatabaseCourse(x) & Jack(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) & James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> NotFromComputerScienceDepartment(x))\n\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\n\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\n\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\n\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\n\nTEXT: James is a student working in the lab.\nFOL: exists x. (WorkInLab(x) & Student(x) -> James(x))\n\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HasPartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\n\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 142,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composing(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composing(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikeMusic(x) & AccessToProgram(x) -> Composing(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikeMusic(x) & AccessToProgram(x) -> Composing(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composing(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikeMusic(x) & AccessToProgram(x) -> Composing(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composer(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composer(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composes(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composes(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Compose(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikeMusic(x) & AccessToProgram(x) -> Compose(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikeMusic(x) & AccessToProgram(x) -> Composing(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantToCompose(x)) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikeMusic(x) & AccessToProgram(x) -> Composing(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composer(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composer(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composer(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composer(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantToCompose(x)) -> Compose(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikeMusic(x) & AccessToProgram(x) -> Compose(x))\n</EVALUATE>",
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my answer:\n\n<EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> Composer(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composer(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance."
   ],
   [
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my response:\n\n<EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> Composer(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composer(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance.",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> Composes(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composes(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composer(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composer(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composing(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composing(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composer(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & AccessToProgram(x) -> Composer(x))\n</EVALUATE>",
    "  Sure! Here are the FOL translations for the given sentences:\n\n<EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composes(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composes(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> Composes(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composes(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composer(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composer(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: all x. (LikesMusic(x) & HasAccessToProgram(x) -> Composing(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 143,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composer(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Compose(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantToCompose(x)) -> Composer(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantsToCompose(x) -> -CanCompose(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantToCompose(x)) -> Compose(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantsToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (WillNotCompose(x) -> -CanCompose(x))\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here are the FOL translations for each of the sentences:\n\n<EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> Composer(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantsToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or if you'd like me to translate any other sentences.",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composer(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantsToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -WantsToCompose(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WillNotCompose(x) -> -CanCompose(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantsToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantsToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WantToCompose(x) -> -CanCompose(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: exists x. (HasAccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. (CanCompose(x) & WantsToCompose(x) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: -Composing(george) -> -CanCompose(george)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you translate these sentences into FOL expressions! Here's my response:\n\n<EVALUATE>\n\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikeMusic(x) -> WantToCompose(x))\n\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\n\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantToCompose(x)) -> Composing(x))\n\nTEXT: If George will not compose, George can not compose.\nFOL: all x. (-WillNotCompose(x) -> -CanCompose(x))\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance."
   ]
  ]
 },
 {
  "index": 144,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> -Land(x))\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>\"",
    "  \"<EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\n\nTEXT: Some birds are hawks.\nFOL: exists x. (-Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> -())\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> -True(x))\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>\"\n\nExplanation:\n\n* \"A hawk never lands.\" is translated to \"all x. (Hawk(x) -> Land(x) -> -True(x))\", which means that for any object x, if x is a hawk, then x never lands.\n* \"Some birds are hawks.\" is translated to \"exists x. (Bird(x) & Hawk(x))\", which means that there exists an object x such that x is a bird and x is also a hawk.\n* \"All birds land.\" is translated to \"all x. (Bird(x) -> Land(x))\", which means that for any object x, if x is a bird, then x lands.\n\nNote: In FOL, the semantics of \"never\" and \"all\" are different from their everyday usage. \"Never\" means \"always false\", and \"all\" means \"always true\".",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> -())\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> Land(x) -> False)\n\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 145,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: exists x. (-RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & Monday(x) & 8(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (PortraysLifeOfRealPerson(x) -> Bachelor(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLifeOfRealPerson(x) -> RealityTVShow(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists x. (Monday(x) & 8 pm(x) & BreakingBad(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) -> RoseGivenOutOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Time(breakingBad) = 8 & Monday(breakingBad)\n\n</EVALUATE>\"\n\nPlease note that in FOL, the \"exists\" and \"all\" quantifiers are used to specify the scope of the quantified statement. \"exists x\" means that the statement holds for at least one value of x, while \"all x\" means that the statement holds for every value of x.",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & RoseGivenOut(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists x. (Monday(x) & 8 pm(x) & BreakingBad(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> OnBachelor(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: MondayAt8pm(breakingBad)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad -> MondayAt8pm(BreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: MondayAt8PM(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: MondayAt8pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad -> MondayAt8pm(BreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & RoseGivenOut(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8 pm(breakingBad)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityShow(x) -> OnBachelor(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (BreakingBad(x) & Monday(x) & 8 pm(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowsPortrayingRealPeople -> RealityTVShow(allShowsPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> NotRealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad -> MondayAt8pm(BreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) = 8 & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not Exists(BreakingBad) -> RealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists x. (Monday(x) & Time(x) = 8 & TV(x) = BreakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & RoseGivenOutOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8 pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (OnMonday(x) & At8pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> OnTheBachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> PortraysRealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & OnMondayAt8pm(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8 pm(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: MondayAt8pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityShow(x) -> OnBachelor(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: MondayAt8pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8 pm(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: exists x. (-RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists x. (Monday(x) & 8 pm(x) & BreakingBad(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: MondayAt8pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoseOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> OnBachelor(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8 pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: MondayAt8pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowsPortrayingRealPeople -> RealityTVShow(allShowsPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad -> MondayAt8pm(BreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8 pm(breakingBad))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 146,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (Show(x) -> RealityTVShow(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) -> Rose(breakingBad) & Monday(breakingBad) & 8(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (OnMonday(x) & At8pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & GiveRosesOnMondayAt8pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (Show(x) -> RealityTVShow(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) -> Rose(breakingBad) & Monday(breakingBad) & 8 pm(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) -> RoseGivenOutOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & Monday(8pm) -> RoseGivenOutOnTV(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) & 8 pm(x) & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everyone on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (Show(x) -> RealityTVShow(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & Monday(8 pm) -> Rose(breakingBad)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & RoseGivenOut(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & RoseGivenOutOnMondayAt8pm(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everyone on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPerson(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityShow(x) -> RealPerson(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & MondayAt8pm(breakingBad) & Rose(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRoses(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoses(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & GiveRoses(breakingBad) & Monday(breakingBad) & 8 pm(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: BreakingBad -> TVShow(BreakingBad) & RoseGivenOutOnMondayAt8pm(BreakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(8 pm) & GiveRosesOnTV(breakingBad))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) = 8 & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (Show(x) -> RealityTVShow(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & Monday(8 pm) -> Rose(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (OnMonday(x) & At8pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> OnTheBachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & GiveRosesOnMondayAt8pm(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & RoseGivenOut(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) -> Bachelor(x))\n\nTEXT: Everyone on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RoseGivenOutOnMondayAt8pm(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (OnMonday(x) & At8pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & GiveRosesOnMondayAt8pm(breakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (Show(x) -> RealityTVShow(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & Monday(8 pm) -> Rose(breakingBad)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> NotRealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: BreakingBad -> TVShowIn WhichRosesAreGivenOutOnMondayAt8pm(BreakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: BreakingBad -> TVShow(BreakingBad) & RoseGivenOutOnMondayAt8pm(BreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & GiveRosesOnMondayAt8pm(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> NotRealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: BreakingBad -> TVShow(BreakingBad) & RoseGivenOutOnMondayAt8pm(BreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: BreakingBad -> TVShow(BreakingBad) & RoseGivenOutOnMondayAt8pm(BreakingBad)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> NotRealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: BreakingBad -> TVShowIn WhichRosesAreGivenOutOnMondayAt8pm(BreakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Every thing on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & Rose(breakingBad) & Monday(breakingBad) & 8 pm(breakingBad)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowsPortrayingRealPeople -> RealityTVShow(allShowsPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> NotRealityTVShow(BreakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: BreakingBad -> TVShow(BreakingBad) & RoseGivenOutOnMondayAt8pm(BreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (OnMonday(x) & InTimeBetween(8, x) & GiveRose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (OnMonday(breakingBad) & InTimeBetween(8, breakingBad))\n</EVALUATE>\n\nNote: In FOL, the syntax for negation is using the operator \"-\" followed by the predicate. For example, \"-RealityTVShow(breakingBad)\" negates the predicate \"RealityTVShow(breakingBad)\" and returns the opposite of the truth value.",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (OnMonday(x) & At8pm(x) & GiveOutRoses(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveOutRoses(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> OnBachelor(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & OnBachelor(x) & x = BreakingBad)\n\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (OnMonday(breakingBad) & At8pm(breakingBad))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 147,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (Rose(x) & BreakingBad(x) -> MondayAt8pm(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & RoseGivenOut(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & RoseGivenOut(x) -> MondayAt8pm(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & GiveRosesOnTV(x) -> MondayAt8pm(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & GiveRosesOnTV(x) & Monday(x) & 8(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOut(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & RoseGivenOut(x) -> MondayAt8pm(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowsPortrayingRealPeople -> RealityTVShow(allShowsPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseGivenOutDuringBreakingBad -> MondayAt8pm(RoseGivenOutDuringBreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & GiveRosesOnTV(x) & Monday(x) & 8 pm(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) = 8 & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (Show(x) -> RealityTVShow(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & Time(x) = 8 & TV(x) -> Rose(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOut(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: not exists x. (RealityTVShow(x) & BreakingBad(x))\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & RoseGivenOut(x) -> MondayAt8pm(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & RoseGivenOut(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (RoseGivenOut(x) & BreakingBad(x) & Monday(x) & 8 pm(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & GiveRosesOnTV(x) -> MondayAt8pm(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) -> RoseGivenOutOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & Time(x) -> RoseGivenOutOnTV(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShows -> RealityTVShow(allShows)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> NotRealityTVShow(BreakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseGivenOutOnBreakingBad -> MondayAt8pm(RoseGivenOutOnBreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> NotRealityTVShow(BreakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseGivenOutDuringBreakingBad -> MondayAt8pm(RoseGivenOutDuringBreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (OnMonday(x) & At8pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> OnTheBachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (GiveRosesOnTV(x) & OnBreakingBad(x) & At8pm(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseGivenOutOnBreakingBad -> MondayAt8pm(RoseGivenOutOnBreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. ((GiveRosesOnTV(x) & BreakingBad(x)) -> MondayAt8pm(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) = 8 & TV(x) -> Rose(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (Show(x) -> RealityTVShow(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & Time(x) = 8 & TV(x) -> Rose(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRoses(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRoses(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & GiveRoses(x) & MondayAt8pm(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (OnMonday(x) & At8pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> OnTheBachelor(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (OnBreakingBad(x) & At8pm(x) & GiveRosesOnTV(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8 pm(x) & GiveRosesOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (GiveRosesOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & GiveRosesOnTV(x) -> MondayAt8pm(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseGivenOutOnBreakingBad -> MondayAt8pm(RoseGivenOutOnBreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowsPortrayingRealPeople -> RealityTVShow(allShowsPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> -RealityTVShow(BreakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseGivenOutOnBreakingBad -> MondayAt8pm(RoseGivenOutOnBreakingBad)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Time(x) -> RoseGivenOutOnTV(x))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> Bachelor(x))\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealityTVShow(x) -> RealPeople(x))\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: exists x. (BreakingBad(x) & Time(x) -> RoseGivenOutOnTV(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: someMonday(8pm) -> RoseGivenOutOnTV(someMonday(8pm))\n\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: everyRoseGivenOutOnTV -> Bachelor(everyRoseGivenOutOnTV)\n\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: everythingOnBachelor -> RealPeople(everythingOnBachelor)\n\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: allShowPortrayingRealPeople -> RealityTVShow(allShowPortrayingRealPeople)\n\nTEXT: Breaking Bad is not a reality TV show.\nFOL: BreakingBad -> NotRealityTVShow(BreakingBad)\n\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseGivenOutDuringBreakingBad -> MondayAt8pm(RoseGivenOutDuringBreakingBad)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 148,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Member(x) & Nazi(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Member(x) & Nazi(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x) | Russian(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & PrussianStateParliament(x) & NaziReichstag(x)) | (Parliament(x) & NaziReichstag(x) & PrussianStateParliament(x)))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & Reichstag(x) & (Politician(x) & Nazi(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Member(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & (x = HeinrichScmidt))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & Reichstag(x) & (Politician(x) & Nazi(x)))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & Reichstag(x) & Member(x) & (Politician(x) & Nazi(x)))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x) & NotRussian(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & Reichstag(x) & Member(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Member(x) & Nazi(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: all x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & Reichstag(x) & Member(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & Reichstag(x) & (Politician(x) & Nazi(x)) )\n\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: exists x. (German(x) | Russian(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 149,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & State(x) & Nazi(x)) & (Reichstag(x) & Nazi(x) & German(x)))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Nazi(x) & German(x) & (Parliament(x) & State(x) & Reichstag(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> NaziGerman(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGerman(x) & Parliament(x) & Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & (Parliament(x) & StateParliament(x) & NaziReichstag(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x) & Parliament(x) & StateParliament(x) & Reichstag(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) -> (Parliament(x) & StateParliament(x) & NaziReichstag(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x) & (Parliament(x) & StateParliament(x) & Reichstag(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Nazi(x) & German(x) & Parliament(x) & Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & State(x) & Nazi(x)) & (Reichstag(x) & Nazi(x) & German(x)))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (-Nazi(x) & -Parliament(x) & -Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & (Parliament(x) & StateParliament(x) & NaziReichstag(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Nazi(x) & German(x) & Parliament(x) & StateParliament(x) & Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Nazi(x) & German(x) & Parliament(x) & StateParliament(x) & Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (-NaziReichstag(x) & Parliament(x) & StateParliament(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & State(x) & Nazi(x)) & (Reichstag(x) & Nazi(x) & German(x)))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Nazi(x) & German(x) & (Parliament(x) & State(x) & Reichstag(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & (Parliament(x) & StateParliament(x) & NaziReichstag(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Nazi(x) & German(x) & Parliament(x) & StateParliament(x) & Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & State(x) & Prussian(x)) & (Reichstag(x) & Nazi(x) & German(x)))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (-Nazi(x) & -Parliament(x) & -Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x) & (Parliament(x) & StateParliament(x) & Reichstag(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & State(x) & Nazi(x)) & (Reichstag(x) & Nazi(x) & German(x)))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Nazi(x) & German(x) & (Parliament(x) & State(x) & Reichstag(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & (Parliament(x) & StateParliament(x) & NaziReichstag(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) -> (Parliament(x) & StateParliament(x) & NaziReichstag(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & State(x) & Nazi(x)) & (Reichstag(x) & Nazi(x) & German(x)))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Some(x) & Nazi(x) & German(x) & Parliament(x) & Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x) & (Parliament(x) & StateParliament(x) & Reichstag(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Nazi(x) & German(x))\n\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x) & Parliament(x) & StateParliament(x) & Reichstag(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 150,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Member(x) -> (Parliament(x) & Reichstag(x)) & Nazi(x) & German(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x) & Nazi(x) & German(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) | (Reichstag(x) & NaziReichstag(x) & Parliament(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Member(x) & Nazi(x) & German(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x) & Nazi(x) & German(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((MemberOfParliament(x) & Nazi(x) & German(x)) | (MemberOfReichstag(x) & Nazi(x) & German(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Politician(x) & MemberOfPrussianStateParliament(x) & NaziReichstag(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) | (Reichstag(x) & NaziReichstag(x) & Parliament(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Politician(x) & MemberOfParliament(x) & PrussianStateParliament(x)) & (Politician(x) & MemberOfParliament(x) & NaziReichstag(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & PrussianStateParliament(x)) & (Reichstag(x) & NaziReichstag(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x) & Nazi(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((MemberOfParliament(x) & Nazi(x) & PrussianStateParliament(x)) | (-MemberOfParliament(x) & Nazi(x) & -PrussianStateParliament(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & Nazi(x) & Prussian(x)) & (Reichstag(x) & Nazi(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x) & Nazi(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & PrussianStateParliament(x)) & (Reichstag(x) & NaziReichstag(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: all x. (Politician(x) -> NaziGerman(x) & Heinrich(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: all x. (Parliament(x) & Reichstag(x) -> Member(x) & Heinrich(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((MemberOfParliament(x) & Nazi(x) & German(x)) | (NaziReichstag(x) & Nazi(x) & German(x)))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Politician(x) & MemberOfParliament(x, \"Prussian State Parliament\") & MemberOfParliament(x, \"Nazi Reichstag\"))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfParliament(x, \"Nazi Reichstag\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & NaziReichstag(x)) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. ((Parliament(x) & StateParliament(x) & Nazi(x)) & Reichstag(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: exists x. (Politician(x) & Nazi(x) & German(x))\n\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (Parliament(x) & StateParliament(x) & Reichstag(x) & Member(x))\n\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -Reichstag(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 151,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: exists x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) -> -SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. (ColorectalCancer(x) & BileDuctCancer(x) -> -SurvivalRateLow(x))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) & SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: exists x. ((ColorectalCancer(x) & BileDuctCancer(x)) & SurvivalRateLow(x)) -> -BileDuctCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -SurvivalRateLow(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -ColorectalCancer(x) & -BileDuctCancer(x) -> -SurvivalRateLow(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> NotLowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> Not(LowSurvivalRate(x)))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) -> NotLowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: exists x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> NotBileDuctCancer(x))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> Severecancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) -> ColorectalCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> Severecancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -ColorectalCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> Severecancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRate(x) -> Low(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) & LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)) & NotBileDuctCancer(x))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> Severecancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) -> ColorectalCancer(x) & -LowSurvivalRate(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> SurvivalRateHigh(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: colorectalCancer(x) -> (BileDuctCancer(x) & SurvivalRateLow(x)) -> (\u00acBileDuctCancer(x) & SurvivalRateLow(x))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> Severecancer(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -ColorectalCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> -SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(colorectalCancer) -> -SurvivalRateLow(colorectalCancer)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> Severecancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) & LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: exists x. ((ColorectalCancer(x) & BileDuctCancer(x)) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & -LowSurvivalRate(x) -> -ColorectalCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: none x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> -ColorectalCancer(x))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -SurvivalRateLow(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) -> -ColorectalCancer(x) & SurvivalRateLow(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SeverCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & -LowSurvivalRate(x) -> -ColorectalCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> Severecancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> -BileDuctCancer(colorectalCancer)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) -> -SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: exists x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> -SurvivalRateLow(x))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -ColorectalCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: exists x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)) & (-ColorectalCancer(x)))\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -ColorectalCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> NotLowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> NotBileDuctCancer(colorectalCancer)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -ColorectalCancer(x)\n\nTEXT: Colorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 152,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -SurvivalRateLow(x) | MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & -SurvivalRateLow(x) | ColorectalCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: -BileDuctCancer(x) & -Cholangiocarcinoma(x) | ColorectalCancer(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> SurvivalRateLow(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ColorectalCancer(x) & SurvivalRateLow(x) -> NotBileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> -BileDuctCancer(colorectalCancer)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: colorectalCancer -> (BileDuctCancer | Cholangiocarcinoma) & MildFlu(colorectalCancer)\n</EVALUATE>\n\nNote: In FOL, the symbols used are:\n\n* all: represents universal quantification (i.e., for all values of x)\n* exists: represents there exists at least one value of x (i.e., for some values of x)\n* -: represents the negation of the statement (i.e., not)\n* &: represents conjunction (i.e., and)\n* ->: represents implication (i.e., if the first statement is true, then the second statement must be true)",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & -LowSurvivalRate(x) -> -ColorectalCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: -Or(ColorectalCancer(x) & BileDuctCancer(x)) -> -And(ColorectalCancer(x) & MildFlu(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: or(BileDuctCancer(x), Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> -BileDuctCancer(colorectalCancer)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: colorectalCancer -> BileDuctCancer | Cholangiocarcinoma\n</EVALUATE>\n\nNote: In FOL, the `->` operator is used to indicate the relationship between two concepts, and the `all x./` and `none x./` patterns are used to specify the scope of the relationship. The `exist x./` pattern is used to specify the existence of an object, and the `-` operator is used to negate a concept.",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(x) | Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)) & (-ColorectalCancer(x)))\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: all x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (ColorectalCancer(x) & BileDuctCancer(x)) & MildFlu(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: or.((BileDuctCancer(x) & Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> NotBileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: or(BileDuctCancer(x), Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. (ColorectalCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) | (ColorectalCancer(x) & Cholangiocarcinoma(x))) -> MildFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: either (BileDuctCancer(x) & Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: or((BileDuctCancer(x) & Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-SurvivalRateLow(x)) | (-ColorectalCancer(x) & BileDuctCancer(x)))\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: all x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> SurvivalRateLow(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -ColorectalCancer(x) & BileDuctCancer(x) -> -SurvivalRateLow(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: -ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: exists x. ((BileDuctCancer(x) & Cholangiocarcinoma(x)) | (Cholangiocarcinoma(x) & BileDuctCancer(x))) -> BileDuctCancer(x) & MildFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: or(BileDuctCancer(x), Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (-MildFlu(x) & SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x) & SurvivalRateLow(x)) -> -BileDuctCancer(x))\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: all x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> BileDuctCancer(x) & MildFlu(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: or(BileDuctCancer(x), Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: all x. ((BileDuctCancer(x) | Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: -BileDuctCancer(x) | -Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(colorectalCancer) -> -LowSurvivalRate(colorectalCancer)\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> BileDuctCancer(colorectalCancer)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> -SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: colorectalCancer(x) -> (BileDuctCancer(x) & SurvivalRateLow(x)) -> not(BileDuctCancer(x))\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: colorectalCancer(x) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: all x. (ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x)) -> BileDuctCancer(x) & MildFlu(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRate(x) -> Low)\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> No(x, MildFlu)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)))\n\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: all x. ((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (ColorectalCancer(x) & BileDuctCancer(x)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 153,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) & SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-SurvivalRateLow(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) -> (BileDuctCancer(x) | Cholangiocarcinoma(x))))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> (BileDuctCancer(x) | Cholangiocarcinoma(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (MildFlu(x) & SurvivalRateLow(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-SurvivalRateLow(x)) & (-ColorectalCancer(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> BileDuctCancer(x) | Cholangiocarcinoma(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> NotLowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> NotLowSurvivalRate(x))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((NotMildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: colorectalCancer(x) -> BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: colorectalCancer(x) -> -MildFlu(x) & -Cholangiocarcinoma(x) -> BileDuctCancer(x) | Cholangiocarcinoma(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -SurvivalRateLow(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & SurvivalRateLow(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> BileDuctCancer(x) | Cholangiocarcinoma(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> (BileDuctCancer(x) | Cholangiocarcinoma(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> BileDuctCancer(x) | Cholangiocarcinoma(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (-MildFlu(x) & LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((-MildFlu(x) & ColorectalCancer(x)) | (ColorectalCancer(x) & Cholangiocarcinoma(x)))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> BileDuctCancer(x) | Cholangiocarcinoma(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)) | (-ColorectalCancer(x) & BileDuctCancer(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) | (-ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x)))))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)) & (-ColorectalCancer(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) -> (+BileDuctCancer(x)) | (+Cholangiocarcinoma(x)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) -> (BileDuctCancer(x) | Cholangiocarcinoma(x))))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) -> ColorectalCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: exists x. (!MildFlu(x) &!Cholangiocarcinoma(x)) -> BileDuctCancer(x) | Cholangiocarcinoma(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)) & (-ColorectalCancer(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) | (-ColorectalCancer(x)) & (BileDuctCancer(x) | Cholangiocarcinoma(x))))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (-MildFlu(x) & LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)) & (-ColorectalCancer(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))\n</EVALUATE>\n\nNote: In FOL, the \"all x\" notation is used to indicate that the statement holds for all values of the variable x. The \"exists x\" notation is used to indicate that the statement holds for at least one value of the variable x.",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -SurvivalRateLow(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & -SurvivalRateLow(x) -> NotBileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> BileDuctCancer(x) or Cholangiocarcinoma(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SeverCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> BileDuctCancer(x) | Cholangiocarcinoma(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (-MildFlu(x) & LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> (-LowSurvivalRate(x)) & (-ColorectalCancer(x)))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) -> (BileDuctCancer(x) | Cholangiocarcinoma(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (-MildFlu(x) & LowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((ColorectalCancer(x) & (-MildFlu(x) & Cholangiocarcinoma(x))) -> (BileDuctCancer(x) | Cholangiocarcinoma(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: none x. (MildFlu(x) -> NotLowSurvivalRate(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((ColorectalCancer(x) & BileDuctCancer(x)) -> NotLowSurvivalRate(x))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((NotMildFlu(x) & ColorectalCancer(x)) | (ColorectalCancer(x) & Cholangiocarcinoma(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -LowSurvivalRate(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: -BileDuctCancer(x) -> ColorectalCancer(x) & LowSurvivalRate(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -MildFlu(x) & -Cholangiocarcinoma(x) -> ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> SurvivalRateLow(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> SevereCancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: Cholangiocarcinoma(x) -> BileDuctCancer(x)\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: -SurvivalRateLow(x) -> MildFlu(x)\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: colorectalCancer(x) -> BileDuctCancer(x) & SurvivalRateLow(x) -> -BileDuctCancer(x)\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: colorectalCancer(x) -> -MildFlu(x) & -Cholangiocarcinoma(x) -> BileDuctCancer(x) | Cholangiocarcinoma(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(x) -> Severecancer(x)\n\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nTEXT: No one with mild flu has a low survival rate.\nFOL: exists x. (-LowSurvivalRate(x) & MildFlu(x))\n\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: all x. ((BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: all x. ((-MildFlu(x) & Cholangiocarcinoma(x)) | (Cholangiocarcinoma(x) & -MildFlu(x)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 154,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) -> Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: all x. (LastOlympicGames(x) -> Location(x) -> Tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> Medals(x) -> Tokyo)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) -> Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) -> Tokyo(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x)\n\nTEXT: The world championships is a sporting event.\nFOL: all x. (WorldChampionships(x) -> SportingEvent(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 155,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MostMedalsInTokyo(x))\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: notInTokyo(lastOlympicGames)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: notLastOlympicGames(tokyo)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(tokyo)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) -> Tokyo(x)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates(x) -> MostMedalsInTokyo(x)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: lastOlympicGames(x) -> NotInTokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(tokyo)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(tokyo)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(tokyo)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MostMedals(x, Tokyo(x)))\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(tokyo)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MostMedalsInTokyo(x))\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for the given sentences:\n\n<EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates(x) -> MostMedalsInTokyo(x)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: lastOlympicGames(x) -> NotInTokyo(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MostMedalsInTokyo(x))\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(tokyo)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> Tokyo(x)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: not(lastOlympicGames(x)) -> Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> Medals(x) -> Tokyo(x))\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates(x) -> MostMedalsInTokyo(x)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: lastOlympicGames(x) -> NotInTokyo(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MostMedalsInTokyo(x))\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MostMedalsInTokyo(x))\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(tokyo)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(tokyo)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MostMedalsInTokyo(x))\n\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -lastOlympicGames(x) -> -Tokyo(x)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 156,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(lastOlympicGames, UnitedStates)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: lastOlympicGames(unitedStates) -> mostMedals(unitedStates)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(unitedStates, lastOlympicGames)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates(x) -> MostMedalsInTokyo(x)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: UnitedStates(x) -> MostMedalsInLastOlympicGames(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: lastOlympicGames(unitedStates) -> mostMedals(unitedStates)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(lastOlympicGames, UnitedStates)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: lastOlympicGames(unitedStates, mostMedals)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(unitedStates, lastOlympicGames)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(lastOlympicGames, UnitedStates)\n</EVALUATE>",
    "  Sure! Here are the FOL translations for the given sentences:\n\n<EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(unitedStates, lastOlympicGames)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(unitedStates, lastOlympicGames)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(x) -> UnitedStates(x) -> lastOlympicGames(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(unitedStates, lastOlympicGames)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(UnitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(UnitedStates, lastOlympicGames)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: all x. (LastOlympicGames(x) -> Location(x) & Tokyo(x))\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MedalCount(x) & Tokyo(x))\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: all x. (UnitedStates(x) -> MedalCount(x) & LastOlympicGames(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(x) -> UnitedStates(x) & Tokyo(x)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(x) -> UnitedStates(x) & lastOlympicGames(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(unitedStates, lastOlympicGames)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(x) -> Tokyo(x)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> Medals(x) -> Tokyo(x))\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: lastOlympicGames(x) -> Medals(x) -> UnitedStates(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(lastOlympicGames, UnitedStates)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: all x. (OlympicGames(x) -> Location(x) & Tokyo(x))\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MedalsWon(x) & Tokyo(x))\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: all x. (UnitedStates(x) -> MedalsWon(x) & LastOlympicGames(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(lastOlympicGames, UnitedStates)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(unitedStates, lastOlympicGames)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(tokyo, UnitedStates)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(lastOlympicGames, UnitedStates)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: all x. (LastOlympicGames(x) -> Location(x) & Tokyo(x))\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: all x. (UnitedStates(x) -> MedalsWon(x) & Location(x) & Tokyo(x))\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: all x. (UnitedStates(x) -> MedalsWon(x) & LastOlympicGames(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\n\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(tokyo)\n\nTEXT: The United States won the most medals in Tokyo.\nFOL: mostMedals(unitedStates, tokyo)\n\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: mostMedals(unitedStates, lastOlympicGames)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 157,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horses(x) -> Hooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Humans(x) -> -Hooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Humans(x) & Horses(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hoove(x) -> HasHoove(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -HasHoove(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & HasHoove(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Has(x) -> Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> HasHooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -HasHooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hoofed(x) -> Horses(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Hoofed(x) -> -Humans(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Humans(x) & Horses(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> HasHooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -HasHooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Has(x) -> Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hoove(x) -> HasHooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -HasHooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (-Human(x) & HasHooves(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hoove(x) -> HasHooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -HasHooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & HasHooves(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Humans(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Humans(x) & Has(x) -> Horses(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Has(x) -> Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horns(x) -> Hooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (-Human(x) & Horns(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horses(x) -> Hooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Humans(x) -> -Hooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Humans(x) & Horses(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Humans(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Humans(x) & Has(x) -> Horses(x))\n\n</EVALUATE>"
   ],
   [
    "  \"<EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horses(x) -> Hooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Humans(x) -> -Hooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Humans(x) & Horses(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Has(x) -> Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> HasHooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -HasHooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horses(x) -> Hooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Humans(x) -> -Hooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Humans(x) & Horses(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hornes(x) -> Hooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Humans(x) -> -Hooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (-Humans(x) & Hornes(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Has(x) -> Horse(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & HasHooves(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Has(x) -> Horse(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: All horses have hooves.\nFOL: all x. (Hooves(x) -> Has(x))\n\nTEXT: No humans have hooves.\nFOL: all x. (Humans(x) -> -Has(x))\n\nTEXT: Some humans are horses.\nFOL: exists x. (Humans(x) & Has(x) -> Horses(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 158,
  "responses": [
   [
    "  \"<EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y)) -> False\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y) -> -x)\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(susan) -> FlyToLGAAirport(susan)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y)) -> False(x, y)\n\nTEXT: John flies from LGA airport.\nFOL: John(john) -> FlyFromLGAAirport(john)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(susan) -> FlyFromLGAAirport(susan)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(susan) flies(susan) to(airport) LGA(airport)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: \u00ac(Departure(x) & Arrival(x) & Equal(x, x))\n\nTEXT: John flies from LGA airport.\nFOL: John(john) flies(john) from(airport) LGA(airport)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(susan) flies(susan) from(airport) LGA(airport)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (DepartureAirport(x) & ArrivalAirport(x) -> -Equal(x, x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x) & -From(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x) & From(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> LGAAirport(destination)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x. (Departure(x) & Arrival(x) & SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> LGAAirport(origin)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> LGAAirport(origin)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x) & Arrival(y) -> Airport(x)!= Airport(y))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & -Departure(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & Departure(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Airport(y) & x = y) -> False\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Airport(x)!= Airport(y) -> (Departure(x) = Airport(y) | Arrival(x) = Airport(y)))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & Departure(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & Arrival(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(susan) -> Flies(susan, LGAAirport(lga))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y)) -> False(x, y)\n\nTEXT: John flies from LGA airport.\nFOL: John(john) -> Flies(john, LGAAirport(lga))\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(susan) -> Flies(susan, LGAAirport(lga))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(susan) -> FlyToLGA(susan)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x. (Departure(x) & Arrival(x) & SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: John(john) -> FlyFromLGA(john)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(susan) -> FlyFromLGA(susan)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & Airport(x) = Airport(y))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: exists x. (Fly(x) -> Airport(x) = \"LGA\")\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) -> Airport(x)!= Airport(y))\n\nTEXT: John flies from LGA airport.\nFOL: exists x. (Fly(x) -> Airport(x) = \"LGA\" & Departure(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: exists x. (Fly(x) -> Airport(x) = \"LGA\" & Arrival(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & Airport(x) = Airport(y))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x) & Arrival(y) -> -SameAirport(x, y))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & Airport(x) = Airport(y))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> (-Equal(x, x)))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> FromLGA(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) -> FromLGA(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (DepartureAirport(x) & ArrivalAirport(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & LGAAirport(x) -> -DepartureAirport(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) & LGAAirport(x) -> -ArrivalAirport(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> FromLGA(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) -> FromLGA(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) -> NotSameAirport(x, y))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & LGAAirport(x) -> -Departure(x))\n\nTEXT: Susan flies from LGA airport.\nFOL: all x. (Fly(x) & LGAAirport(x) -> -Arrival(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(susan) -> FliesTo(susan, LGAAirport(lga))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y)) -> False\n\nTEXT: John flies from LGA airport.\nFOL: John(john) -> FliesFrom(john, LGAAirport(lga))\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(susan) -> FliesFrom(susan, LGAAirport(lga))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x) & Arrival(y) -> -SameAirport(x, y))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) -> Airport(y) & Airport(y) -> Not(SameAirport(x, y)))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: Susan flies from LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 159,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y)) -> False\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: John flies to LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) & LGAAirport(departure)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x. (Airport(departure)!= Airport(arrival))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) & LGAAirport(departure)\n\nTEXT: John flies to LGA airport.\nFOL: John(fly) & LGAAirport(arrival)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Airport(x) -> (Departure(x) = Airport(x) & Arrival(x) = Airport(x)))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & Departure(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & Arrival(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & From(x) -> LGAAirport(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) & To(x) -> LGAAirport(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & LGAAirport(x) -> -FromAirport(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) & LGAAirport(x) -> -ToAirport(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & From(x) -> LGAAirport(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) & To(x) -> LGAAirport(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y)) -> False\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: John flies to LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(Susan) -> FliesTo(LGAairport)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y)) -> False\n\nTEXT: John flies from LGA airport.\nFOL: John(John) -> FliesFrom(LGAairport)\n\nTEXT: John flies to LGA airport.\nFOL: John(John) -> FliesTo(LGAairport)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y) -> -x)\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA) & From(LGA)\n\nTEXT: John flies to LGA airport.\nFOL: John(fly) -> Airport(LGA) & To(LGA)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & From(x) -> LGAAirport(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) & To(x) -> LGAAirport(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> FromLGA(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) -> ToLGA(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & Airport(x) = Airport(y))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: John flies to LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA) & From(LGA)\n\nTEXT: John flies to LGA airport.\nFOL: John(fly) -> Airport(LGA) & To(LGA)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> FromLGA(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) -> ToLGA(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: Fly(john) & From(LGAAirport(john))\n\nTEXT: John flies to LGA airport.\nFOL: Fly(john) & To(LGAAirport(john))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) & LGAAirport(destination)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: \u00ac(Departure(x) & Arrival(x) & SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) & LGAAirport(departure) & -LGAAirport(arrival)\n\nTEXT: John flies to LGA airport.\nFOL: John(fly) & LGAAirport(destination) & -LGAAirport(departure)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & LGAAirport(x) -> From(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) & LGAAirport(x) -> To(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: Fly(john) & From(LGAAirport)\n\nTEXT: John flies to LGA airport.\nFOL: Fly(john) & To(LGAAirport)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, LGA)\n\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, LGA)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & From(x, LGAAirport(x)))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) & To(x, LGAAirport(x)))\n\n</EVALUATE>\""
   ],
   [
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Airport(x) & Airport(y) -> (x = y) -> (x!= y))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & From(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & To(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Airport(x) & Airport(y) & SameAirport(x, y) -> False)\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & -From(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) -> Airport(x) = LGA & From(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: Fly(john) & From(LGAAirport)\n\nTEXT: John flies to LGA airport.\nFOL: Fly(john) & To(LGAAirport)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fly) -> Airport(LGA)\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: exists x y. (Departure(x) & Arrival(y) & SameAirport(x, y)) -> False\n\nTEXT: John flies from LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\nTEXT: John flies to LGA airport.\nFOL: John(fly) -> Airport(LGA)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Susan flies to LGA airport.\nFOL: all x. (Fly(x) -> LGAAirport(x))\n\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x. (Departure(x) & Arrival(x) -> -SameAirport(x))\n\nTEXT: John flies from LGA airport.\nFOL: all x. (Fly(x) & From(x) -> LGAAirport(x))\n\nTEXT: John flies to LGA airport.\nFOL: all x. (Fly(x) & To(x) -> LGAAirport(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 160,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom owns a pet.\n\nTEXT: Tom is a grumpy person.\nFOL: Tom is grumpy.\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for the given sentences:\n\n<EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom is a PetOwner.\n\nTEXT: Tom is a grumpy person.\nFOL: Tom is a GrumpyPerson.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  Sure, here are the FOL translations for the given sentences:\n\n<EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom = PetOwner(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: Tom = GrumpyPerson(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is a grumpy person.\nFOL: GrumpyPerson(tom)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 161,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom = PetOwner(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>"
   ],
   [
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or if you'd like me to translate any other sentences.",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom is PetOwner(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom = PetOwner(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 162,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> NeitherGrumpyNorAnimalLover(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> NeitherGrumpyNorAnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) | (-GrumpyPerson(tom) & -AnimalLover(tom))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> NeitherGrumpyNorAnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom = PetOwner(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) | (-GrumpyPerson(tom) & -AnimalLover(tom))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) -> NeitherGrumpyPersonNorAnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) | (-GrumpyPerson(tom) & -AnimalLover(tom))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-GrumpyPerson(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom = PetOwner(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom) -> NeitherGrumpyPersonNorAnimalLover(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) -> neither GrumpyPerson nor AnimalLover(tom)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) | -GrumpyPerson(tom) & AnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-GrumpyPerson(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom) -> NeitherGrumpyPersonNorAnimalLover(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> NeitherGrumpyNorAnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> NeitherGrumpyPersonNorAnimalLover(tom)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-GrumpyPerson(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom) -> -AnimalLover(tom)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) -> NeitherGrumpyPersonNorAnimalLover(tom)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom)\n\n</EVALUATE>\"\n\nPlease let me know if you need further assistance!",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) -> ()\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-GrumpyPerson(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom = PetOwner(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom) -> NeitherGrumpyPersonNorAnimalLover(tom)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) -> neither GrumpyPerson nor AnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-GrumpyPerson(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom) -> -AnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: Tom = PetOwner(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom) | (-GrumpyPerson(tom) & -AnimalLover(tom))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-GrumpyPerson(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (OwnsPet(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -MeanToAnimals(tom) -> NeitherGrumpyPersonNorAnimalLover(tom)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> MeanToAnimals(x))\n\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-NiceToAnimals(x) & MeanToAnimals(x))\n\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\n\nTEXT: If someone owns a pet, then they love animals.\nFOL: exists x. (PetOwner(x) -> LoveAnimals(x))\n\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -GrumpyPerson(tom) & -AnimalLover(tom)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 163,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) & Year2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> -Or(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanWriter(daniShapiro)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenByDaniShapiro(FamilyHistory)\n\nTEXT: Family History is a novel written in 2003.\nFOL: NovelWrittenIn2003(FamilyHistory)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedPodcast(daniShapiro, \"FamilySecrets\")\n\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x) & DaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) & Year2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x) & FamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) -> WrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) -> WrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) -> Year(x, 2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x, \"Family Secrets\")\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(x) -> NovelWriter(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(book) & WrittenByPerson(book) -> NovelWriter(book))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro is a novel writer.\nFOL: DaniShapiro(novelWriter)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 164,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(writer)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(AmericanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(writer)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenBy) -> DaniShapiro(writer)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(writtenIn) -> Novel(writtenIn)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(created) -> Podcast(FamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x) & DaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) & Year2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x) & FamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x) & DaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) & Year(x) = 2003\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x) & Name(x) = \"Family Secrets\"\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x, \"FamilySecrets\")\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) -> WrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x) -> FamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x) & DaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) & Year2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x) & FamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> -Or(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(DaniShapiro(x))\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(FamilySecrets(x))\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) & American(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) & WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) & NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) & CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) & AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) & Novel(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(writer)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(AmericanCity)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(novel)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Family Secrets is a novel.\nFOL: FamilySecrets(x) -> Novel(x)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 165,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(book) & WrittenByPerson(book) -> NovelWriter(book))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(bornInBoston)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x) & DaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) & Year2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x) & FamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(bornInBoston)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) -> Year2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x) -> FamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) -> WrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x) -> FamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(bornInBoston)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(book) & WrittenByPerson(book) -> NovelWriter(person))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(bornInBoston)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(writtenByDaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(novelWrittenIn2003)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(createdPodcastNamedFamilySecrets)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(bornInBoston)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> WrittenByDaniShapiro(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcastNamedFamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(DaniShapiro(x))\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(FamilySecrets(x))\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & Novel(x) & Writer(x) -> -Or(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> NovelWrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatedPodcast(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: exists x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) & Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(americanWriter)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: MakeText(FamilyHistory, DaniShapiro)\n\nTEXT: Family History is a novel written in 2003.\nFOL: Year(FamilyHistory, 2003) & Novel(FamilyHistory)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreateText(FamilySecrets, DaniShapiro)\n\nTEXT: Boston is an American city.\nFOL: Boston(americanCity)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(DaniShapiro)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> Novel(x))\n\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) -> Novel(x) -> Writer(x))\n\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro(x) -> AmericanWriter(x)\n\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory(x) -> Writer(x)\n\nTEXT: Family History is a novel written in 2003.\nFOL: FamilyHistory(x) -> Novel(x) -> WrittenIn2003(x)\n\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: DaniShapiro(x) -> CreatePodcast(x) -> FamilySecrets(x)\n\nTEXT: Boston is an American city.\nFOL: Boston(x) -> AmericanCity(x)\n\nTEXT: Dani Shapiro was born in Boston.\nFOL: DaniShapiro(x) -> BornInBoston(x)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 166,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  Sure, here's the FOL translation for the given sentences:\n\n<EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: Yuri is an American.\nFOL: American(yuri)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 167,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  Sure! Here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences you provided:\n\n<EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> NotAmerican(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -AmericanBasketballPlayer(yuri)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or if you'd like me to translate any other sentences."
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 168,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  Sure, here are the FOL translations for each sentence:\n\n<EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 169,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> LargeShoes(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> LargeShoes(yuri)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> NotAmerican(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if -LargeShoes(yuri) then AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if x does not wear largeShoes(yuri) then AmericanBasketballPlayer(x)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if -LargeShoes(yuri) then AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if -LargeShoes(yuri) then AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if x. (LargeShoes(yuri) -> AmericanBasketballPlayer(yuri))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if -LargeShoes(yuri) then AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> LargeShoes(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> LargeShoes(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if -LargeShoes(yuri) then AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> LargeShoes(yuri)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> NotAmerican(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: not Yuri. LargeClothes(Yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if Yuri does not wear LargeShoes(Yuri) then AmericanBasketballPlayer(Yuri)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: not LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if -LargeShoes(yuri) then AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> NotAmerican(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -NotAmerican(yuri) -> AmericanBasketballPlayer(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: not LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: if -LargeShoes(yuri) then AmericanBasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -AmericanBasketballPlayer(yuri) -> -LargeShoes(yuri)\n</EVALUATE>",
    "  Sure, here's the translation of the sentences:\n\n<EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -AmericanBasketballPlayer(yuri) -> LargeShoes(yuri)\n</EVALUATE>\n\nNote that in FOL, we use the exists keyword to indicate that the negation of the statement is also true, i.e. there exists at least one basketball player who is not American. Similarly, we use the all keyword to indicate that the statement is true for all values of the variable x. The - keyword is used to indicate the negation of a statement.",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -American(yuri) -> LargeShoes(yuri)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 170,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -AmericanBasketballPlayer(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: not Yuri. (LargeClothes(Yuri))\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: if Yuri is not AmericanBasketballPlayer(Yuri) then Yuri is BasketballPlayer(Yuri)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -AmericanBasketballPlayer(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: not Yuri. (LargeClothes(Yuri))\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: if Yuri is not AmericanBasketballPlayer(Yuri) then Yuri is BasketballPlayer(Yuri)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -AmericanBasketballPlayer(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: not LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: if -American(yuri) then BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: not LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: if -American(yuri) then BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearsLargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearsLargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: if x is not AmericanBasketballPlayer(yuri) then x is BasketballPlayer(yuri)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  Sure, I'd be happy to help you with that! Here's the translation of the sentences into FOL expressions:\n\n<EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>\n\nI hope this helps! Let me know if you have any questions or need further assistance."
   ],
   [
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: not LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: if x is not AmericanBasketballPlayer(yuri) then x is BasketballPlayer(yuri)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Some basketball players are not American.\nFOL: some x. (BasketballPlayer(x) -> -American(x))\n\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\n\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\n\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 171,
  "responses": [
   [
    "  \"<EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. HappyEvent(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>"
   ],
   [
    "  \"<EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. HappyEvent(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. HappyEvent(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. HappyEvent(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. HappyEvent(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. HappyEvent(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. HappyEvent(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> HappyOrSad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. HappyEvent(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> Happy(x) | Sad(x))\n\nTEXT: At least one event is happy.\nFOL: exists x. Happy(x)\n\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 172,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (Exists y. (SixWayTie(y) & PersonFromBelgium(y)))))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Leaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: Steinhauer(not(Winner(1992 du Maurier Classic)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(PersonInSixWayTie(x)))))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(onLeaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: Steinhauer(notWinner(1992 du Maurier Classic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x, 1992) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992, duMaurierClassic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x, 1992) -> (OneSixWayTie(x) & PersonFromBelgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(onLeaderboard(1992, duMaurierClassic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (ParticipatedIn(x, 1992, duMaurierClassic) -> OnLeaderboard(x, 1992))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: Steinhauer(notWinner(1992, duMaurierClassic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn1992duMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonFromBelgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard) & Descampe(fromBelgium)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> (ParticipatedIn1992duMaurierClassic(x))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: Steinhauer(notWinner)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(onLeaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not(Steinhauer(Winner(1992 du Maurier Classic)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: exists x. Winner(x, 1992) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(x) -> ParticipatedIn(x, 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x y. Leaderboard(x, y) & OneSixWayTie(x, y) & PersonInSixWayTie(x, y) -> Belgium(y)\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(x) & Belgium(x) & OnLeaderboard(x, 1992 du Maurier Classic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. ParticipatedIn(x, 1992 du Maurier Classic) -> OnLeaderboard(x, 1992 du Maurier Classic)\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: exists x. Winner(x, 1992) -> -Steinhauer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x, 1992) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn, 1992)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x, 1992) & Exists(y, Belgium) & (Tie(x, y) & Person(y, 1992))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isFrom, Belgium) & Leaderboard(Descampe, 1992)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992) -> ParticipatedIn(x, 1992))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not(Winner(Steinhauer, 1992))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x, 1992) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn, 1992)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x, 1992) & Exists(y, Belgium) & (Tie(x, y) & Person(y, 1992)) -> Descampe(y))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(from, Belgium) & Leaderboard(descampe, 1992)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992) -> ParticipatedIn(x, 1992))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not Winner(steinhauer, 1992)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: exists x. Winner(x, 1992) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: exists x. Participated(x, 1992 du Maurier Classic) -> Steinhauer(x)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x y. Leaderboard(x, y) -> (OneWayTie(x, y) & PersonFromBelgium(x, y))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Descampe(x) & FromBelgium(x) & OnLeaderboard(x, 1992 du Maurier Classic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Participated(x, 1992 du Maurier Classic) -> OnLeaderboard(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not exists x. Winner(x, 1992) -> Steinhauer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & (ThereWasSixWayTieOn(x) & PersonInSixWayTieFrom(x, Belgium)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Leaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: Steinhauer(not(Winner(1992 du Maurier Classic)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) & -Tie(x) & Person(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(onLeaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) & ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not Steinhauer(Winner(1992 du Maurier Classic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Leaderboard(1992 du Maurier Classic)) & Descampe(Belgium)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not Steinhauer(Winner(1992 du Maurier Classic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(onLeaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> (ParticipatedIn(1992 du Maurier Classic) & x))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not(Winner(Steinhauer))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn1992duMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard) & Belgium(isOnLeaderboard)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn1992duMaurierClassic(x))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not(Steinhauer(winnerOf1992duMaurierClassic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & OneSixWayTie(x) & PersonInSixWayTie(x) & Belgium(PersonInSixWayTie(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Leaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) & ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not Steinhauer(Winner(1992 du Maurier Classic))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: exists x. Winner(x, 1992) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(x) -> ParticipatedIn(x, 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x y. Leaderboard(x, y) -> (OneSixWayTie(x, y) & PersonFromBelgium(x, y))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(x) -> (PersonFromBelgium(x) & OnLeaderboard(x, 1992 du Maurier Classic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992 du Maurier Classic) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: exists x. Winner(x, 1992) -> -Steinhauer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn1992DuMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard) & Belgium(isOnLeaderboard)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn1992DuMaurierClassic(x))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: Steinhauer(notWinner)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: exists x. Winner(x, 1992) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(x) -> Participated(x, 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(x) -> Belgium(x) & OnLeaderboard(x, 1992 du Maurier Classic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992 du Maurier Classic) -> Participated(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not exists x. Winner(x, 1992) -> Steinhauer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: exists x. Winner(x, 1992) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: exists x. Participated(x, 1992 du Maurier Classic) -> Steinhauer(x)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & OneSixWayTie(x)) -> (PersonInSixWayTie(x) & FromBelgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Descampe(x) & FromBelgium(x)) -> OnLeaderboard(x, 1992 du Maurier Classic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992 du Maurier Classic) -> Participated(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: exists x. (Winner(x, 1992) -> Steinhauer(x)) -> NotWinner(x, 1992 du Maurier Classic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Leaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> (ParticipatedIn(1992 du Maurier Classic) & x))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not(Steinhauer(Winner(1992 du Maurier Classic)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x, 1992) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn, 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x, 1992 du Maurier Classic) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(from, Belgium) & Leaderboard(descampe, 1992 du Maurier Classic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992 du Maurier Classic) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not Steinhauer(winner, 1992 du Maurier Classic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn1992DuMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) & Exists(y) & -Belgium(y) -> (OneSixWayTie(x) & PersonInSixWayTie(x, y))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard) & Belgium(descampe)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn1992DuMaurierClassic(x))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not(Winner(steinhauer))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x, 1992) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn, 1992)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x, 1992) & Exists(y, Belgium) -> (SixWayTie(x, y) & PersonInSixWayTie(y, 1992))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOn, Leaderboard(1992))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992) -> ParticipatedIn(x, 1992))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: not(Winner(Steinhauer, 1992))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: exists x. Winner(x, 1992) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(x) -> ParticipatedIn(x, 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & SixWayTie(x) & PersonInTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(x) & Belgium(x) -> OnLeaderboard(x, 1992 du Maurier Classic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992 du Maurier Classic) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: exists x. Winner(x, 1992) -> -Steinhauer(x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn1992duMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard) & Belgium(isOnLeaderboard)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> (ParticipatedIn1992duMaurierClassic(x)))\n\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: Steinhauer(notWinnerOf1992duMaurierClassic)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 173,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isInSixWayTie(1992 du Maurier Classic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: exists x. Winner(x, 1992) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: exists x. Participated(x, 1992) -> Steinhauer(x)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x y. Leaderboard(x, y) -> (OneSixWayTie(x, y) & PersonFromBelgium(x, y))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (PersonFromBelgium(x) & OnLeaderboard(x, 1992))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992) -> Participated(x, 1992))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (InSixWayTie(x) & OnLeaderboard(x, 1992))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: winner(1992 du Maurier Classic) = Steinhauer\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer -> participated(1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & -OnePerson(x) & Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe -> Belgium & onLeaderboard(1992 du Maurier Classic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> participated(1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe -> sixWayTie(1992 du Maurier Classic)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: there exists x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(steinhauer) -> ParticipatedIn(steinhauer, duMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & -OnePersonInSixWayTie(x) & OnePersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(descampe) -> Belgium(descampe) & OnLeaderboard(descampe, duMaurierClassic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic) -> ParticipatedIn(x, duMaurierClassic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (OnLeaderboard(x, duMaurierClassic) & -SixWayTie(x) & SixWayTie(x) -> Descampe(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(onLeaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(inSixWayTie(1992 du Maurier Classic))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: there exists x. Winner(x) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(steinhauer) -> ParticipatedIn(steinhauer, duMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (Exists y. SixWayTie(x, y) & PersonFromBelgium(y)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(descampe) -> (PersonFromBelgium(descampe) & OnLeaderboard(descampe, duMaurierClassic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic) -> ParticipatedIn(x, duMaurierClassic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(descampe) -> (InSixWayTie(descampe, duMaurierClassic) & OnLeaderboard(descampe, duMaurierClassic))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: winner(1992 du Maurier Classic) = Steinhauer\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer -> participated(1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: (existence(person) -> (leaderboard(person) & country(person) = Belgium))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe -> country(Descampe) = Belgium & leaderboard(Descampe)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all(person on leaderboard) -> participated(1992 du Maurier Classic)\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe -> leaderboard(Descampe) & six-way tie(Descampe)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Belgium) & Descampe(onLeaderboard(1992 du Maurier Classic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> (ParticipatedIn(1992 du Maurier Classic) & x))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(inSixWayTie(1992 du Maurier Classic))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: winner(1992 du Maurier Classic) = Steinhauer\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer -> participated(1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: (Leaderboard(1992 du Maurier Classic) -> OneSixWayTie) & (SixWayTie(1992 du Maurier Classic) -> Person(Belgium))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe -> Person(Belgium) & OnLeaderboard(1992 du Maurier Classic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: All x. (OnLeaderboard(x) -> Participated(x, 1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe -> InSixWayTie(Leaderboard(1992 du Maurier Classic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & (ThereWasSixWayTieOn(x) & PersonFromBelgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(fromBelgium) & Descampe(onLeaderboard(1992 du Maurier Classic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(inSixWayTie(Leaderboard(1992 du Maurier Classic)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard(1992 du Maurier Classic)) & Descampe(from(Belgium))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isInSixWayTie(Leaderboard(1992 du Maurier Classic)))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x, 1992) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn, 1992)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x, 1992) & -OnePersonInSixWayTie(x) & OnePersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Belgium, onLeaderboard, 1992)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992) -> ParticipatedIn(x, 1992))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(inSixWayTie, leaderboard, 1992)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonFromBelgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isFromBelgium & onLeaderboard(1992 du Maurier Classic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isInSixWayTie(1992 du Maurier Classic))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & (OneSixWayTieOnLeaderboard(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(fromBelgium & onLeaderboard(1992 du Maurier Classic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (ParticipatedIn(x, 1992 du Maurier Classic) -> OnLeaderboard(x))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(inSixWayTie(1992 du Maurier Classic))\n</EVALUATE>\n\nNote: In FOL, the \"->\" symbol is used to indicate the conclusion of a logical rule, and the variables are represented by uppercase letters (e.g. \"x\"). The \"exists\" and \"all\" quantifiers are used to indicate the scope of the rule, with \"exists\" indicating that the rule applies to at least one object, and \"all\" indicating that the rule applies to every object.",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard(1992 du Maurier Classic)) & Descampe(isFromBelgium)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> (ParticipatedIn(1992 du Maurier Classic) -> x))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isInSixWayTie(1992 du Maurier Classic))\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: winner(1992 du Maurier Classic) = Steinhauer\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: participated(Steinhauer, 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: (exists x. (leaderboard(x) & six-wayTie(x) & personInSixWayTie(x) = Belgium))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Belgium(descampe) & leaderboard(x) & personInSixWayTie(x) = descampe)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (participated(x, 1992 du Maurier Classic) -> leaderboard(x))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (leaderboard(x) & six-wayTie(x) & personInSixWayTie(x) = descampe)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: there exists x. Winner(x) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(steinhauer) -> ParticipatedIn(steinhauer, duMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & ThereWasSixWayTieOnLeaderboard(x) & PersonInSixWayTie(x) -> Belgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(descampe) -> Belgium(descampe) & OnLeaderboard(descampe, duMaurierClassic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic) -> ParticipatedIn(x, duMaurierClassic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (OnLeaderboard(x, duMaurierClassic) & InSixWayTie(x) -> x)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: winner(1992 du Maurier Classic) = Steinhauer\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: participated(Steinhauer, 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & (Tie(x) & Person(x) = Belgium))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Leaderboard(x) & Person(x) = Belgium & Descampe = x)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Participated(x, 1992 du Maurier Classic) -> OnLeaderboard(x))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Tie(x) & OnLeaderboard(x) & Person(x) = Belgium & Descampe = x)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonInSixWayTie(x) -> Belgium(x)))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isOnLeaderboard(1992 du Maurier Classic)) & Belgium(Descampe)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(isInSixWayTie(Leaderboard(1992 du Maurier Classic)))\n</EVALUATE>\n\nNote: In FOL, we use the `all x` syntax to indicate that the statement holds for all values of x, and the `->` operator to indicate the conversion of a sentence into a logical statement. The `ParticipatedIn` function is defined as `(x, y) -> x participated in y`.",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: winner(1992) = Steinhauer\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: participated(Steinhauer, 1992)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (leaderboard(x) & sixwaytie(x) & country(x) = Belgium)\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: country(Descampe) = Belgium & leaderboard(Descampe)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (leaderboard(x) & participated(x, 1992))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (leaderboard(x) & sixwaytie(x) & country(x) = Belgium & Descampe = x)\n</EVALUATE>\n\nNote: Please let me know if you need any further assistance."
   ],
   [
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: winner(1992 du Maurier Classic) = Steinhauer\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: participated(Steinhauer, 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & -OnePersonInSixWayTie(x) & PersonInSixWayTie(x) = Belgium)\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Leaderboard(x) & PersonInSixWayTie(x) = Belgium & Descampe = x)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Participated(x, 1992 du Maurier Classic) -> OnLeaderboard(x))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (OnLeaderboard(x) & InSixWayTie(x) & Leaderboard(x) = 1992 du Maurier Classic)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: all x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participatedIn(1992 du Maurier Classic))\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: all x. (Leaderboard(x) -> (OneSixWayTie(x) & PersonFromBelgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Leaderboard(1992 du Maurier Classic)) & Descampe(PersonFromBelgium(1992 du Maurier Classic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, 1992 du Maurier Classic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(SixWayTie(Leaderboard(1992 du Maurier Classic)))\n</EVALUATE>\n\nNote: In FOL, we use the `all x` notation to indicate that a property holds for all values of the variable `x`. We also use the `Leaderboard(x)` notation to indicate that a property holds for a particular leaderboard, where `x` is the name of the leaderboard.",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: there exists x. (Winner(x) -> Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(steinhauer) -> ParticipatedIn(steinhauer, duMaurierClassic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x y. (Leaderboard(x) & (Leaderboard(y) & -Tie(x, y))) | (-exists x y. (Leaderboard(x) & Leaderboard(y) & Tie(x, y))) & exists z. (Belgium(z) & InLeaderboard(z))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(descampe) -> Belgium(descampe) & InLeaderboard(descampe, duMaurierClassic)\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (InLeaderboard(x, duMaurierClassic) -> ParticipatedIn(x, duMaurierClassic))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (InLeaderboard(x, duMaurierClassic) & Tie(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: there exists x. Winner(x) -> Steinhauer(x)\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(x) -> ParticipatedIn(x, \"1992 du Maurier Classic\")\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & SixWayTie(x) & PersonFromBelgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(x) & Belgium(x) & OnLeaderboard(x, \"1992 du Maurier Classic\")\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) & ParticipatedIn(x, \"1992 du Maurier Classic\"))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(x) & InSixWayTie(x, \"1992 du Maurier Classic\")\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: there exists x. (Winner(x) & 1992 du Maurier Classic(x) & Steinhauer(x))\n\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(participated in 1992 du Maurier Classic)\n\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & OneSixWayTie(x) & PersonFromBelgium(x))\n\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(is from Belgium & on Leaderboard(1992 du Maurier Classic))\n\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn1992 du Maurier Classic(x))\n\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(is in SixWayTie(1992 du Maurier Classic))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 174,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or has Legs\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -HasLegs(KiKi)) | (Terricolous(KiKi) & HasLegs(KiKi)))\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> (-Like(Jane, x)))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. (NeitherJumpsNorHasLegs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi)))\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (-Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or Legs\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous(KiKi) or Legs(KiKi)\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or HasLegs\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricous or HasLegs\n\nTEXT: KiKi is terricolous.\nFOL: Terricous(KiKi)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -HasLegs(KiKi)) | (Terricolous(KiKi) & HasLegs(KiKi)))\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -HasLegs(KiKi)) | (Terricolous(KiKi) & HasLegs(KiKi)))\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> (-Like(Jane, x)))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either hasLegs or isTerricolous\n\nFOL: exists x. (-Jump(x) & -Legs(x)) | (Terricolous(x) & Legs(x))\n\nKiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or Legs\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi is terricolous.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous(KiKi) or Legs(KiKi)\n\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 175,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps nor HasLegs, -> TerricolousOrHasLegs(KiKi)\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -HasLegs(KiKi)) | (-Terricolous(KiKi) & HasLegs(KiKi)))\n\nTEXT: KiKi barks and is a dog.\nFOL: all x. (Bark(KiKi) & Dog(KiKi))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> (-Like(Jane, x)))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or HasLegs\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> (-Like(Jane, x)))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terrific(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps nor HasLegs -> TerrificOrHasLegs(KiKi)\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps nor HasLegs, -> TerricolousOrHasLegs(KiKi)\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi Barks & KiKi is Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi barks and is a dog.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> Terricolous(KiKi) or Legs(KiKi)\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or HasLegs\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (-Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or Legs\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> (-Like(Jane, x)))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. (NeitherJumpsNorHasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi)))\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or HasLegs\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (-Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi barks and is a dog.\nFOL: all x. (Bark(KiKi) & Dog(KiKi))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. (NeitherJumpsNorHasLegs(KiKi) -> TerricolousOrLegs(KiKi))\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: exists x. (-Jump(x) & -Legs(x)) -> Terricolous(x) or Legs(x)\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous(KiKi) or Legs(KiKi)\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks and Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or Legs\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks and Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (-Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> (-Like(Jane, x)))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (-Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi barks and is a dog.\nFOL: -Jump(KiKi) & -HasLegs(KiKi) -> Terricolous(KiKi) or HasLegs(KiKi)\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either has legs or is terricolous.\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either has legs or is terricolous.\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi is a dog and barks.\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or has Legs\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks and Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi either Terricolous or has Legs\n\nTEXT: KiKi barks and is a dog.\nFOL: KiKi barks & Dog(KiKi)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 176,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (-Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -IsA(KiKi, Dog)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. (NeitherJumpsNorHasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: all x. (NeitherBarksNorIsADog(KiKi) -> (not Bark(KiKi) & not IsADog(KiKi))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: exists x. (-Jump(x) & -Legs(x)) -> Terricolous(x) or Legs(x)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: exists x. (-Bark(x) & -Dog(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps(KiKi) nor HasLegs(KiKi) -> Terricolous(KiKi) or HasLegs(KiKi)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither Bark(KiKi) nor IsA Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: all x. ((-Bark(KiKi) & -Dog(KiKi)) | (KiKi!= Dog(KiKi)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(kiKi) & -HasLegs(kiKi)) | (Terricolous(kiKi) & HasLegs(kiKi)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -IsA(kiKi, Dog)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither jumps nor has legs. (Terricolous(KiKi) | HasLegs(KiKi))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither barks nor is a Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: exists x. (-Jump(x) & -Legs(x)) -> (Terricolous(x) | Legs(x))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -IsA(KiKi, Dog)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. (NeitherJumpsNorHasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: all x. (NeitherBarksNorIsADog(KiKi) -> -Bark(KiKi) & -IsADog(KiKi))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -HasLegs(KiKi)) | (Terricolous(KiKi) & HasLegs(KiKi)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: all x. ((-Bark(KiKi) & -IsA(KiKi, Dog)) | (IsA(KiKi, Dog) & -Bark(KiKi)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps(KiKi) nor HasLegs(KiKi) -> Terricolous(KiKi) or HasLegs(KiKi)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither Bark(KiKi) nor IsDog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps(KiKi) & -HasLegs(KiKi) -> Terricolous(KiKi) or HasLegs(KiKi)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither Bark(KiKi) & IsA Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (-Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: all x. (-Bark(KiKi) & -Dog(KiKi))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (TerrIColous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps(KiKi) nor HasLegs(KiKi) -> TerrIColous(KiKi) or HasLegs(KiKi)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither Bark(KiKi) nor IsA Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terrific(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -HasLegs(KiKi)) | (Terrific(KiKi) & HasLegs(KiKi)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: all x. (Bark(KiKi) & Dog(KiKi) -> -KiKi)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: exists x. (-Jump(x) & -Legs(x)) -> (Terricolous(x) | Legs(x))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: exists x. (-Bark(x) & -Dog(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> (-Like(Jane, x)))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither jumps nor has legs -> Terricolous(KiKi) or Legs(KiKi)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither barks nor is a Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: all x. ((-Jump(KiKi) & -Legs(KiKi)) | (-Terricolous(KiKi) & Legs(KiKi)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: all x. ((-Bark(KiKi) & -Dog(KiKi)) | (-KiKi))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps(KiKi) nor HasLegs(KiKi) -> Terricolous(KiKi) or HasLegs(KiKi)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither Bark(KiKi) nor IsA Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps(KiKi) nor HasLegs(KiKi) -> Terricolous(KiKi) or HasLegs(KiKi)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither Bark(KiKi) nor IsDog(KiKi)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: exists x. (-Jump(x) & -Legs(x)) -> (Terricolous(x) | Legs(x))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: exists x. (-Bark(x) & -Dog(x))\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: exists x. ((-Jump(x) & -Legs(x)) | (Terricous(x) & Legs(x)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: exists x. (-Bark(x) & -Dog(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: KiKi neither Jumps(KiKi) nor HasLegs(KiKi) -> Terricolous(KiKi) or HasLegs(KiKi)\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: KiKi neither Bark(KiKi) nor IsA Dog(KiKi)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: exists x. (-Jump(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -IsA(KiKi, Dog)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like(Jane, x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> Like(Jane, x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: exists x. ((-Jump(x) & -Legs(x)) | (Terricolous(x) & Legs(x)))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: exists x. (-Bark(x) & -Dog(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 177,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x, \"Ailton Silva\"))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Braga(x) & Braga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Braga(x) & -Nautico(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) & -LoanedTo(x, y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) -> -LoanedTo(x, Fluminense))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysForNautico(x) -> -Brazillian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) & (Nautico = x) | (Braga = y)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & =Fluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x, \"Ailton Silva\"))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x, \"Ailton Silva\") & PlaysForBraga(x, \"Ailton\"))))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> (PlaysForFluminense(x, \"Ailton\"))))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysForNautico(x, \"Ailton Silva\") -> (-BrazillianFootballer(x)))))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  Sure! Here's the FOL translation for each sentence:\n\n<EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x, \"Ailton Silva\"))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x, \"Ailton Silva\") & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> PlaysForFluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysForNautico(x) -> (-Brazillian(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysForNautico(x) -> -Brazillian(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNauticoOrBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -PlaysForBraga(x) | -PlaysForNautico(x))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -BrazillianFootballer(nautico)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Braga(x) | Braga(x) & FootballClub(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Fluminense(x) | Fluminense(x) & FootballClub(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Braga(x) | Braga(x) & FootballClub(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Fluminense(x) | Fluminense(x) & FootballClub(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) & (Nautico(x) & Braga(y)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & Fluminense(x))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (-BrazillianFootballer(x) & PlaysForNautico(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 178,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) & SameAs(x, y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & -SameAs(x, Fluminense))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysForFootballClub(AiltonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysForFootballClub(AiltonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysForFootballClub(AiltonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysForFootballClub(AiltonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> AlongWithBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlayForFootballClub(AiltonSilva)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -PlaysForNautico(x) & -PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -FootballClub(ailtonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Braga(x) | Braga(x) & FootballClub(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Fluminense(x) | Fluminense(x) & FootballClub(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: all x. (PlayForFootballClub(x) & -AiltonSilva(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysFor(x, Nautico) & PlaysFor(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysFor(x, Fluminense))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysForFootballClub(AiltonSilva)\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlayForFootballClub(AiltonSilva)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysFor(x, Nautico, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & PlaysFor(x, Fluminense))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysFor(AiltonSilva, any FootballClub)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (Braga(x) & Nautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: all x. (FootballPlayer(x) -> -PlaysForFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Braga(x) | Braga(x) & FootballClub(x))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -FootballClub(ailtonSilva)\n\n</EVALUATE>",
    "  \"<EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -Player(AiltonSilva)\n\n</EVALUATE>\"\n\nExplanation:\n\n* TEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\")) - This sentence is translated into FOL as \"all x. (BornIn1995(x) -> CommonName(x, 'Ailton'))\", where \"CommonName(x, 'Ailton'\" is a function that takes two arguments, \"x\" and \"name\", and returns the value of \"name\" if \"x\" is a football player born in 1995, otherwise returns \"undefined\"\n* TEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x)) - This sentence is translated into FOL as \"all x. (Player(x) & LoanedOutToBraga(x))\", where \"Player(x)\" and \"LoanedOutToBraga(x)\" are functions that take one argument, \"x\", and return the value of \"x\" if it is a football player, otherwise return \"undefined\"\n* TEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x)) - This sentence is translated into FOL as \"all x. (BrazillianFootballer(x) & PlaysForNautico(x))\", where \"BrazillianFootballer(x)\" and \"PlaysForNautico(x)\" are functions that take one argument, \"x\", and return the value of \"x\" if it is a Brazillian footballer, otherwise return \"undefined\"\n* TEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga)) - This sentence is translated into FOL as \"all x. (FootballClub(x) & -Or(x, Braga))\", where \"FootballClub(x)\" is a function that takes one argument, \"x\", and returns the value of \"x\" if it is a football club, otherwise return \"undefined\"\n* TEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense)) - This sentence is translated into FOL as \"all x. (FootballClub(x) & -Or(x, Fluminense))\", where \"FootballClub(x)\" is a function that takes one argument, \"x\", and returns the value of \"x\" if it is a football club, otherwise return \"undefined\"\n* TEXT: Ailton Silva does not play for a football club.\nFOL: -Player(AiltonSilva) - This sentence is translated into FOL as \"-Player(AiltonSilva)\", where \"Player(x)\" is a function that takes one argument, \"x\", and returns the value of \"x\" if it is a football player, otherwise return \"undefined\"\n\nNote: In FOL, functions are defined using the \"-\" operator, and the function",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysForFootballClub(AiltonSilva)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> AlongWithBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: none x. (FootballPlayer(x) -> DoesNotPlayFor(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Braga(x) | Braga(x) & FootballClub(x))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -FootballPlayer(ailtonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -PlaysForNautico(x) | PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -FootballClub(ailtonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysForFootballClub(AiltonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> AlongWithBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -Player(ailtonSilva)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: none x. (Player(x) & PlaysForFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlayForFootballClub(Ailton Silva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & Equal(x, Fluminense))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -All x. (FootballPlayer(x) & PlaysForFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlayForFootballClub(AiltonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva does not play for a football club.\nFOL: none x. (FootballPlayer(x) & PlaysFor(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 179,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: all x. (-LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutTo(x, \"Braga\"))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysFor(x, \"Nautico\"))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysFor(x, \"Nautico\") & PlaysFor(x, \"Braga\"))))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> PlaysFor(x, \"Fluminense\"))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: all x. (-LoanedOutTo(x, \"FootballClub\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> AlongWithBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> -Ailton(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutTo(x, \"Braga\"))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysFor(x, \"Nautico\"))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, \"Braga\"))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutTo(ailton, \"football club\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: all x. (-LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) & -LoanedOutTo(x, y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & -LoanedOutTo(x, Fluminense))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutTo(Ailton, Fluminense)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (Braga(x) & Nautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) -> (Nautico(x) & Nautico(y)) | (Braga(x) & Braga(y)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: all x. (-LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: all x. (-LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: all x. (-LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutTo(x, \"Braga\"))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysFor(x, \"Nautico\"))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, \"Braga\"))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, \"Fluminense\"))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutTo(ailton, \"football club\")\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) -> PlaysForFluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> AlongWithBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: all x. (-LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) & (x!= y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & Not(LoanedOutTo(x)))\n\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutTo(ailton)\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 180,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> AiltonSilva(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> FootballPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> Fluminense(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Braga(x) | Braga(x) & FootballClub(x))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedForFluminense(ailtonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & EqualToFluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> FootballPlayer(x))\n\n</EVALUATE>"
   ],
   [
    "  \"<EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\")\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> FootballPlayer(x))\n\n</EVALUATE>\"",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedForFluminense(ailtonSilva)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (Braga(x) & Nautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> AiltonSilva(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> AiltonSilva(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) & -LoanedOutTo(x, y))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: playedFor(ailtonSilva, fluminense)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> Fluminense(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & Equal(x, Fluminense))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) & -Or(x, Braga))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (Nautico(x) & Braga(y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> Fluminense(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & =Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> FootballPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Braga(x) | Braga(x) & FootballClub(x))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedForFluminense(ailtonSilva)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & Equal(x, Fluminense))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> FootballPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> AiltonSilva(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> FootballPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & =Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) & =AiltonSilva(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedForFluminense(ailtonSilva)\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> FootballPlayer(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (Braga(x) & Nautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> AiltonSilva(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> AlongWithBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> AiltonSilva(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: playedFor(ailtonSilva, fluminense)\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva played for Fluminense.\nFOL: all x. (PlayedForFluminense(x) -> FootballPlayer(x))\n\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 181,
  "responses": [
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (Braga(x) & Nautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (AiltonSilva(x) & FootballClub(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (Braga(x) & Nautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (AiltonSilva(x) & FootballClub(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & Equal(x, Fluminense))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (FootballClub(x) & -AiltonSilva(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x, \"Ailton Silva\"))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x, \"Ailton Silva\") & PlaysForBraga(x, \"Ailton Silva\"))))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> PlaysForFluminense(x, \"Ailton Silva\"))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> PlaysFor(x, \"Ailton Silva\"))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> AlongWithBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> AiltonSilva(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & PlaysForNautico(x) & PlaysForBraga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & PlaysForFluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (Nautico(x) & Braga(y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) & -Or(x, Fluminense))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> PlaysForBraga(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> -Braga(x) & Braga(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> FootballClub(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (Nautico(x) & Braga(y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (Braga(x) & Nautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (AiltonSilva(x) & FootballClub(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> -PlaysForBraga(x) & PlaysForNautico(x))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> PlaysFor(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> FootballClub(x))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) -> (Nautico(x) & Nautico(y)) | (Braga(x) & Braga(y)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (AiltonSilva(x) & FootballClub(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) & -LoanedOutTo(x, y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) & -LoanedOutTo(x, Fluminense))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: exists x. (LoanedOutTo(AiltonSilva, x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (Braga(x) & Nautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (AiltonSilva(x) & FootballClub(x)))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) -> PlaysForFluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\n</EVALUATE>"
   ],
   [
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonName(x, \"Ailton\"))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) & -Or(x, Braga))\n\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> FootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForBraga(x) & PlaysForNautico(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> PlaysForBraga(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) & LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) & PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (Nautico(x) & Braga(y))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Player(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: all x. (FootballClub(x) -> (PlaysForNautico(x) & PlaysForBraga(x)))\n\nTEXT: Fluminense is a football club.\nFOL: all x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> PlaysForNautico(x))\n\n</EVALUATE>",
    "  <EVALUATE>\n\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> KnownAsAilton(x))\n\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (FootballPlayer(x) -> LoanedOutToBraga(x))\n\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (BrazillianFootballer(x) -> PlaysForNautico(x))\n\nTEXT: Nautico is a football club along with Braga.\nFOL: exists x y. (FootballClub(x) & FootballClub(y) -> (Nautico(x) & Braga(y)))\n\nTEXT: Fluminense is a football club.\nFOL: exists x. (FootballClub(x) -> Fluminense(x))\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: all x. (LoanedOutToFootballClub(x) -> (AiltonSilva(x) & FootballClub(x)))\n\n</EVALUATE>"
   ]
  ]
 }
]