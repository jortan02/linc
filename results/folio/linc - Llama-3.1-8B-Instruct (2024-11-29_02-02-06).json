[
 {
  "index": 0,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngage(x) & AttendSchool(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShows(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: (AttendAndEngage(bonnie) & AttendSchool(bonnie)) | (-AttendAndEngage(bonnie) & -AttendSchool(bonnie))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShows(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInTalentShows(x) | Inactive(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bonnie) & VeryEngaged(bonnie) & Attend(bonnie)) | (-Attend(bonnie) & -VeryEngaged(bonnie) & -Attend(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInTalentShows(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & AttendSchool(bonnie)) | (-AttendAndEngage(bonnie) & -AttendSchool(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShows(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInTalentShows(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (AttendAndVeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. ((PerformInSchoolTalentShowsOften(x) & -InactiveAndDisinterested(x)) | (-PerformInSchoolTalentShowsOften(x) & InactiveAndDisinterested(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) & WishToFurtherAcademicCareers(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: ((AttendAndVeryEngaged(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendAndVeryEngaged(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (AttendAndAreVeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShowsOften(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndAreVeryEngaged(bonnie) & Student(bonnie)) | (-AttendAndAreVeryEngaged(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (AttendAndEngageWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShowsOften(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngageWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendAndEngageWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (TalentShow(someone) | Inactive(someone)) | -Inactive(someone)\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (AcademicCareer(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bonnie) & Engaged(bonnie) & Attend(school)) | (-Attend(bonnie) & -Engaged(bonnie) & -Attend(school)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: TalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (exists x. TalentShow(x)) | (exists x. InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareer(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bonnie) & Engaged(bonnie) & Attend(bonnie)) | (-Attend(bonnie) & -Engaged(bonnie) & -Attend(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: TalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngage(x) & AttendSchool(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShows(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungAndWishToFurtherAcademicCareer(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: (AttendAndEngage(bonnie) & AttendSchool(bonnie)) | (-AttendAndEngage(bonnie) & -AttendSchool(bonnie))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShows(bonnie)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (TalentShow(x) | Inactive(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (Student(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bonnie) & Engaged(bonnie) & Student(bonnie)) | (-Attend(bonnie) & -Engaged(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: TalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngaged(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngaged(bonnie) & Student(bonnie)) | (-AttendAndEngaged(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShows(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInTalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishFurtherAcademic(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & AttendSchool(bonnie)) | (-AttendAndEngage(bonnie) & -AttendSchool(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInTalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendSchoolEvents(x) & VeryEngagedWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) | InactiveAndDisinterestedMembers(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMembers(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendSchoolEvents(bonnie) & VeryEngagedWithSchoolEvents(bonnie) & Student(bonnie)) | (-AttendSchoolEvents(bonnie) & -VeryEngagedWithSchoolEvents(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShows(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShowsOften(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> StudentAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: ((AttendAndEngaged(bonnie) & StudentAttendsSchool(bonnie)) | (-AttendAndEngaged(bonnie) & -StudentAttendsSchool(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShow(x) -> (AttendSchoolEvents(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) & WishToFurtherAcademicCareers(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendSchoolEvents(bonnie) & AttendSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -AttendSchool(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (AttendAndAreVeryEngagedWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShowsOften(someone) | InactiveAndDisinterestedInCommunity(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedInCommunity(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherAcademicCareersAndEducationalOpportunities(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndAreVeryEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendAndAreVeryEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShowsOften(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShow(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (AttendEvents(x) & EngagedWithEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInTalentShow(x) | InactiveCommunity(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunity(x) -> ChaperoneDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (AcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendEvents(bonnie) & EngagedWithEvents(bonnie) & Student(bonnie)) | (-AttendEvents(bonnie) & -EngagedWithEvents(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInTalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (TalentShow(x) | Inactive(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (AcademicCareers(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bonnie) & Engaged(bonnie) & Attend(bonnie)) | (-Attend(bonnie) & -Engaged(bonnie) & -Attend(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: TalentShow(bonnie)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (TalentShow(someone) | Inactive(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (AcademicCareers(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bonnie) & Engaged(bonnie) & Attend(someone)) | (-Attend(bonnie) & -Engaged(bonnie) & -Attend(someone)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: TalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (AttendAndEngage(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInTalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInTalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShow(x) -> AttendAndEngageWithSchoolEvents(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShow(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) & WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngageWithSchoolEvents(bonnie) & Student(bonnie)) | (-AttendAndEngageWithSchoolEvents(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShow(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndVeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsTheSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareers(x) -> StudentWhoAttendsTheSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: ((AttendAndVeryEngaged(bonnie) & StudentWhoAttendsTheSchool(bonnie)) | (-AttendAndVeryEngaged(bonnie) & -StudentWhoAttendsTheSchool(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShows(bonnie)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendSchoolEvents(x) & VeryEngagedWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendSchoolEvents(bonnie) & VeryEngagedWithSchoolEvents(bonnie) & Student(bonnie)) | (-AttendSchoolEvents(bonnie) & -VeryEngagedWithSchoolEvents(bonnie) & -Student(bonnie)))\nTEXT: Bonnie performs in school talent shows often.\nFOL: PerformInSchoolTalentShows(bonnie)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 1,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngaged(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendAndEngaged(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) -> (StudentWhoAttendsSchool(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (TalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChild(x) | Teenager(x)) & WishToFurther(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChild(bonnie) & WishToFurther(bonnie) & Chaperone(bonnie)) | (-YoungChild(bonnie) & -WishToFurther(bonnie) & Chaperone(bonnie)) -> (Student(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (TalentShow(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x)) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & Chaperone(bonnie)) | (-YoungChildOrTeenager(bonnie) & Chaperone(bonnie)) -> (Student(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (exists x. TalentShow(x) | InactiveCommunity(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunity(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & FurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: ((Attend(bonnie) & VeryEngaged(bonnie) & Student(bonnie)) | (-Attend(bonnie) & -VeryEngaged(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & Chaperone(bonnie)) | (-YoungChildOrTeenager(bonnie) & Chaperone(bonnie)) -> (Student(bonnie) | InactiveCommunity(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendSchoolEvents(x) & VeryEngagedWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(someone) | InactiveAndDisinterestedMemberOfCommunity(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMemberOfCommunity(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendSchoolEvents(bonnie) & VeryEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -VeryEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) -> (StudentWhoAttendsSchool(bonnie) | InactiveAndDisinterestedMemberOfCommunity(bonnie)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (TalentShow(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHSdance(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHSdance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bonnie) & VeryEngaged(bonnie) & Attend(bonnie)) | (-Attend(bonnie) & -VeryEngaged(bonnie) & -Attend(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneHSdance(bonnie) | -YoungChildOrTeenager(bonnie)) -> (Attend(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (TalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x)) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneDance(bonnie)) | (-YoungChildOrTeenager(bonnie) & ChaperoneDance(bonnie))) -> (Student(bonnie) | InactiveAndDisinterested(bonnie))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDances(bonnie))) -> (Student(bonnie) | InactiveAndDisinterested(bonnie))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInTalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungAndTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: (AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungAndTeenager(bonnie) & WishToFurtherAcademicCareer(bonnie) & ChaperoneDance(bonnie)) | (-YoungAndTeenager(bonnie) & -WishToFurtherAcademicCareer(bonnie))) -> (Student(bonnie) | InactiveAndDisinterested(bonnie))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((WishToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-WishToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) -> (Student(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. ((TalentShow(x) | Inactive(x)) & -Inactive(x) | Inactive(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (AcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((AcademicCareer(bonnie) & Chaperone(bonnie)) | (-AcademicCareer(bonnie) & Chaperone(bonnie)) -> (Student(bonnie) | Inactive(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShow(x) -> (AttendSchoolEvents(x) & VeryEngagedWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShow(people) | InactiveAndDisinterestedMember(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendSchoolEvents(bonnie) & VeryEngagedWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -VeryEngagedWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) -> (StudentWhoAttendsSchool(bonnie) | InactiveAndDisinterestedMember(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & FurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDances(bonnie))) -> (Student(bonnie) | InactiveAndDisinterested(bonnie))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendSchoolEvents(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShows(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendSchoolEvents(bonnie) & VeryEngaged(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -VeryEngaged(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) -> (StudentWhoAttendsSchool(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (AttendSchoolEvents(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInTalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & FurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: ((AttendSchoolEvents(bonnie) & VeryEngaged(bonnie) & Student(bonnie)) | (-AttendSchoolEvents(bonnie) & -VeryEngaged(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneDances(bonnie) | -YoungChildOrTeenager(bonnie)) -> (Student(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (SchoolTalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. ((SchoolTalentShow(x) & -InactiveAndDisinterested(x)) | (-SchoolTalentShow(x) & InactiveAndDisinterested(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bonnie) & VeryEngaged(bonnie) & Student(bonnie)) | (-Attend(bonnie) & -VeryEngaged(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((WishToFurtherAcademicCareer(bonnie) & Chaperone(bonnie)) | (-WishToFurtherAcademicCareer(bonnie) & -Chaperone(bonnie)) -> (Student(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDances(bonnie)) -> (Student(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInTalentShows(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDances(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareer(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: (AttendAndEngage(bonnie) & AttendSchool(bonnie)) | (-AttendAndEngage(bonnie) & -AttendSchool(bonnie))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((WishToFurtherAcademicCareer(bonnie) & ChaperoneDances(bonnie)) | (-WishToFurtherAcademicCareer(bonnie) & -ChaperoneDances(bonnie))) -> (AttendSchool(bonnie) | InactiveAndDisinterested(bonnie))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (AttendAndEngageWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. ((PerformInSchoolTalentShowsOften(x) & -InactiveAndDisinterested(x)) | (-PerformInSchoolTalentShowsOften(x) & InactiveAndDisinterested(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngageWithSchoolEvents(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendAndEngageWithSchoolEvents(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) -> (StudentWhoAttendsSchool(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (SchoolTalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. ((SchoolTalentShow(x) & -InactiveAndDisinterested(x)) | (-SchoolTalentShow(x) & InactiveAndDisinterested(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHSdance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHSdance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x)) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneHSdance(bonnie)) | (-YoungChildOrTeenager(bonnie) & ChaperoneHSdance(bonnie))) -> ((Student(bonnie) & -InactiveAndDisinterested(bonnie)) | (-Student(bonnie) & InactiveAndDisinterested(bonnie)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (TalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneDance(bonnie)) | (-YoungChildOrTeenager(bonnie) & ChaperoneDance(bonnie)) -> (Student(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendSchoolEvents(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareer(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendSchoolEvents(bonnie) & VeryEngaged(bonnie) & StudentWhoAttendsSchool(bonnie)) | (-AttendSchoolEvents(bonnie) & -VeryEngaged(bonnie) & -StudentWhoAttendsSchool(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((WishToFurtherAcademicCareer(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-WishToFurtherAcademicCareer(bonnie) & -ChaperoneHighSchoolDances(bonnie)) -> (StudentWhoAttendsSchool(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDances(bonnie)) | (-YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDances(bonnie))) -> ((Student(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (SchoolTalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. ((SchoolTalentShow(x) & -InactiveAndDisinterested(x)) | (-SchoolTalentShow(x) & InactiveAndDisinterested(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: (AttendAndEngage(bonnie) & Student(bonnie)) | (-AttendAndEngage(bonnie) & -Student(bonnie))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDance(bonnie)) | (-YoungChildOrTeenager(bonnie) & -ChaperoneHighSchoolDance(bonnie))) -> (Student(bonnie) | InactiveAndDisinterested(bonnie))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (SchoolTalentShow(x) -> (AttendSchoolEvent(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (SchoolTalentShow(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: ((AttendSchoolEvent(bonnie) & VeryEngaged(bonnie) & AttendSchool(bonnie)) | (-AttendSchoolEvent(bonnie) & -VeryEngaged(bonnie) & -AttendSchool(bonnie)))\nTEXT: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\nFOL: ((YoungChildOrTeenager(bonnie) & ChaperoneHighSchoolDance(bonnie) | -YoungChildOrTeenager(bonnie)) -> (AttendSchool(bonnie) | InactiveAndDisinterested(bonnie)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 2,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) | HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) | LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) | LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HasLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HasLunchInCompany(employee) | HasLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HasLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\nTEXT: James has lunch in the company.\nFOL: HasLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) | LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) | LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(employee) -> RemoteWorkFromHome(employee))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) | HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) | LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home. \nFOL: (LunchInCompany(james) | LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home. \nFOL: (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today. \nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> AppearsInCompany(x, today))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(employee) -> WorkingRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james, today)) | (-Manager(james) & -AppearsInCompany(james, today)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) | LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(employee) -> WorkRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HasLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HasLunchInCompany(employee) | HasLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: HasLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HasLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HasLunchInCompany(james) | HasLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: HasLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HasLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((HasLunchInCompany(employee) & -HasLunchAtHome(employee)) | (-HasLunchInCompany(employee) & HasLunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HasLunchAtHome(employee) -> WorkingRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: HasLunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer(x)) -> AppearsToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) | LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(x) -> RemoteWork(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> RemoteWork(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWork(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsToday(james)) | (-Manager(james) & -AppearsToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(x) -> -WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (HaveLunchInCompany(x) | HaveLunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HaveLunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: HaveLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer(x)) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchInCompany(employee) -> WorkRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) | LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(employee) -> WorkRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> RemoteWorkFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) & -((Manager(james) & -AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james))))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) | LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (OtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> AppearInCompany(x, today))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james, today)) | (-Manager(james) & -AppearInCompany(james, today)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) | LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(employee) -> WorkRemotelyFromHome(employee))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James has lunch in the company.\nFOL: LunchInCompany(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 3,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HasLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) | -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -HasLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) | LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) -> WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HasLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home. \nFOL: all x. (Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home. \nFOL: all x. (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -HasLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home. \nFOL: ((LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home. \nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today. \nFOL: ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) & Customer(x) -> InCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (InCompany(x) -> (ScheduleMeeting(x) & Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (InCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> RemoteWork(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> RemoteWork(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWork(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & InCompany(james)) | (-Manager(james) & -InCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -InCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearsToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkingRemotely(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotely(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotely(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: (Manager(james) & AppearsToday(james)) | (-Manager(james) & -AppearsToday(james))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(employee) -> -WorkingRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> InCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (InCompanyToday(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (InCompanyToday(employee) | HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(employee) -> WorkingRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & InCompanyToday(james)) | (-Manager(james) & -InCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -InCompanyToday(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) | LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: (LunchAtHome(x) -> WorkingRemotely(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotely(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotely(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearToday(james)) | (-Manager(james) & -AppearToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> RemoteWorkFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer(x)) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchInCompany(employee) -> WorkRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (-Manager(x) | -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HasLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -HasLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home. \nFOL: (HaveLunchInCompany(employee) | HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home. \nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today. \nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James does not have lunch in the company. \nFOL: -HaveLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchInCompany(employee) -> WorkRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james)) | (-Manager(james) & -AppearInCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> InCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (InCompanyToday(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (InCompanyToday(employee) & -InCompanyToday(employee)) | (-InCompanyToday(employee) & InCompanyToday(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -InCompanyToday(employee) -> WorkRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & InCompanyToday(james)) | (-Manager(james) & -InCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -InCompanyToday(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer(x)) -> InCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (InCompany(x) -> ScheduleMeeting(x, customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((InCompany(james) & -InCompany(james)) | (-InCompany(james) & InCompany(james)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (InCompany(x) -> -RemoteWork(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> RemoteWork(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWork(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & InCompany(james)) | (-Manager(james) & -InCompany(james)))\nTEXT: James does not have lunch in the company.\nFOL: -InCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) & -((Manager(james) & -AppearInCompanyToday(james)) | (-Manager(james) & AppearInCompanyToday(james))))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) | HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HasLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompanyToday(james)) | (-Manager(james) & -AppearsInCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -HasLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) | HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (-Manager(x) | -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompanyToday(james)) | (-Manager(james) & -AppearInCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -HaveLunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x, customer) -> AppearInCompany(x, today))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) | LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(employee) -> WorkRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james, today)) | (-Manager(james) & -AppearInCompany(james, today)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> InCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (InCompanyToday(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (InCompanyToday(x) | InHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (InHome(x) -> WorkRemotely(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkRemotely(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotely(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & InCompanyToday(james)) | (-Manager(james) & -InCompanyToday(james)))\nTEXT: James does not have lunch in the company.\nFOL: -InCompanyToday(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearInCompany(x, today))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james, today)) | (-Manager(james) & -AppearInCompany(james, today)))\nTEXT: James does not have lunch in the company.\nFOL: -LunchInCompany(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 4,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & OccursIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(Fever) & Symptom(Headache) & Symptom(MusclePains) & Symptom(FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animals) & OccursIn(monkeypoxVirus, humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) \nTEXT: People feel tired when they get a glu.\nFOL: Tired(people, glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animal) & Includes(humans, animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(person) & Glu(person)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animal) & CanOccurIn(monkeypoxVirus, human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelTired(people, glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, Animal) & OccursIn(monkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, Fever) & Symptom(monkeypox, Headache) & Symptom(monkeypox, MusclePains) & Symptom(monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(Person) & GetsGlu(Person)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & OccursIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomOf(Monkeypox, Fever) & SymptomOf(Monkeypox, Headache) & SymptomOf(Monkeypox, MusclePains) & SymptomOf(Monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(x) <- Glu(x)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(MonkeypoxVirus, Animal) & OccurIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomOf(Monkeypox, Fever) & SymptomOf(Monkeypox, Headache) & SymptomOf(Monkeypox, MusclePain) & SymptomOf(Monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people, Glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animal) & CanOccurIn(monkeypoxVirus, human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(monkeypoxVirus, animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePain) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people) & GetGlu(people)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccursIn(x, monkeypoxVirus))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> (OccurIn(x, MonkeypoxVirus) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> Tired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(monkeypoxVirus, animal) & IncludedIn(animal, human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people) & Glu(people)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animals) & Includes(humans, animals)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox, fever) & Symptons(monkeypox, headache) & Symptons(monkeypox, musclePains) & Symptons(monkeypox, tired)\nTEXT: People feel tired when they get a glu.\nFOL: Tired(people, glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animal) & Includes(humans, animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people, glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animals) & In(monkeypoxVirus, humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: Glu -> feelingTired\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animals) & Includes(humans, animals)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, tired)\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animal) & OccursIn(monkeypoxVirus, human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: Tired(people, glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(MonkeypoxVirus, Animal) & CanOccurIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) SymptonsOf(Monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: Tired(GetGlu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccursIn(x, monkeypoxVirus))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (GetGlu(x) -> Tired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & OccursIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox, Fever) & Symptoms(Monkeypox, Headache) & Symptoms(Monkeypox, MusclePains) & Symptoms(Monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people, Glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & OccursIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(Monkeypox, Fever) & Symptom(Monkeypox, Headache) & Symptom(Monkeypox, MusclePains) & Symptom(Monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(Person) & Glu(Person)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(Animal, MonkeypoxVirus) & OccurIn(human, MonkeypoxVirus)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(FeelingTired, Monkeypox) & Symptom(Fever, Monkeypox) & Symptom(Headache, Monkeypox) & Symptom(MusclePains, Monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(Person) & GetGlucose(Person)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animals) & In(monkeypoxVirus, humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people, glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccursIn(x, MonkeypoxVirus))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Virus(x) & x = monkeypoxVirus -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> Tired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 5,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, animal) & Includes(humans, animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Includes(fever, symptomsOf(monkeypox)) & Includes(headache, symptomsOf(monkeypox)) & Includes(musclePains, symptomsOf(monkeypox)) & Includes(feeelingTired, symptomsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: FeelTired(glu)\nTEXT: No one gets flu.\nFOL: -Flu(person)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, Fever) & Symptom(monkeypox, Headache) & Symptom(monkeypox, MusclePains) & Symptom(monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(person) & GetsGlu(person)\nTEXT: No one gets flu.\nFOL: -GetsFlu(person)\n</EVALUATE>\n\nNote that the FOL translation of the conclusion is \"-GetsFlu(person)\" which means that no person gets flu. However, the premises do not contain any information about flu, and there is no logical connection between the premises and the conclusion. Therefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animal) & SubclassOf(animal, human)\nTEXT: Humans are mammals.\nFOL: SubclassOf(human, mammal)\nTEXT: Mammals are animals.\nFOL: SubclassOf(mammal, animal)\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(monkeypox, (fever & headache & musclePains & feelingTired))\nTEXT: People feel tired when they get a glu.\nFOL: (feelingTired & glu) \nTEXT: No one gets flu.\nFOL: -flu\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animal) & IncludedIn(human, animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Includes(Fever, symptomsOfMonkeypox) & Includes(Headache, symptomsOfMonkeypox) & Includes(MusclePains, symptomsOfMonkeypox) & Includes(FeelingTired, symptomsOfMonkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people) & Glu(people)\nTEXT: No one gets flu.\nFOL: -Flu(people)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(Animal, MonkeypoxVirus) & Includes(Humans, Animal)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Includes(Fever, SymptonsOfMonkeypox) & Includes(Headache, SymptonsOfMonkeypox) & Includes(MusclePains, SymptonsOfMonkeypox) & Includes(FeelingTired, SymptonsOfMonkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people) & Glu(people)\nTEXT: No one gets flu.\nFOL: -Flu(everyone)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animal) & IncludedIn(humans, animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(person) & Gets(person, glu)\nTEXT: No one gets flu.\nFOL: -exists x. Gets(x, flu)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(Fever) & Symptom(Headache) & Symptom(MusclePains) & Symptom(FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(Person) & Glu(Person)\nTEXT: No one gets flu.\nFOL: -Flu(Person)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> (OccurIn(x, monkeypoxVirus) | x = human))\nTEXT: Humans are mammals.\nFOL: all x. (human(x) -> mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (mammal(x) -> animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu)\nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occur(MonkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: all x. (-Flu(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(monkeypoxVirus, animal) & animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: -Glu(x) -> FeelingTired(x)\nTEXT: No one gets flu.\nFOL: -Flu(x)\n</EVALUATE>\n\nNote that the conclusion \"No one gets flu\" does not follow logically from the premises. The premises mention Monkeypox and its symptoms, but do not provide any information about the flu. Therefore, the conclusion is not a logical consequence of the premises."
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(MonkeypoxVirus, Animal) & CanOccurIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired) &... (Note: The FOL translation of this sentence is incomplete, as it contains a list of symptoms. For simplicity, we assume the list is a conjunction of fever, headache, muscle pains, and feeling tired, and omit the \"and so on\" part.)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(Person) & Got(Glu)\nTEXT: No one gets flu.\nFOL: -Flu(Person)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animal) & OccursIn(monkeypoxVirus, human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: Glu(glucose) & FeelingTired(when, glucose)\nTEXT: No one gets flu.\nFOL: -Flu(whoever)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animals) & In(monkeypoxVirus, humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu) \nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccur(monkeypoxVirus, animal) & CanOccur(monkeypoxVirus, human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: (Glu(x) -> FeelingTired(x))\nTEXT: No one gets flu.\nFOL: -Flu(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animal) & SubclassOf(human, animal)\nTEXT: Humans are mammals.\nFOL: SubclassOf(human, mammal)\nTEXT: Mammals are animals.\nFOL: SubclassOf(mammal, animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(monkeypox) & (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(person) & Glu(person)\nTEXT: No one gets flu.\nFOL: -Flu(person)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animals) & IncludedIn(humans, animals)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: feelsTired(people, glu)\nTEXT: No one gets flu.\nFOL: -getsFlu(everyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occur(monkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePain(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: No one gets flu.\nFOL: all x. (-Flu(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(MonkeypoxVirus, Animal) & OccurIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOf(Monkeypox, x))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (GetGlu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: -GetFlu(everyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccursIn(x, monkeypoxVirus))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(monkeypox) = (Fever & Headache & MusclePains & FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: No one gets flu.\nFOL: all x. (-Person(x) | -Flu(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animal) & CanOccurIn(monkeypoxVirus, human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) & Glu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: all x. (-Person(x) | -Glu(x) | -Flu(x))\n</EVALUATE>\n\nNote: I've assumed that the sentence \"People feel tired when they get a glu\" is meant to be \"People feel tired when they get a cold\" or a similar statement, as the word \"glu\" doesn't make sense in this context. I've also assumed that the sentence \"Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on\" is meant to be a statement about the symptoms of Monkeypox, and not a statement about the symptoms of some other disease. If these assumptions are incorrect, please let me know and I'll be happy to revise the translation."
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animal) & CanOccurIn(monkeypoxVirus, human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, tired)\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu)\nTEXT: No one gets flu.\nFOL: -Flu()\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(Animal, MonkeypoxVirus) | OccursIn(Human, MonkeypoxVirus)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(Fever, Monkeypox) & Symptom(Headache, Monkeypox) & Symptom(MusclePains, Monkeypox) & Symptom(FeelingTired, Monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(Person) -> GetsGlu(Person)\nTEXT: No one gets flu.\nFOL: -GetsFlu(Person)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & OccursIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired) \nTEXT: People feel tired when they get a glu.\nFOL: (GetGlu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: -GetFlu(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, Animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: - (Note: This sentence is not a formal logical statement. It's more of a description. We can ignore it or translate it into a formal statement if necessary. For simplicity, let's ignore it.)\nTEXT: People feel tired when they get a glu.\nFOL: Tired(people) & Glu(people)\nTEXT: No one gets flu.\nFOL: -Flu(everyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occur(MonkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) & -Fever(x) & -Headache(x) & -MusclePains(x) & -FeelingTired(x)) -> Monkeypox(x)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(Person) & Glu(Person)\nTEXT: No one gets flu.\nFOL: all x. (-Person(x) | -Flu(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 6,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonsOfMonkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, Animal) & CanOccurIn(monkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: InfectiousDisease(monkeypox) & Symptom(monkeypox, Fever) & Symptom(monkeypox, Headache) & Symptom(monkeypox, MusclePains) & Symptom(monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(glu)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptom(monkeypox, Coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animals) & SubclassOf(animals, humans)\nTEXT: Humans are mammals.\nFOL: SubclassOf(humans, mammals)\nTEXT: Mammals are animals.\nFOL: SubclassOf(mammals, animals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOf(monkeypox, x) & (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (SymptomOf(monkeypox, x) & Coughing(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animal) & SubclassOf(animal, human)\nTEXT: Humans are mammals.\nFOL: SubclassOf(human, mammal)\nTEXT: Mammals are animals.\nFOL: SubclassOf(mammal, animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox, (fever | headache | musclePains | feelingTired))\nTEXT: People feel tired when they get a glu.\nFOL: (feelingTired | -feelingTired)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptons(monkeypox, coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> (Occur(monkeypoxVirus, x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOf(monkeypox, x) & (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Glu(x) -> Tired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: all x. (SymptomOf(monkeypox, x) & Coughing(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(monkeypoxVirus, animal) & Includes(humans, animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox) & Includes(fever, symptons(monkeypox)) & Includes(headache, symptons(monkeypox)) & Includes(musclePains, symptons(monkeypox)) & Includes(feelingTired, symptons(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(person) & Glu(person)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptons(monkeypox) & Includes(coughing, symptons(monkeypox))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired) & Symptons(Monkeypox, _)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(_)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: (Fever & Headache & MusclePains & FeelingTired & Coughing) & Symptons(Monkeypox, _)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(MonkeypoxVirus, Animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox, (Fever | Headache | MusclePains | FeelingTired))\nTEXT: People feel tired when they get a glu.\nFOL: (Glu(x) -> FeelingTired(x))\nTEXT: Symptoms of Monkeypox include coughing.\nFOL: Symptoms(Monkeypox, Coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) SymptonsOf(Monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: Tired(people, glu)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Coughing SymptonsOf(Monkeypox)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & Includes(Humans, Animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox, (Fever & Headache & MusclePains & FeelingTired))\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(person) & Glu(person)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptoms(Monkeypox, Coughing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | Human(monkeypox)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> CanOccur(MonkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(Monkeypox, Fever) & Symptons(Monkeypox, Headache) & Symptons(Monkeypox, MusclePains) & Symptons(Monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptons(Monkeypox, Coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccurIn(MonkeypoxVirus, Animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptonsOf(Monkeypox, Fever) & SymptonsOf(Monkeypox, Headache) & SymptonsOf(Monkeypox, MusclePains) & SymptonsOf(Monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people) & GetGlu(people)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOf(Monkeypox, Coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) | SymptonsOf(monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: (Fever & Headache & MusclePains & Tired &...) | Coughing | SymptonsOf(monkeypox)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animals) & Includes(humans, animals)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox, (Fever & Headache & MusclePains & Tired))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptons(monkeypox, Coughing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & Includes(Humans, Animal)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, Fever) & Symptom(monkeypox, Headache) & Symptom(monkeypox, MusclePains) & Symptom(monkeypox, Tired)\nTEXT: People feel tired when they get a glu.\nFOL: Tired(people, Glu)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptom(monkeypox, Coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: Symptoms of Monkeypox include coughing.\nFOL: SymptomOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(MonkeypoxVirus, Animal) & OccurIn(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonsOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(MonkeypoxVirus, Animal) & Includes(Animal, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (FeelTired(x) & GetGlu(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomsOfMonkeypox(coughing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occur(monkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox) & (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptons(monkeypox) & Coughing(monkeypox)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> OccurInAnimal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) & SymptonsOf(monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: (Fever & Headache & MusclePains & Tired &...) & SymptonsOf(monkeypox) & Coughing\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occur(monkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: Symptoms of Monkeypox include coughing.\nFOL: SymptomOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CanOccur(MonkeypoxVirus, Animal) & CanOccur(MonkeypoxVirus, Human)\nTEXT: Humans are mammals.\nFOL: Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonsOfMonkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Tired(x) & Glu(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccurIn(x, MonkeypoxVirus))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonOfMonkeypox(coughing)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 7,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, legendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, legendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, legendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 8,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> MadeByJapanese(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: MadeByJapanese(fifa22)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: MadeByJapaneseGameCompany(fifa22)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillion(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, legendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, legendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(legendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: MadeByJapaneseGameCompany(fifa22)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, legendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: MadeByJapaneseGameCompany(fifa22)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10Game(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10Game(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10Game(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThan1Million(x) -> Top10Game(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThan1Million(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10Game(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThan1Million(x) -> Top10Game(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThan1Million(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10Game(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10Game(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillion(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: MadeByJapaneseGameCompany(fifa22)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: MadeByJapaneseGameCompany(fifa22)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10Game(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10Game(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 9,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillion(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, legendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10Game(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10Game(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10Game(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, legendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10List(legendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, LegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(LegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(LegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(SelectedInto(x)))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10Game(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10Game(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10Game(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThan1MillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThan1MillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(legendOfZelda)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 10,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>\n\nThe conclusion \"All squares are shapes\" follows from the premises.",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>\n\nThis translation can be used to evaluate the conclusion using a theorem solver.",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSided(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSided(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSided(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>\n\nThe FOL expression for the conclusion \"All squares are shapes\" is the same as the FOL expression for the second premise \"All four-sided things are shapes\". Therefore, the conclusion follows from the premises.",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSided(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSided(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSided(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 11,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 12,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 13,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 14,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: ((-Turtle(rock) & -Squirrel(rock)) | (-Turtle(rock) & Cute(rock)) | (-Squirrel(rock) & Cute(rock)) | (-Turtle(rock) & Skittish(rock)) | (-Squirrel(rock) & Skittish(rock)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(animal) | Squirrel(animal))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: ((Turtle(rock) & Squirrel(rock)) -> -(Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 15,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 16,
  "responses": [
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(Karen, x) -> Download(Karen, x)) & (Download(Karen, x) -> BingeWatch(Karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(Karen, x) -> Share(Karen, x, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(Karen, strangerThings, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(\"Stranger Things\", karen, lisa)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(x, karen)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, karen) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, x, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, strangerThings, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, karen) -> Share(x, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixFranchise(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixFranchise(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: PopularNetflixFranchise(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(karen, x) -> ShareToLisa(karen, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(karen, strangerThings)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetfliShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetfliShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetfliShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetfliShow(x) & BingeWatch(karen, x) -> Share(x, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, karen) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & Netflix(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, x, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, strangerThings, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(\"Stranger Things\", karen, lisa)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, x, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, strangerThings, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, x, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, strangerThings, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) -> (BingeWatch(x, karen) <-> Download(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 17,
  "responses": [
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(BlackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) -> (BingeWatch(x, karen) <-> Download(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(NetflixShow(\"Black Mirror\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)  # This is incorrect. However, in the format of the Python NLTK package logic module, the above sentence should be translated into the following form: \nFOL: Popular(netflixShow)  # This is incorrect. However, in the format of the Python NLTK package logic module, the above sentence should be translated into the following form:\nFOL: Popular(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, karen) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & NetflixShow(x)) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, NetflixShow(\"Black Mirror\"))\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(karen, x) & NetflixShow(x) -> ShareTo(lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(NetflixShow(\"Black Mirror\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x) <-> Download(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x) -> ShareToLisa(x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, NetflixShow(\"Black Mirror\"))\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareTo(lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(NetflixShow(\"Black Mirror\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, \"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, y) -> BingeWatch(y, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & Netflix(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(x, karen) -> Share(x, lisa))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\", y)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, \"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(Netflix, x) -> BingeWatch(Netflix, karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(Netflix, karen, x) <-> Download(Netflix, karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Netflix, karen, \"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(Netflix, karen, x) -> Share(Netflix, karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(Netflix, \"Black Mirror\")\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) -> Download(x, karen))\nFOL: all x. ((Download(x, karen) & NetflixShow(x)) -> BingeWatch(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(Karen, x) -> Download(Karen, x)) & (Download(Karen, x) -> BingeWatch(Karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, NetflixShow(\"Black Mirror\"))\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareTo(Lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(NetflixShow(\"Black Mirror\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, karen) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(Netflix, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, \"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, y) -> BingeWatch(y, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, StrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(Karen, x) -> Download(Karen, x)) & (Download(Karen, x) -> BingeWatch(Karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(BlackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixStrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & NetflixShow(x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareTo(lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixStrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, NetflixBlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(NetflixBlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(NetflixBlackMirror)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & NetflixShow(x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, \"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 18,
  "responses": [
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(NetflixShow(\"Black Mirror\"), lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & -Download(karen, x)) | (-BingeWatch(karen, x) & Download(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> ShareTo(lisa, karen, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: ShareTo(lisa, karen, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) -> (BingeWatch(karen, x) <-> Download(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, karen, lisa)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, karen) -> Share(x, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & NetflixShow(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) -> (BingeWatch(Karen, x) <-> Download(Karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(Karen, x) -> Share(Karen, x, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(Karen, blackMirror, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, x, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, BlackMirror, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, x, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, blackMirror, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) -> (BingeWatch(x, karen) <-> Download(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(\"Black Mirror\", karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: PopularNetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(NetflixShow(\"Black Mirror\"), lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixStrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) -> (BingeWatch(x, karen) <-> Download(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(BlackMirror, lisa, karen)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 19,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedWinterOlympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & -Disqualified(x) & BestRank(x, asiaPacific) & BestRank(x, world))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: HostedWinterOlympics(beijing) & HostedSummerOlympics(beijing, 2008)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> RankedAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & HostedWinterOlympics(beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOfBeijingAreAmongTheBest()\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympicsAndWinterOlympics(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & RankedAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlympics(beijing) & HostedWinterOlympics(beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & In(beijing, x) -> ConsistentlyRankAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & HostedWinterOlympics(beijing))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & BestInAsiaPacificAndWorld(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & Hosted(x, beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing) & HostedSummerParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & InBeijing(x) & (BestUniversity(x) | BestInAsiaPacific(x) | BestInWorld(x)))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: HostedSummerOlympics2008(beijing) & exists x. (WinterOlympics(x) & HostedWinterOlympics(beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(x) & BestUniversityInAsiaPacific(x) & BestUniversityInWorld(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & HostedWinterOlympics(beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & x = 91 & ConsistentlyRankAmongBest(x, AsiaPacific, World))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (HostedWinterOlympics(beijing) & x!= 2008)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & Hosted(x, beijing))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> RankedAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: HostedWinterOlympics(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics(beijing) & 2008SummerParalympics(beijing))\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (Hosted(SummerOlympics(beijing)) & Hosted(WinterOlympics(beijing))) & (Hosted(SummerParalympics(beijing)) & Hosted(WinterParalympics(beijing)))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedIn(beijing) -> RankedAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted(2008SummerOlympics(beijing)) & Hosted(WinterOlympics(beijing)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(beijing, 2008SummerOlympics) & Hosted(beijing, 2008SummerParalympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(beijing, SummerOlympics) & Hosted(beijing, WinterOlympics) & Hosted(beijing, SummerParalympics) & Hosted(beijing, WinterParalympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & -Disqualified(x) & ConsistentlyRanked(x, asiaPacific) & ConsistentlyRanked(x, world))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted(beijing, 2008SummerOlympics) & exists x. (WinterOlympics(x) & Hosted(beijing, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) | (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(x) & -NotBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlympics(beijing) & HostedWinterOlympics(beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & InBeijing(x) -> RankedAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & Hosted(x, beijing))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & -BadRanking(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & Hosted(x, beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ExistsUniversity(x). (UniversityInBeijing(x) & RankedAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & ExistsOlympics(x). (WinterOlympics(x) & HostedOlympics(beijing, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & InBeijing(x) -> RankedAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & Hosted(x, beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) | (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlympics(beijing) & HostedWinterOlympics(beijing)) | (Hosted2008SummerOlympics(beijing) & -HostedWinterOlympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(x) & ConsistentlyRanked(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) | (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & HostedWinterOlympics(beijing))) | (exists x. (WinterOlympics(x) & HostedWinterOlympics(beijing)) & Hosted2008SummerOlympics(beijing))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(beijing, 2008SummerOlympics) & Hosted(beijing, 2008SummerParalympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(beijing, SummerOlympics) & Hosted(beijing, WinterOlympics) & Hosted(beijing, SummerParalympics) & Hosted(beijing, WinterParalympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & -BadRank(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted(beijing, 2008SummerOlympics) & exists x. (Hosted(beijing, x) & Winter(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. (University(x) & LocatedInBeijing(beijing) & UniversityRank(x))) & (exists x. (University(x) & LocatedInBeijing(beijing) & UniversityRank(x)))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & exists x. (WinterOlympics(x) & HostedWinterOlympics(beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & -NotBestInAsiaPacificAndWorld(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlympics(beijing) & HostedWinterOlympics(beijing))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing, 2008) & HostedWinterOlympics(beijing, 2008)) & (HostedSummerParalympics(beijing, 2008) & HostedWinterParalympics(beijing, 2008))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBest(university(beijing, 91), AsiaPacific, World)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (HostedSummerOlympics(beijing, 2008) & -HostedWinterOlympics(beijing, 2008)) | (-HostedSummerOlympics(beijing, 2008) & HostedWinterOlympics(beijing, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics(beijing)) & Hosted(2008SummerParalympics(beijing))\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (Hosted(2008SummerOlympics(beijing)) & Hosted(2008WinterOlympics(beijing))) | (Hosted(2008SummerOlympics(beijing)) & Hosted(2008WinterParalympics(beijing))) | (Hosted(2008SummerParalympics(beijing)) & Hosted(2008WinterOlympics(beijing))) | (Hosted(2008SummerParalympics(beijing)) & Hosted(2008WinterParalympics(beijing)))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & 91 = NumberOfUniversities(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted(2008SummerOlympics(beijing)) & exists x. (Hosted(x & WinterOlympics(beijing))))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 20,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & BestUniversity(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedInBeijing(x) & BestUniversityInAsiaPacificAndWorld(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing) & HostedSummerParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(beijing, 2008SummerOlympics) & Hosted(beijing, 2008SummerParalympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(beijing, 2008SummerOlympics) & Hosted(beijing, 2008WinterOlympics) & Hosted(beijing, 2008SummerParalympics) & Hosted(beijing, 2008WinterParalympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & EnrolledIn(beijing, x) & RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedIn(beijing, SouthernChina)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing) & HostedSummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & -BadRanking(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing) & HostedSummerParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) & RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBestInAsiaPacificAndWorld(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & -BadRank(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankedAmongBestUniversitiesInAsiaPacificAndWorld(beijing)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(China, Beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(city, Beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(Beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(Olympics2008, Beijing) & Hosted(Paralympics2008, Beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(SummerOlympics, Beijing) & Hosted(WinterOlympics, Beijing) & Hosted(SummerParalympics, Beijing) & Hosted(WinterParalympics, Beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBest(Beijing, 91, AsiaPacific, World)\nTEXT: Beijing is located in southern China.\nFOL: LocatedIn(Beijing, SouthernChina)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympicsGames(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankedAmongBestUniversities(beijing, 91)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & InBeijing(x) -> BestUniversity(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBest(universitiesInBeijing, asiaPacificAndWorld)\nTEXT: Beijing is located in southern China.\nFOL: LocatedIn(beijing, southernChina)\n</EVALUATE>\n\nFrom the FOL expressions, we can see that the premises do not provide any information about Beijing's location being in southern China. In fact, the premises state that Beijing is located in Northern China. Therefore, the conclusion \"Beijing is located in southern China\" does not follow from the premises.",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedInBeijing(x) & RankAmongBestInAsiaPacificAndWorld(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & -BadRank(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) | (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(x) & BestUniversityInAsiaPacificAndWorld(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBest(universities(beijing), asiaPacific, world)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversities(beijing)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing, 2008) & HostedWinterOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008) & HostedWinterParalympics(beijing, 2008)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & InBeijing(x) & RankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 21,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing,?) & HostedWinterOlympics(beijing,?) & HostedSummerParalympics(beijing,?) & HostedWinterParalympics(beijing,?)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & 91 = NumberOfUniversities(x) & ConsistentlyRankedAmongBest(x, asiaPacific) & ConsistentlyRankedAmongBest(x, world))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestInAsiaPacificAndWorld(university(beijing, 91))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & 91 = NumberOfUniversities(x) & BestRank(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics(2008, beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongTheBest(91, asiaPacific, world, beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) | (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> RankedAmongBestInAsiaPacificAndWorld(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & NumberOfUniversities(91) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & NumberOfUniversities(beijing) = 91 & RankedAmongBest(x, asiaPacific) & RankedAmongBest(x, world))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & InBeijing(x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedIn(x, beijing) & 91 = NumberOfUniversities(x)) -> BestRankingInAsiaPacificAndWorld(x)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(China, Beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing, 2008) & HostedWinterOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008) & HostedWinterParalympics(beijing, 2008)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, Beijing) & RankedAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversities(beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>\n\nHowever, the translation of the premises and conclusion into FOL expressions does not allow us to evaluate whether the conclusion follows from the premises. The reason is that the predicates used in the FOL expressions do not capture the meaning of the premises and conclusion.\n\nTo properly translate the premises and conclusion into FOL expressions, we need to define the predicates and their meanings. For example, we can define the predicate \"CapitalOfPeopleRepublicOfChina(x)\" to mean that x is the capital of the People's Republic of China. We can also define the predicate \"SecondLargestChineseCityByUrbanPopulation(x)\" to mean that x is the second largest Chinese city by urban population.\n\nHere is the revised translation of the premises and conclusion into FOL expressions:\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversities(beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>\n\nHowever, we still cannot determine whether the conclusion follows from the premises. The reason is that the predicates used in the FOL expressions do not capture the meaning of the premises and conclusion.\n\nTo properly evaluate whether the conclusion follows from the premises, we need to use a theorem solver that can handle the predicates and their meanings. However, without a clear definition of the predicates and their meanings, we cannot evaluate the validity of the conclusion.\n\nTherefore, based on the given premises and conclusion, we cannot determine whether the conclusion follows from the premises.",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedIn(x, beijing) & NumberOfUniversity(x) = 91 & BestInAsiaPacificAndWorld(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversities(beijing, 91)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>\n\nHowever, upon reviewing the translation, I noticed that the original translation was not fully accurate to the format of the Python NLTK package logic module. \n\nHere is a revised version of the translation in the format of the Python NLTK package logic module:\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (NationalCapitalCity(x) & -MostPopulousNationalCapitalCity(x) -> -x(beijing))\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: all x. (HostedSummerOlympics(x) & HostedWinterOlympics(x) -> HostedBy(beijing, x))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & -ConsistentlyRankAmongBestUniversities(x) -> -x(beijing, 91))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>\n\nHowever, upon further review, I realized that the translation of the original sentence \"Beijing is the second largest Chinese city by urban population\" to the format of the Python NLTK package logic module was not accurate. A more accurate translation would be:\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (ChineseCity(x) & -SecondLargestChineseCityByUrbanPopulation(x) -> -x(beijing))\n\nHowever, I also noticed that the original translation of the premise \"Beijing is the world's most populous national capital city\" was also not accurate. A more accurate translation would be:\n\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (NationalCapitalCity(x) -> (x(beijing) -> MostPopulousNationalCapitalCity(x)))\n\nTherefore, the revised version of the translation in the format of the Python NLTK package logic module is:\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: all x. (NationalCapitalCity(x) -> (x(beijing) -> MostPopulousNationalCapitalCity(x)))\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: all x. (HostedSummerOlympics(x) & HostedWinterOlympics(x) -> HostedBy(beijing, x))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & -ConsistentlyRankAmongBestUniversities(x) -> -x(beijing, 91))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: all x. (ChineseCity(x) & -SecondLargestChineseCityByUrbanPopulation(x)",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing) & HostedSummerParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & RankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing,?) & HostedWinterOlympics(beijing,?) & HostedSummerParalympics(beijing,?) & HostedWinterParalympics(beijing,?)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & 91 = NumberOfUniversities(x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & InBeijing(x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(beijing, 2008SummerOlympics) & Hosted(beijing, 2008SummerParalympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(beijing, 2008SummerOlympics) & Hosted(beijing, 2008WinterOlympics) & Hosted(beijing, 2008SummerParalympics) & Hosted(beijing, 2008WinterParalympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: Exists x. (University(x) & LocatedIn(x, beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & InBeijing(x) & ConsistentlyRankedAmongTheBestInAsiaPacificAndTheWorld(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestInAsiaPacificAndWorld(university)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>\n\nNote that the FOL translation for the sentence \"Beijing is the second largest Chinese city by urban population\" is not directly possible with the information given. The original sentence is a claim about Beijing's population, but the premises do not provide any information about Beijing's population size or ranking. Therefore, the conclusion cannot be evaluated based on the given premises.",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 22,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 23,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> LiveInTaxHaven(djokovic)\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic))\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> LiveInTaxHaven(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> LiveInTaxHavens(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> LiveInTaxHavens(djokovic)\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> LivesInTaxHaven(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 24,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> LiveInTaxHaven(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LivesInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(djokovic) | OscarNominatedActor(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LivesInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> LivesInTaxHaven(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LivesInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LiveInTaxHaven(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic is a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(djokovic) | OscarNominatedActor(djokovic)\nTEXT: Djokovic is a Grand Slam champion.\nFOL: GrandSlamChampion(djokovic)\nTEXT: Djokovic is an Oscar-nominated actor.\nFOL: OscarNominatedActor(djokovic)\nTEXT: Djokovic is a professional tennis player.\nFOL: ProfessionalTennisPlayer(djokovic)\nTEXT: Djokovic is a celebrity.\nFOL: Celebrity(djokovic)\nTEXT: Djokovic is an athlete.\nFOL: Athlete(djokovic)\nTEXT: Djokovic is famous.\nFOL: Famous(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic lives in a tax haven.\nFOL: TaxHaven(djokovic)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 25,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> LiveInTaxHaven(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic))\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic))\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic))\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic))\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> LiveInTaxHaven(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -LiveInTaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic))\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic))\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: GrandSlamChampion(x) | OscarNominatedActor(x)\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT: Djokovic does not live in a tax haven.\nFOL: -TaxHaven(djokovic)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 26,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: ProfessionalWrestlingStable(professionalWrestlingStable) & Leads(professionalWrestlingStable, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(_, roderickStrong) & ProfessionalWrestlingStable(_)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & WWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(RoderickStrong, ProfessionalWrestlingStable)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(professionalWrestlingStable, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, x) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(professionalWrestlingStable, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, x) & ProfessionalWrestlingStable(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, ProfessionalWrestlingStable)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(RoderickStrong, ProfessionalWrestlingStable)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: ProfessionalWrestlingStable(x) & Leads(x, roderickStrong)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(diamondMine, roderickStrong) & ProfessionalWrestlingStable(diamondMine)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(RoderickStrong, ProfessionalWrestlingStable)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, ProfessionalWrestlingStable(x)) -> ProfessionalWrestlingStable(x) \nTEXT: ProfessionalWrestlingStable(x) -> Leads(roderickStrong, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, ProfessionalWrestlingStable(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(ProfessionalWrestlingStable(x), roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(_, roderickStrong) & ProfessionalWrestlingStable(_)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(professionalWrestlingStable, roderickStrong)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 27,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(wwe)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(wwe)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, creedBrothers) & Includes(DiamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedInWWE(x)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(diamondMine) & ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(wwe)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 28,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, ProfessionalWrestlingStable(x)) | -Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(IvyNile))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x) & Includes(IvyNile, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x)) | -Includes(x, IvyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x)) | -Includes(x, IvyNile)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, ProfessionalWrestlingStable(x)) | -Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, ProfessionalWrestlingStable(x)) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x)) & Includes(x, IvyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x) & Includes(x, IvyNile))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, {x | Includes(x, ivyNile)})\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, ProfessionalWrestlingStable(x)) | -Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(IvyNile))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x)) | -Includes(IvyNile, x) | x!= DiamondMine\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x)) & Includes(x, IvyNile)\n</EVALUATE>\n\nNote: I used the quantifier \"x\" in the FOL translation of the conclusion to represent the professional wrestling stable that includes Ivy Nile. This is because the conclusion mentions a stable that includes Ivy Nile, but it doesn't specify which stable. To accurately represent this in FOL, we need to use a variable to represent the stable.",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, ProfessionalWrestlingStable(x) & Includes(x, ivyNile))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, {x | ProfessionalWrestlingStable(x) & Includes(x, ivyNile)})\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, x) & ProfessionalWrestlingStable(x) & Includes(IvyNile, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x)) & Includes(x, IvyNile) | x!= DiamondMine\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x) & Includes(x, IvyNile))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(x)) & Includes(x, IvyNile) | x!= DiamondMine\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(imperium, ProfessionalWrestlingStable(x)) | -Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, ProfessionalWrestlingStable(ivyNile))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, ProfessionalWrestlingStable(x)) & Includes(IvyNile, x) | x!= DiamondMine\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, ProfessionalWrestlingStable(IvyNile))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 29,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Conductor(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedBy(x, Conductor(x)))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a conductor.\nFOL: Conductor(beethoven)\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 30,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y)) | exists x. (Orchestra(x) & Premiered(y, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(leader(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(conductor, x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y))  # note: y is a free variable here\n</EVALUATE>\n\nNote that the FOL translation of the conclusion is not entirely accurate, because the conclusion has a free variable 'y'. In a well-formed FOL expression, all variables should be bound by a quantifier or a function symbol. However, in this case, it seems like the conclusion is trying to express that there exists an orchestra that premiered a music piece, but the music piece is not specified. If we assume that the conclusion is trying to express that some orchestra premiered a music piece, regardless of which music piece, then we can modify the FOL translation as follows:\n\n TEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & exists y. (MusicPiece(y) & Premiered(y, x)))",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y)) | exists x. (Orchestra(x) & Premiered(y, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, MusicPiece(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedBy(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y)) | exists x. (Orchestra(x) & Premiered(y, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(conductor, x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, MusicPiece(_)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & exists y. (MusicPiece(y) & Premiered(x, y)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(y) & Lead(y, x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & exists y. (MusicPiece(y) & Premiered(y, x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, y) & Conductor(y))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y) & MusicPiece(y))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y)) | exists x. (Orchestra(x) & Premiered(y, x))\n</EVALUATE>\n\nNote: In the translation of the conclusion, I assumed that the variable y in the first exists clause represents a music piece. However, since the only music piece mentioned in the premises is Symphony No. 9, I also added the second exists clause to cover the case where another music piece is premiered by an orchestra.",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 31,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(leader(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, y))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(y))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 32,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesignStyle(some_x) | KellyWearstlerDesignStyle(some_x)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(MaxDesign) -> (MassProductDesign(MaxDesign) & Evocative(MaxDesign)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(MaxDesign)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesignStyle(max) | KellyWearstlerDesignStyle(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(kellyWearstler) | KellyWearstlerDesign(kellyWearstler)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(MaxDesign) -> (MassProductDesign(MaxDesign) & Evocative(MaxDesign)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(MaxDesign)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadidDesignStyle(kellyWearstler) | KellyWearstlerDesignStyle(kellyWearstler)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(MaxDesign) -> (MassProductDesign(MaxDesign) & Evocative(MaxDesign)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(MaxDesign)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesignStyle(kellyWearstler) | KellyWearstlerDesignStyle(kellyWearstler)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(MaxDesign) -> (MassProductDesign(MaxDesign) & Evocative(MaxDesign)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(MaxDesign)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(Max) | KellyWearstler(Max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProductDesign(Max) & Evocative(Max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(Max)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 33,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: (Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesignStyle(kellyWearstler) | KellyWearstlerDesignStyle(kellyWearstler)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(MaxDesign) -> (MassProductDesign(MaxDesign) & Evocative(MaxDesign)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(MaxDesign) & Dreamy(MaxDesign)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesignStyle(max) | KellyWearstlerDesignStyle(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(Max) | KellyWearstler(Max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProductDesign(Max) & Evocative(Max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(Max) & Dreamy(Max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(Max) | KellyWearstler(Max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProduct(Max) & Evocative(Max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: (Evocative(Max) & Dreamy(Max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 34,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(Max) | KellyWearstler(Max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProduct(Max) & Evocative(Max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(Max) & -Dreamy(Max)) | (-Evocative(Max) & Dreamy(Max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: Evocative(max) | Dreamy(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(Max) | KellyWearstler(Max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProduct(Max) & Evocative(Max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(Max) | Dreamy(Max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 35,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MajorTennisActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MajorTennisActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighRank(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighRank(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWta(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWta(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWta(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWta(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWta(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWta(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> ActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: ActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerRolandGarros2022(someone) | MaleTennisPlayerRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankedHighly(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerRolandGarros2022(x) | MaleTennisPlayerRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WtaRankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveMajorTennis(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighRank(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(someone) | MalePlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighRank(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayer(rolandGarros2022) | MaleTennisPlayer(rolandGarros2022)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayer(rolandGarros2022)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is among the most active players in major tennis.\nFOL: MajorTennis(cocoGauff)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 36,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActivePlayerInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActivePlayerInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x)) | exists x. (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayer(cocoGauff) & RolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemalePlayer(rolandGarros2022) | MalePlayer(rolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MalePlayer(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x)) | exists x. (MaleTennisPlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafael(cocoGauff)) -> -MaleTennisPlayer(cocoGauff) & RolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafael(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x)) | exists x. (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayer(cocoGauff) & RolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros(someone) | MalePlayerAtRolandGarros(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafael(cocoGauff)) -> -MalePlayerAtRolandGarros(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafael(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x)) | exists x. (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayer(cocoGauff) & RolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(rolandGarrosPlayer) | MaleTennisPlayerAtRolandGarros2022(rolandGarrosPlayer)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WtaRankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighRank(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women'S Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighRank(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(rolandGarros2022) | MaleTennisPlayer(rolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayer(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(rolandGarros2022) | MaleTennisPlayerAtRolandGarros2022(rolandGarros2022)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. ((FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayer(cocoGauff) & RolandGarros2022(cocoGauff)\nTEXT: Coco Gauff has lost to Rafael Nadal.\nFOL: LostToRafaelNadal(cocoGauff)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 37,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerRolandGarros2022(someone) | MaleTennisPlayerRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveMajorTennis(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women'S Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WtaRankHigh(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(someone) | MalePlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActive(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerRolandGarros2022(someone) | MaleTennisPlayerRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women'S Tennis Association.\nFOL: all x. (LostToIga(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemalePlayer(x) & RolandGarros2022(x))) | (exists x. (MalePlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafael(cocoGauff)) -> -MalePlayer(cocoGauff) & RolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIga(cocoGauff) & -MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) | -MostActivePlayer(cocoGauff)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTAHighlyRanked(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women'S Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(someone) | MalePlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (WTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActive(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighlyByWTA(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(cocoGauff) | LostToRafaelNadal(cocoGauff)) -> -MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.\nFOL: -LostToIgaSwiatek(cocoGauff) & -MostActiveInMajorTennis(cocoGauff)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 38,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo evaluate whether the conclusion follows from the premises, we can use a theorem solver. However, based on the FOL translations, we can reason about the conclusion as follows:\n\nFrom the first premise, we have: all x. (Cat(x) -> Mammal(x))\n\nFrom the second premise, we have: exists x. (Pet(x) & -Mammal(x))\n\nWe want to know if we can conclude: all x. (Pet(x) -> -Cat(x))\n\nUsing the first premise, we can infer that all cats are mammals, but we cannot conclude that all pets are not cats.\n\nHowever, from the second premise, we know that there exists a pet that is not a mammal. \n\nWe can use the universal instantiation to get: Pet(x) & -Mammal(x)\n\nFrom the first premise, we can infer: Cat(x) -> Mammal(x)\n\nUsing the modus tollens, we can conclude: -Mammal(x) -> -Cat(x)\n\nFrom the second premise, we know that there exists a pet that is not a mammal. \n\nUsing the existential instantiation, we can get: Pet(x) & -Mammal(x)\n\nSubstituting x into the previous conclusion, we can conclude: -Cat(x)\n\nSince x is a pet, we can conclude: Pet(x) -> -Cat(x)\n\nHowever, this is not the conclusion we want. We want to know if all pets are not cats.\n\nTo get the conclusion we want, we can use the universal generalization to get: all x. (Pet(x) -> -Cat(x))\n\nTherefore, the conclusion follows from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo evaluate whether the conclusion follows from the premises, we need to use a theorem solver. However, based on the given premises and conclusion, we can analyze the situation as follows:\n\nFrom the first premise, we know that all cats are mammals. This implies that there are no non-mammal cats.\n\nFrom the second premise, we know that some pets are not mammals. This implies that there are non-mammal pets.\n\nThe conclusion states that no pets are cats. However, the first premise only implies that all cats are mammals, not that all non-mammals are not cats. Therefore, it is possible that some non-mammal pets are cats.\n\nIn other words, the conclusion does not logically follow from the premises. We cannot conclude that no pets are cats based on the given information.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo evaluate whether the conclusion follows from the premises, we need to use a theorem solver. However, without a specific theorem solver, we can analyze the premises and conclusion manually.\n\nFrom the first premise, we know that all cats are mammals. This means that any cat is also a mammal.\n\nFrom the second premise, we know that some pets are not mammals. This means that not all pets are mammals.\n\nNow, let's examine the conclusion: No pets are cats. This is equivalent to saying that all pets are not cats.\n\nIf we combine the information from the first premise and the conclusion, we get a contradiction: all cats are mammals, but all pets are not cats. This means that there cannot be any cats among the pets.\n\nHowever, from the second premise, we know that some pets are not mammals. This does not necessarily mean that all pets are not mammals, but it does mean that there are some pets that are not mammals.\n\nThe key to resolving this apparent contradiction is to recognize that the conclusion \"No pets are cats\" does not follow from the premises. The premises do not provide any information about the relationship between cats and pets, and therefore, we cannot conclude that no pets are cats.\n\nIn fact, it is possible for there to be cats among the pets, as long as those cats are also mammals. The premises do not rule out this possibility, and therefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo determine whether the conclusion follows from the premises, we can use a theorem solver to evaluate the FOL expressions. \n\nFrom the first premise, we have \"all x. (Cat(x) -> Mammal(x))\". This means that every cat is a mammal.\n\nFrom the second premise, we have \"exists x. (Pet(x) & -Mammal(x))\". This means that there exists a pet that is not a mammal.\n\nNow, let's consider the conclusion: \"all x. (Pet(x) -> -Cat(x))\". This means that every pet is not a cat.\n\nWe can use the first premise to derive a contradiction. Suppose that there exists a pet that is a cat. Then, since every cat is a mammal, this pet is also a mammal. But this contradicts the second premise, which states that there exists a pet that is not a mammal.\n\nTherefore, we can conclude that the conclusion \"all x. (Pet(x) -> -Cat(x))\" follows from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo determine whether the conclusion follows from the premises, we need to evaluate the validity of the argument.\n\nFrom the first premise, we know that all cats are mammals. From the second premise, we know that some pets are not mammals. However, we cannot conclude that no pets are cats.\n\nThe conclusion \"No pets are cats\" is not necessarily true. It is possible that there are some pets that are cats, even though some pets are not mammals.\n\nTherefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo determine whether the conclusion follows from the premises, we need to evaluate the validity of the argument. \n\nLet's break down the argument:\n\n1. All cats are mammals. (Premise)\n2. Some pets are not mammals. (Premise)\n3. No pets are cats. (Conclusion)\n\nFrom premise 1, we can infer that all cats are mammals. However, premise 2 states that some pets are not mammals. This implies that not all pets are mammals.\n\nThe conclusion, \"No pets are cats,\" is a universal statement that claims that all pets are not cats. However, we cannot conclude this from the premises. The premises only provide information about the relationship between cats and mammals, and the relationship between some pets and non-mammals. They do not provide any information about the relationship between all pets and cats.\n\nTherefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo determine whether the conclusion follows from the premises, we need to evaluate the FOL expressions.\n\nFrom the first premise, we have:\nall x. (Cat(x) -> Mammal(x))\n\nThis means that for all x, if x is a cat, then x is a mammal.\n\nFrom the second premise, we have:\nexists x. (Pet(x) & -Mammal(x))\n\nThis means that there exists at least one pet that is not a mammal.\n\nNow, let's evaluate the conclusion:\nall x. (Pet(x) -> -Cat(x))\n\nThis means that for all x, if x is a pet, then x is not a cat.\n\nWe can rewrite this expression as:\nforall x (Pet(x) -> -Cat(x))\n\nUsing the rule of contrapositive, we can rewrite this expression as:\nforall x (Cat(x) -> -Pet(x))\n\nThis means that for all x, if x is a cat, then x is not a pet.\n\nNow, let's combine the first premise with this expression:\nall x. (Cat(x) -> Mammal(x))\nforall x (Cat(x) -> -Pet(x))\n\nUsing the rule of modus tollens, we can conclude that:\nforall x (Cat(x) -> -Pet(x) & Mammal(x))\n\nThis means that for all x, if x is a cat, then x is not a pet and x is a mammal.\n\nNow, let's combine this expression with the second premise:\nexists x. (Pet(x) & -Mammal(x))\n\nUsing the rule of existential generalization, we can conclude that:\nexists x (Pet(x) & -Mammal(x) & Cat(x))\n\nThis means that there exists at least one pet that is not a mammal and is a cat.\n\nHowever, this conclusion contradicts the first premise, which states that all cats are mammals.\n\nTherefore, the conclusion \"No pets are cats\" does not follow from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo evaluate whether the conclusion follows from the premises, we need to determine if the premises logically entail the conclusion.\n\nThe first premise states that all cats are mammals. This means that any x that is a cat (Cat(x)) is also a mammal (Mammal(x)).\n\nThe second premise states that some pets are not mammals. This means that there exists at least one pet (Pet(x)) that is not a mammal (-Mammal(x)).\n\nHowever, the conclusion states that no pets are cats. This means that for any pet (Pet(x)), it cannot be a cat (-Cat(x)).\n\nFrom the first premise, we know that all cats are mammals, but we don't have any information about pets. The second premise tells us that some pets are not mammals, but it doesn't tell us anything about cats.\n\nThe conclusion, however, is not logically entailed by the premises. We can construct a scenario where the premises are true, but the conclusion is false:\n\n* All cats are mammals (true)\n* Some pets are not mammals (true)\n* There exists a cat (say, \"Whiskers\") that is a pet (Pet(Whiskers)) and a mammal (Mammal(Whiskers))\n* There exists a pet (say, \"Fido\") that is not a mammal (-Mammal(Fido))\n\nIn this scenario, the premises are true, but the conclusion is false, since there exists a pet (Whiskers) that is a cat (Cat(Whiskers)).\n\nTherefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo evaluate the conclusion, we can use a theorem solver. However, based on the premises, we can reason as follows:\n\n1. All cats are mammals. (Premise)\n2. Some pets are not mammals. (Premise)\n\nFrom (1), we can infer that not all pets are cats, since not all mammals are cats. This is because some pets are not mammals (from (2)).\n\nHowever, the conclusion states that no pets are cats. This is not necessarily true based on the premises. We can have a scenario where all pets are cats, and all cats are mammals. In this case, the conclusion would be false.\n\nTherefore, based on the premises, we cannot conclude that no pets are cats. The conclusion does not necessarily follow from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo evaluate whether the conclusion follows from the premises, we need to determine if the FOL expression of the conclusion is a logical consequence of the FOL expressions of the premises.\n\nFrom the premises, we have:\n\n1. all x. (Cat(x) -> Mammal(x))\n2. exists x. (Pet(x) & -Mammal(x))\n\nWe can rewrite the second premise as:\n\nexists x. Pet(x) & exists x. -Mammal(x)\n\nThis means that there exists a pet that is not a mammal.\n\nNow, let's examine the conclusion:\n\nall x. (Pet(x) -> -Cat(x))\n\nThis statement is equivalent to saying that for all pets, they are not cats.\n\nFrom premise 1, we know that all cats are mammals. However, premise 2 tells us that there exists a pet that is not a mammal. Therefore, we cannot conclude that all pets are not cats.\n\nIn fact, the conclusion is actually false. We can have a pet that is a cat, as long as it is a mammal.\n\nTherefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>\n\nTo determine whether the conclusion follows from the premises, we can use a theorem solver. However, based on the FOL expressions, we can also reason about it manually.\n\nFrom the first premise, we know that all cats are mammals. This means that any cat is a mammal.\n\nThe second premise states that some pets are not mammals. This does not provide any information about cats specifically, but it tells us that not all pets are mammals.\n\nThe conclusion states that no pets are cats. This is equivalent to saying that all pets are not cats.\n\nWe can see that the conclusion does not necessarily follow from the premises. The first premise tells us that all cats are mammals, but it does not provide any information about pets that are not mammals. The second premise tells us that some pets are not mammals, but it does not provide any information about cats.\n\nTherefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 39,
  "responses": [
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. ((Student(x) & WantsLongVacation(x)) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -FavoriteSeason(mia, summer) | -FavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) | -Season(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. ((WantLongVacation(x) -> LoveSummerMost(x)) & WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, summer) -> -FavoriteSeason(mia, summer)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) | x = Spring | x = Summer | x = Fall | x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -FavoriteSeason(mia, Summer) | -FavoriteSeason(mia, FavoriteSeason(emma, x))\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) | (x = Spring) | (x = Summer) | (x = Fall) | (x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, x) & x!= summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (x = Spring | x = Summer | x = Fall | x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. ((Student(x) & WantsLongVacation(x)) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, FavoriteSeason(emma, _))\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & x = Spring) | exists x. (Season(x) & x = Summer) | exists x. (Season(x) & x = Fall) | exists x. (Season(x) & x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (x = Spring | x = Summer | x = Fall | x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, summer) | FavoriteSeason(mia, spring) | FavoriteSeason(mia, fall) | FavoriteSeason(mia, winter)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, Summer) | -FavoriteSeason(mia, Emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantsLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(Mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. Season(x) & exists y. Season(y) & exists z. Season(z) & exists w. Season(w) & x!= y & y!= z & z!= w & x!= w\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, x) & x!= summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) | x = spring | x = summer | x = fall | x = winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -FavoriteSeason(mia, summer) & FavoriteSeason(mia, x) -> x!= summer (x is a constant for the variable in the implication)\nFOL: -FavoriteSeason(mia, summer) & FavoriteSeason(mia, y) -> y!= summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> (Student(x) -> LoveSummer(x)))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, summer) | -FavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantsLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, Summer) | -FavoriteSeason(mia, FavoriteSeason(emma, _))\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. Season(x) & exists y. Season(y) & exists z. Season(z) & exists w. Season(w) & (x!= y & x!= z & x!= w & y!= z & y!= w & z!= w)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, x) & x!= summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & (x = Spring | x = Summer | x = Fall | x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> (Student(x) & LoveSummerMost(x)))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, x) & - (x = FavoriteSeason(emma, x))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (x = Spring | x = Summer | x = Fall | x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: - (FavoriteSeason(mia, Summer) & FavoriteSeason(mia, Emma))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & (x = Spring | x = Summer | x = Fall | x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & x = Spring) | exists x. (Season(x) & x = Summer) | exists x. (Season(x) & x = Fall) | exists x. (Season(x) & x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> (Student(x) -> LovesSummerMost(x)))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(Mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) | -Season(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. ((WantLongVacation(x) & -WantLongVacation(x)) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(Mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (x = Spring | x = Summer | x = Fall | x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, x) & x!= summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, x) & -FavoriteSeason(mia, summer)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. ((Student(x) & WantLongVacation(x)) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, summer) | -FavoriteSeason(mia, summer) & -FavoriteSeason(mia, summer)\nTEXT: FavoriteSeason(mia, summer) | -FavoriteSeason(mia, summer) & -FavoriteSeason(mia, summer)\nFOL: -FavoriteSeason(mia, summer) & -FavoriteSeason(mia, summer)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (x = Spring | x = Summer | x = Fall | x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: - (LovesSummer(mia) & LovesSummer(emma))\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LovesSummer(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 40,
  "responses": [
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(x) | (x = spring | x = summer | x = fall | x = winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantsLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & (x = spring | x = summer | x = fall | x = winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, y) & y!= summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x)) & exists y. (Season(y) & -Season(x)) & exists z. (Season(z) & -Season(y)) & exists w. (Season(w) & -Season(z))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, x) & -x = summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x)) & exists y. (Season(y) & y!= x) & exists z. (Season(z) & z!= x & z!= y) & exists w. (Season(w) & w!= x & w!= y & w!= z)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, x) & x!= summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -LovesSummerMost(mia) | -LovesSummerMost(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSummerMost(mia) | LovesSummerMost(emma) -> LovesSummerMost(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Emma) | Season(Mia) | Season(James) | Season(james)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(Mia, Emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSpring(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantsLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSpring(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, y) & - (y = summer)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (x = Spring | x = Summer | x = Fall | x = Winter))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, -FavoriteSeason(emma))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(Mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. Season(x) & exists y. Season(y) & exists z. Season(z) & exists w. Season(w) & x!= y & x!= z & x!= w & y!= z & y!= w & z!= w\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: exists x. Season(x) & x!= emma's favorite season\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSpring(mia)\n</EVALUATE>\n\nNote: I used the following predicates:\n- Season(x): x is a season\n- LovesSummer(x): x loves summer the most\n- LovesSpring(x): x loves spring the most\n- WantLongVacation(x): x wants to have a long vacation\n- emma's favorite season: Emma's favorite season (this is not a standard FOL predicate, but it is used here for simplicity)\n\nAlso note that the FOL translation of the sentence \"There are four seasons in a year: Spring, Summer, Fall, and Winter.\" is a bit tricky, as it is not a standard FOL sentence. The translation I used is a bit of a simplification, and it assumes that the four seasons are the only ones that exist.",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSummerMost(mia)\n</EVALUATE>\n\nNote: The FOL translation of the conclusion is incorrect. It should be LovesSpringMost(mia) instead of LovesSummerMost(mia) to match the conclusion. \n\nCorrected version:\n\n<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSpringMost(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(x) | Season(x) = spring | Season(x) = summer | Season(x) = fall | Season(x) = winter\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -Equals(Season(mia), Season(emma))\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSpring(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(x) | (x = Spring | x = Summer | x = Fall | x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, x) & - (x = FavoriteSeason(emma, x))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(kate)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSpring(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Season1) & Season(Season2) & Season(Season3) & Season(Season4) & - (Season1 = Season2) & - (Season1 = Season3) & - (Season1 = Season4) & - (Season2 = Season3) & - (Season2 = Season4) & - (Season3 = Season4)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> (Student(x) -> LoveSummer(x)))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Season2)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, Season1) | FavoriteSeason(mia, Season3) | FavoriteSeason(mia, Season4)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Season1)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) | x = Spring | x = Summer | x = Fall | x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -LovesSameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSummerMost(mia) | LovesSpringMost(mia) | LovesFallMost(mia) | LovesWinterMost(mia)\nTEXT: If a person loves summer the most, then their favorite season is summer.\nFOL: all x. (LovesSummerMost(x) -> LovesSameSeason(x, Summer))\nTEXT: If a person loves spring the most, then their favorite season is spring.\nFOL: all x. (LovesSpringMost(x) -> LovesSameSeason(x, Spring))\nTEXT: If a person loves fall the most, then their favorite season is fall.\nFOL: all x. (LovesFallMost(x) -> LovesSameSeason(x, Fall))\nTEXT: If a person loves winter the most, then their favorite season is winter.\nFOL: all x. (LovesWinterMost(x) -> LovesSameSeason(x, Winter))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantsLongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSpringMost(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & - (Season(x) -> (x = Spring or x = Summer or x = Fall or x = Winter)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. ((Student(x) & WantLongVacation(x)) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, S) & - (S = FavoriteSeason(emma, S))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> (Student(x) -> LoveSummerMost(x)))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & x = Spring) | exists x. (Season(x) & x = Summer) | exists x. (Season(x) & x = Fall) | exists x. (Season(x) & x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> (LoveSummerMost(x) & -LoveSummerMost(y) for y such that y!= x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSummerMost(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) | -Season(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSpring(mia)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 41,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is a printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is a printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is a printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is a printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is a printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 42,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 43,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 44,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. Related(basque, x)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (x!= basque -> -Related(x, basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (MemberOf(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. Related(basque, y)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguageFamily()\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) & y. (Member(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x) & x!= basque)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y, x)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & Related(x, Basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguageFamily()\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (MemberOfLanguageFamily(y, x) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, spanish)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguageFamily\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) & x!= basque -> -Related(x, basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (-Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y z. (Member(x, y) & Member(x, z) -> Related(y, z)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) & x!= basque -> -Related(x, basque) & -Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (x!= Basque -> -Related(x, Basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) & Member(x, z) -> Related(y, z))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (MemberOf(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Related(basque, y) & y!= basque)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x) & x!= basque)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) & x!= basque -> -Related(x, basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) & x!= basque -> -Related(x, basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (MemberOfFamily(x, y) -> Related(x, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (x!= Basque -> -Related(Basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y, x)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x) | Related(x, basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 45,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y, x)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(x, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x) & x!= basque)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(y, x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (LanguageMember(x, RomanceLanguages) & Related(RomanceLanguages, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y z. (Member(x, y) & Member(x, z) -> Related(y, z)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (-Related(basque, x) & -Related(x, basque))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguageFamily\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(y) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: not exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(x, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x) & x!= basque)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguageFamily\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) & MemberOfFamily(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) & Member(z, x) & y!= z -> Related(y, z))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) & x!= basque -> -Related(x, basque))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x) & -Related(x, basque)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(y) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedToEachOther(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedToEachOther(basque, spanish) & -RelatedToEachOther(basque, german)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedToEachOther(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedToEachOther(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 46,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) & Member(z, x) -> Related(y, z))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x y. (Basque(x) & Basque(y) -> -Related(x, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. Related(basque, y)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) & Member(z, x) -> Related(y, z))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedToEachOther(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedToEachOther(basque, x)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (MemberOf(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y z. (Member(x, y) & Member(x, z) -> Related(y, z)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x) & -Related(x, basque)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. Related(basque, y)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: not exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(y, x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y z. (Member(x, y) & Member(x, z) -> Related(y, z)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 47,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, Team(x)))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) -> -Play(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x, x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 48,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 49,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\nTEXT: Robert Lewandowski no longer plays for Bayern Munchen.\nFOL: -PlayFor(robertLewandowski, BayernMunchen)\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x, x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 50,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) & State(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: State(butte) & State(pierre) & SameState(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte, montana) & City(helena, montana) & City(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings, x) & State(butte, x)\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(x, pierre) | -City(x, butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: State(butte, y) & State(pierre, y)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) & State(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) & -InPierre(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: State(butte) & State(pierre) & SameState(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -CityInButte(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: City(butte) & City(pierre) & SameState(butte, pierre)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte, montana) & City(helena, montana) & City(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(x, pierre) | -City(x, butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: State(butte) = State(pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InState(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -City(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -City(x)  # Note: This sentence is a bit tricky, but a possible translation is that any city that is not in Pierre is also not a city. This is because the original sentence is written in a way that implies a universal quantification over cities, but it's not clear how to translate this into FOL without making some assumptions.\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>\n\nNote that the translation of the sentence \"Any city in Butte is not in Pierre\" is a bit tricky, as it's not clear how to translate this into FOL without making some assumptions. The translation I provided is one possible way to do this, but it's worth noting that it's not a perfect translation.",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: includes(montana, butte) & includes(montana, helena) & includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: sameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -includes(montana, pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -includes(pierre, x) | -City(x, butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: sameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InState(x, pierre) | -InState(x, butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & Includes(montana, butte) & Includes(montana, helena) & Includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) & InButte(x) -> -InPierre(x))\nTEXT: Butte and Pierre are in the same state.\nFOL: City(butte) & City(pierre) & SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & IncludesMontana(butte) & IncludesMontana(helena) & IncludesMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -City(x) \nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InState(x, butte) -> -InState(x, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) & -InPierre(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: City(butte) & City(pierre) & SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -City(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & IncludesMontana(butte) & IncludesMontana(helena) & IncludesMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: City(butte) & City(pierre) & SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) & City(x) -> -InPierre(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: City(butte) & City(pierre) & SameState(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: City(butte) & City(pierre) & SameState(butte, pierre)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: State(butte) = State(pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: State(butte) = State(pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InState(butte, butte) -> -InState(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 51,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) & State(butte) & whiteSulphurSprings = butte\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) & State(bismarck) & pierre = bismarck\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) & State(bismarck) & pierre = bismarck\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) & State(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) & City(x) -> -InPierre(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) & State(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InState(x, butte) -> -InState(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) & State(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) & State(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InState(x, butte) -> -InState(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOfMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOfMontana(butte) & CityOfMontana(helena) & CityOfMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOfMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOfPierre(x) | -CityOfButte(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InState(butte, pierre)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte, montana) & City(helena, montana) & City(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x, butte) -> -City(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & Includes(montana, butte) & Includes(montana, helena) & Includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InState(butte, x) & City(x) -> -InState(x, pierre)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: City(pierre) & City(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) & State(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) & State(bismarck) & SameState(pierre, bismarck)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) & State(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: StateOf(whiteSulphurSprings, montana) & StateOf(butte, montana)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: StateOf(pierre, state) & StateOf(bismarck, state)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) = State(bismarck)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: City(pierre) & City(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) = State(bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: City(pierre) & City(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte, montana) & City(helena, montana) & City(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(x, pierre) | -City(x, butte)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) = State(bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: City(pierre) & City(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Includes(montana, butte) & Includes(montana, helena) & Includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: City(pierre) & City(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte, montana) & City(helena, montana) & City(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings, x) & City(butte, x)\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(butte, pierre)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: City(pierre, x) & City(bismarck, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: InState(whiteSulphurSprings, sameState(butte)) & InState(butte, sameState(whiteSulphurSprings))\nTEXT: The city of Pierre is not in Montana.\nFOL: -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InState(x, butte) -> -InState(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: InState(pierre, sameState(bismarck)) & InState(bismarck, sameState(pierre))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 52,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) & InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula) & HomeToMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: HomeToMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -City(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: HomeTo(montana, missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: In(montana, missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) & City(x) -> -InPierre(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & IncludesMontana(butte) & IncludesMontana(helena) & IncludesMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Includes(montana, butte) & Includes(montana, helena) & Includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: StateOf(whiteSulphurSprings, state1) & StateOf(butte, state1)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: City(x) & InButte(x) -> -InPierre(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: InState(whiteSulphurSprings, state1) & InState(butte, state1)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InState(city, pierre) | -InState(city, butte)\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>\n\nNote: For the sentence \"Any city in Butte is not in Pierre,\" I translated it to \"-InPierre(x) | -InButte(x)\" which is equivalent to the original sentence. However, it is worth noting that the original sentence is not a formal first-order logic sentence, and the translation I provided is a common way to formalize it in FOL.\n\nHowever, in order to solve the problem, we need to find the correct translation of the sentence \"Any city in Butte is not in Pierre.\" which is equivalent to the original sentence. The correct translation is:\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\n\nHere is the corrected answer:\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>\n\nNow, we can evaluate the conclusion \"Montana is home to the city of Missoula.\" using the FOL translation \"InMontana(missoula)\". Since \"InMontana(missoula)\" is a premise, we can conclude that the conclusion follows from the premises."
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) & InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -City(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: IncludesMontana(butte) & IncludesMontana(helena) & IncludesMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -City(x) (Note: The original sentence \"Any city in Butte is not in Pierre\" is ambiguous and can be interpreted in different ways. The above FOL translation is one possible interpretation.)\nTEXT: Montana is home to the city of Missoula.\nFOL: HomeToMontana(missoula)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InState(x, butte) -> -InState(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: IncludesButte(montana) & IncludesHelena(montana) & IncludesMissoula(montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -CityInButte(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: HomeToMissoula(montana)\nTEXT: Montana is home to the city of Missoula.\nFOL: HomeToMissoula(montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: IncludesCities(montana, butte) & IncludesCities(montana, helena) & IncludesCities(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -CityInButte(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: HomeToMontana(missoula)\n</EVALUATE>\n\nNote: To correctly translate the sentence \"Any city in Butte is not in Pierre,\" I used the FOL expression \"-InPierre(x) | -CityInButte(x)\", which means that either a city is not in Pierre or it is not in Butte. This is because the original sentence is a universal statement, and the FOL expression I used captures the idea that for all cities, if they are in Butte, then they are not in Pierre.",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: InState(whiteSulphurSprings, state) & InState(butte, state) & state = montana\nTEXT: The city of Pierre is not in Montana.\nFOL: -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InState(x, pierre) | -InState(x, butte)\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -City(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) & InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: HomeToMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InState(x, butte) & City(x) -> -InState(x, pierre)\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & Includes(montana, butte) & Includes(montana, helena) & Includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) & InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula) & HomeTo(montana, missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 53,
  "responses": [
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1_Visa(x) | J1_Visa(x)) for all x. (InternationalStudentInUS(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1_Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1_Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1(visa) | J1(visa))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1(visa) & wants_to_work_in_US(student)) -> (apply_for_CPT(student) | apply_for_OPT(student))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: wants_to_work_in_US(mike) -> apply_for_CPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1(visa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudent(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudent(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) -> InternationalStudentInUS(x)\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & InternationalStudentInUS(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) \nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) for all x (InternationalStudentInUS(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) -> (WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x))))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: (WantsToWorkInUS(mike) -> ApplyForCPT(mike))\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) & InternationalStudentInUS(x)\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & InternationalStudentInUS(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 54,
  "responses": [
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudent(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1_Visa(x) | J1_Visa(x)) for all x where InternationalStudentInUS(x)\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (ApplyForCPT(x) | ApplyForOPT(x)) for all x where InternationalStudentInUS(x) & F1_Visa(x) & WantsToWorkInUS(x)\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike) for all x where WantsToWorkInUS(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1_Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) \nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1(x) | J1(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1_Visa(x) | J1_Visa(x)) for all x. where x is an InternationalStudentInUS(x)\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1_Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x)) for all x. where x is an InternationalStudentInUS(x)\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1_Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) | (InternationalStudentInUS(x) & -F1Visa(x) & -J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: (InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike))\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) \nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1_Visa(x) | J1_Visa(x)) \nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (InternationalStudent(x) & F1_Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: (InternationalStudent(mike) & WantsToWorkInUS(mike)) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1_Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & InUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudent(x) & InUS(x) & F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike is in the US.\nFOL: InUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike) | OPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) \nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: (WantsToWorkInUS(mike) -> ApplyForCPT(mike))\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x)) \nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) & J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) & J1Visa(x)) | -exists y. (InternationalStudentInUS(y) & (F1Visa(y) | J1Visa(y)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1Visa(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & InUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. ((InternationalStudent(x) & InUS(x) & F1Visa(x)) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1Visa(x) | J1Visa(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: (F1(x) | J1(x))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: (F1(x) & WantsToWorkInUS(x)) -> (ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1(mike)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 55,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 56,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 57,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Pet(ted) -> -Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) | -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) | -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) | -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) | -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) | -Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Pet(ted) -> -Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: -Cow(ted) -> -Pet(ted)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 58,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(x, 1716) & PrivateIvyLeagueResearchUniversity(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity) & Private(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(IvyLeagueResearchUniversity(x) & Private(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity) & Private(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e10)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(privateIvyLeagueResearchUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(privateIvyLeagueResearchUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(privateIvyLeagueResearchUniversity)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(Endowment(yaleUniversity))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(x, _) & PrivateIvyLeagueResearchUniversity(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(x, y) & PrivateIvyLeagueResearchUniversity(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(x, _) -> PrivateIvyLeagueResearchUniversity(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: PrivateIvyLeagueResearchUniversity(x) & MovedToNewHaven(x, _)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(privateIvyLeagueResearchUniversity)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity) & Private(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(x) & IvyLeagueResearchUniversity(x) & Private(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(PrivateIvyLeagueResearchUniversity(x) -> MovedToNewHaven(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity) & Private(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: -ValuedEndowment(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: -OrganizedIntoResidentialColleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(IvyLeagueResearchUniversity(x) & Private(x), NewHaven)\n</EVALUATE>\n\nNote: The FOL translation of the last sentence in the premises is incorrect because it does not make sense in the context of the problem. The correct translation should be:\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\n\nHowever, we cannot determine whether the conclusion follows from the premises using this translation because we cannot derive the conclusion from the premises. The conclusion is not logically entailed by the premises.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27ConstituentColleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(x) & PrivateIvyLeagueResearchUniversity(x)\n</EVALUATE>\n\nHowever, the above translation of the conclusion is not accurate. A more accurate translation would be:\n\n TEXT: A private Ivy League research university moved to New Haven.\nFOL: exists x. (PrivateIvyLeagueResearchUniversity(x) & MovedToNewHaven(x))\n\nThis is because the conclusion is a statement about the existence of a private Ivy League research university that moved to New Haven, rather than a statement about a specific university (Yale University) moving to New Haven.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity) & Private(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: - \nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: - \nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: - \nTEXT: A private Ivy League research university moved to New Haven.\nFOL: Private(x) & IvyLeagueResearchUniversity(x) & MovedToNewHaven(x, _)\n</EVALUATE>\n\nNote: I could not translate the last two sentences in the premises into FOL expressions because they do not contain any information that can be used to determine the conclusion."
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity)) & IvyLeague(yaleUniversity) & ResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(Endowment(yaleUniversity))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27ConstituentCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege}\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(IvyLeagueResearchUniversity(x)) & Private(x) & IvyLeague(x) & ResearchUniversity(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: -MovedToNewHaven(yaleUniversity)  // The statement is not relevant to the conclusion.\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: -MovedToNewHaven(yaleUniversity)  // The statement is not relevant to the conclusion.\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: -MovedToNewHaven(yaleUniversity)  // The statement is not relevant to the conclusion.\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(IvyLeagueResearchUniversity)\n</EVALUATE>\n\nNote: The FOL translation of the conclusion is incorrect because it does not correctly represent the statement \"A private Ivy League research university moved to New Haven\". A correct FOL translation would be: exists x. (IvyLeagueResearchUniversity(x) & MovedToNewHaven(x)).",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity) & Private(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege}\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(x) & IvyLeagueResearchUniversity(x) & Private(x)\n</EVALUATE>\n\nNote: In the FOL translation, I used the following predicates:\n\n- IvyLeagueResearchUniversity(x): x is a private Ivy League research university.\n- Private(x): x is a private university.\n- MovedToNewHaven(x): x moved to New Haven.\n- EndowmentValuedAt42Point3Billion(x): x's endowment is valued at $42.3 billion.\n- OrganizedInto27CollegesAndSchools(x): x is organized into 27 constituent colleges and schools.\n- ResidentialCollegesAtYale = {...}: The set of residential colleges at Yale.\n- MovedToNewHaven(x): x moved to New Haven.\n\nHowever, the FOL translation of the conclusion is not correct, because it is not possible to determine which private Ivy League research university moved to New Haven based on the premises. The premises only provide information about Yale University, but the conclusion is a more general statement that could apply to any private Ivy League research university.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3 billion)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: PrivateIvyLeagueResearchUniversity(x) & MovedToNewHaven(x, _)\n</EVALUATE>\n\nNote: The FOL translation for the conclusion is not fully specified, as the variable \"x\" is used to represent the private Ivy League research university, but the specific value of the variable is not provided. The \"_ \" is used to represent any value, as the conclusion does not specify a particular year.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: PrivateIvyLeagueResearchUniversity(x) & MovedToNewHaven(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity) & Private(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3e10)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(x) & IvyLeagueResearchUniversity(x) & Private(x)\n</EVALUATE>\n\nNote: I've used the following predicates and constants:\n- IvyLeagueResearchUniversity(x): x is a private Ivy League research university\n- Private(x): x is a private university\n- MovedToNewHaven(x): x moved to New Haven\n- EndowmentValue(x, y): the endowment value of x is y\n- OrganizedInto27CollegesAndSchools(x): x is organized into 27 constituent colleges and schools\n- ResidentialColleges(x, y): the residential colleges of x are y\n- benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege: the names of the residential colleges\n- yaleUniversity: the name of Yale University",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(Endowment(yaleUniversity))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoResidentialCollegesAndProfessionalSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege}\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(privateIvyLeagueResearchUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity) & Private(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentColleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(IvyLeagueResearchUniversity(x) & Private(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(IvyLeagueResearchUniversity(x)) \n</EVALUATE>\n\nTo determine whether the conclusion follows from the premises, we need to use a theorem solver. The theorem solver can be used to evaluate the FOL expressions in the <EVALUATE> section.\n\nThe FOL expression for the conclusion, \"A private Ivy League research university moved to New Haven,\" is \"MovedToNewHaven(IvyLeagueResearchUniversity(x)).\" \n\nThe FOL expression for one of the premises, \"Yale University is a private Ivy League research university,\" is \"IvyLeagueResearchUniversity(yaleUniversity).\"\n\nWe can use the theorem solver to determine whether the conclusion follows from the premises by checking whether the FOL expression for the conclusion follows from the FOL expressions for the premises.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3e10)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: (Private(yaleUniversity) & IvyLeagueResearchUniversity(yaleUniversity)) -> MovedToNewHaven(yaleUniversity, _)\n</EVALUATE>\n\nNote: In the FOL translation of the conclusion, I used a placeholder variable `_` because the conclusion is a conditional statement, and we don't know the specific year it moved to New Haven. If we knew the year, we could replace `_` with that year."
   ]
  ]
 },
 {
  "index": 59,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e10)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>\n\nNote: The FOL translation of the sentence \"Yale University has the largest university endowment of any educational institution\" is not directly given as it requires a comparison with other educational institutions. However, for the purpose of this evaluation, we will assume it to be true.\n\nAlso, note that the FOL translation of the sentence \"A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\" is also not directly given as it requires a predicate for the list of colleges. However, for the purpose of this evaluation, we will assume it to be true.\n\nTo determine whether the conclusion follows from the premises, we need to evaluate the FOL expressions using a theorem solver. However, without a specific theorem solver or a formal proof system, we cannot determine the validity of the conclusion."
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>\n\nHowever, the FOL translations for the premises and conclusion provided above are not entirely accurate. The FOL translation for the first premise should be \"IvyLeagueResearchUniversity(yaleUniversity)\" but the other premises and the conclusion should be translated as follows:\n\n<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargerThanAllOtherEducationalInstitutions(yaleUniversity)\n</EVALUATE>\n\nIn the FOL translation of the last premise, we should use a more accurate translation to represent that Yale University has the largest university endowment of any educational institution.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>\n\nNote: The FOL translations are based on the assumption that the variables and predicates are defined as follows:\n- Private(IvyLeagueResearchUniversity(x)) : x is a private Ivy League research university\n- MovedToNewHaven(x, y) : x moved to New Haven in year y\n- EndowmentValue(x, y) : the endowment value of x is y\n- OrganizedIntoColleges(x, y) : x has been organized into y constituent colleges and schools\n- ResidentialColleges(x, y) : the residential colleges of x are y\n- LargestUniversityEndowment(x) : x has the largest university endowment of any educational institution",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3 * 10^9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity, EducationalInstitution)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: HasEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3e10)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: HasEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3e10)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestEndowment(yaleUniversity, anyEducationalInstitution)\n</EVALUATE>\n\nHowever, the last sentence in the conclusion \"Yale University has the largest university endowment of any educational institution.\" is not well-defined in the given premises. The premises only state that Yale University's endowment is valued at $42.3 billion, but it does not provide any information about the endowments of other educational institutions. Therefore, it cannot be determined whether the conclusion follows from the premises.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3e10)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>\n\nHowever, it seems that the FOL translation of the last sentence is not accurate. The conclusion is about Yale University having the largest university endowment, but the given FOL translation does not capture this information. A more accurate translation would be:\n\nFOL: all x. (University(x) & LargerEndowment(x, y) -> LargestUniversityEndowment(x))\n\nHowever, we do not have information about the endowment of other educational institutions, so we cannot determine if the conclusion follows from the premises.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>\n\nHowever, we need to determine if the conclusion follows from the premises. In this case, the premises do not provide any information about the endowment of other educational institutions, so we cannot conclude that Yale University has the largest university endowment of any educational institution based solely on the given premises.\n\nTo determine if the conclusion follows, we need to analyze the premises and the conclusion using a theorem solver. \n\nHere is the FOL translation of the premises and conclusion:\n<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>\n\nUsing a theorem solver, we can determine that the conclusion does not follow from the premises. The premises only provide information about Yale University, but do not provide any information about other educational institutions, which are necessary to conclude that Yale University has the largest university endowment of any educational institution.\n\nTherefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity)) \nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yale, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentColleges(yale, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [benjaminFranklin, berkeley, branford, davenport, ezraStiles, graceHopper, jonathanEdwards, morse, pauliMurray, pierson, saybrook, silliman, timothyDwight, trumbull])\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: LargestUniversityEndowment(yale)\n</EVALUATE>\n\nNote: The FOL translations assume that the predicates are defined as follows:\n\n- `PrivateUniversity(x)`: x is a private university.\n- `IvyLeague(x)`: x is an Ivy League university.\n- `ResearchUniversity(x)`: x is a research university.\n- `MovedToNewHaven(x, y)`: x moved to New Haven in year y.\n- `EndowmentValue(x, y)`: the endowment value of x is y.\n- `ConstituentColleges(x, y)`: x has y constituent colleges and schools.\n- `ResidentialColleges(x, y)`: x has the following residential colleges: y.\n- `LargestUniversityEndowment(x)`: x has the largest university endowment.\n\nAlso note that the `EndowmentValue` predicate is defined as a decimal number, not a string, so the endowment value is specified as a floating-point number (42.3e9)."
   ]
  ]
 },
 {
  "index": 60,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27ConstituentCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialCollegesAtYale([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(piersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27ConstituentCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege}\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(piersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(PiersonCollege)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege)\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege}\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege}\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(PiersonCollege)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, piersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege}\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(piersonCollege)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3 * 10^9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, piersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollegeAtYale(piersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege, morseCollege, pauliMurrayCollege, piersonCollege, saybrookCollege, sillimanCollege, timothyDwightCollege, trumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, piersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: HasEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(PiersonCollege, yaleUniversity)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege])\nTEXT: Pierson College is a residential college at Yale.\nFOL: ResidentialCollege(yaleUniversity, PiersonCollege)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 61,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & On(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, X) & WorkingTitle(\"The Secret Dude Society\", X) & BritishSitcom(X)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(starring_members_of_Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & OnBBCThree(Badults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, Series(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, Series(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(starringOfBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") = Badults\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, WorkingTitle(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(TheSecretDudeSociety)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x) & Starring(Badults, x)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, andrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(x, andrewCollins) & WorkingTitle(\"The Secret Dude Society\", x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x) | MemberOfPappys(x) \nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, Series(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, X) & WorkingTitle(X, \"The Secret Dude Society\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(x, Andrew Collins) & WorkingTitle(x, \"The Secret Dude Society\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedInJuly2013OnBBCThree(Badults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, WorkingTitle(_, \"The Secret Dude Society\"))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(\"The Secret Dude Society\", _)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(starringOf(Badults))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedOn(Badults, BBCThree, 2013)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, X) & WorkingTitle(\"The Secret Dude Society\", X)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(X, AndrewCollins) & WorkingTitle(X, TheSecretDudeSociety)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & StarringMembersOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July2013) & PilotedOn(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(\"The Secret Dude Society\", _)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, andrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(X, andrewCollins) & WorkingTitle(X, \"The Secret Dude Society\")\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(starringMembers)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, WorkingTitle(\"The Secret Dude Society\", S))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July2013) & PilotedOn(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") & UsedFor(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, SeriesWithWorkingTitle(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") & UsedFor(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, WorkingTitle(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, Series(WorkingTitle(\"The Secret Dude Society\", _)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x) & Starring(Badults, x)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") & UsedFor(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, WorkingTitle(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, WorkingTitle(\"The Secret Dude Society\", X))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(\"The Secret Dude Society\")))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, WorkingTitle(\"The Secret Dude Society\", X))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(TheSecretDudeSociety) & UsedFor(TheSecretDudeSociety, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(TheSecretDudeSociety)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 62,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(stars(Badults))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> not exists y. (Show(y) & Piloted(y, _, BBCTwo) | Piloted(y, _, BBCThree) & Star(x, y)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> not exists y. (Show(y) & (Piloted(y, _, BBCTwo) | Piloted(y, _, BBCThree)) & Star(x, y)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> not exists y. ((Show(y) & (Piloted(y, _, BBCTwo) | Piloted(y, _, BBCThree))) & Star(x, y)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(x) -> Starring(x, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & PilotedOn(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(The Secret Dude Society) & UsedFor(The Secret Dude Society, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -(PilotedOn(x, BBCTwo) | PilotedOn(x, BBCThree)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -(PilotedOn(x, BBCTwo) | PilotedOn(x, BBCThree)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starsBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedInJuly2013OnBBCThree(Badults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(TheSecretDudeSociety, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> (PilotedOnBBCTwo(x) | -PilotedOnBBCThree(x)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> (PilotedOnBBCTwo(x) | -PilotedOnBBCThree(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starOf(Badults))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedOn(Badults, BBCThree, July 2013)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MemberOfPappys(x) | -PilotedOn(x, BBCTwo, _) | -PilotedOn(x, BBCThree, _))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MemberOfPappys(x) | -PilotedOn(x, BBCTwo, _) | -PilotedOn(x, BBCThree, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MembersOfPappys(x) | -Piloted(x, BBC Two) & -Piloted(x, BBC Three))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MembersOfPappys(x) | -Piloted(x, BBC Two) & -Piloted(x, BBC Three))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & StarringIn(Badults, Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & PilotedOn(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOf(Pappy's, x) -> -(StarringIn(x, BBCTwo) | StarringIn(x, BBCThree)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOf(Pappy's, x) -> -(StarringIn(x, BBCTwo) | StarringIn(x, BBCThree)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(The Secret Dude Society, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MemberOfPappys(x) | -PilotedOn(x, BBCTwo) & -PilotedOn(x, BBCThree))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Starring(x, Show(PilotedOn(BBCTwo, x) | PilotedOn(BBCThree, x))))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Starring(x, Show(PilotedOn(BBCTwo, x) | PilotedOn(BBCThree, x))))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(TheSecretDudeSociety, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Member(x, Pappys) -> -(Starring(x, PilotedIn(_, _, BBCTwo)) | Starring(x, PilotedIn(_, _, BBCThree))))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-Member(x, Pappys) | -(Starring(x, PilotedIn(_, _, BBCTwo)) | Starring(x, PilotedIn(_, _, BBCThree))))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starOf(Badults))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, BBCThree, July 2013)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") = Badults\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> (exists y. (PilotedIn(y, BBCTwo, _) & starOf(y, x)) | exists y. (PilotedIn(y, BBCThree, _) & starOf(y, x))))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two.\nFOL: all x. (MembersOfPappys(x) -> -exists y. (PilotedIn(y, BBCTwo, _) & starOf(y, x)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -exists y. (PilotedIn(y, BBCThree, _) & starOf(y, x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(Starring(x, PilotedOn(BBCTwo, _)) | Starring(x, PilotedOn(BBCThree, _))))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -((exists y. Starring(x, y) & PilotedOn(BBCTwo, y)) | (exists y. Starring(x, y) & PilotedOn(BBCThree, y))))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July2013) & BBCThree(channelBadults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> - (exists y. (PilotedOn(y, BBCTwo) | PilotedOn(y, BBCThree)) & Starring(x, y)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MembersOfPappys(x) | - (exists y. (PilotedOn(y, BBCTwo) | PilotedOn(y, BBCThree)) & Starring(x, y)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(x) -> Starring(x, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & Channel(Badults, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, The Secret Dude Society)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -(PilotedIn(x, BBC Two) | PilotedIn(x, BBC Three)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -(PilotedIn(x, BBC Two) | PilotedIn(x, BBC Three)))\nTEXT: A show piloting on BBC Two or BBC Three is starred by members of Pappy's.\nFOL: (PilotedIn(x, BBC Two) | PilotedIn(x, BBC Three)) -> MembersOfPappys(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starredIn(Badults))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedOn(Badults, BBCThree, July 2013)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") = Badults\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> (PilotedOn(x, BBCTwo, _) | PilotedOn(x, BBCThree, _)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-PilotedOn(x, BBCTwo, _) & -PilotedOn(x, BBCThree, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x) -> Starring(x, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(Piloted(x, _, BBC Two) | Piloted(x, _, BBC Three)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(Piloted(x, _, BBC Two) | Piloted(x, _, BBC Three)))\nTEXT: A show starring members of Pappy's piloted on BBC Three.\nFOL: exists x. (Starring(x, Badults) & MemberOfPappys(x) & Piloted(Badults, _, BBC Three))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedInJuly2013(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MembersOfPappys(starring x) | -PilotedOn(BBCTwo, x) & -PilotedOn(BBCThree, x))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MembersOfPappys(starring x) | -PilotedOn(BBCTwo, x) & -PilotedOn(BBCThree, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013) & BBCThree(Badults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, andrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(Starring(x, Pilot(BBCTwo)) | Starring(x, Pilot(BBCThree))))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(Starring(x, Pilot(BBCTwo)) | Starring(x, Pilot(BBCThree))))\nTEXT: A show piloting on BBC Two or BBC Three is either a show piloting on BBC Two or a show piloting on BBC Three.\nFOL: all x. (Pilot(BBCTwo) | Pilot(BBCThree))\nTEXT: A show piloting on BBC Two or BBC Three is a show piloting on BBC Two or a show piloting on BBC Three.\nFOL: all x. (Pilot(x) -> (Pilot(BBCTwo) | Pilot(BBCThree)))\nTEXT: A show piloting on BBC Two is a show piloting on BBC Two.\nFOL: all x. (Pilot(x) -> Pilot(BBCTwo))\nTEXT: A show piloting on BBC Two or BBC Three is a show piloting on BBC Two or a show piloting on BBC Three.\nFOL: all x. (Pilot(x) -> (Pilot(BBCTwo) | Pilot(BBCThree)))\nTEXT: A show piloting on BBC Two or BBC Three is a show piloting on BBC Two.\nFOL: all x. (Pilot(x) -> Pilot(BBCTwo))\nTEXT: A show piloting on BBC Two or BBC Three is a show piloting on BBC Three.\nFOL: all x. (Pilot(x) -> Pilot(BBCThree))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x) -> StarredIn(Badults, x)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & On(BBC Three, Badults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(PilotedIn(x, BBC Two) | PilotedIn(x, BBC Three)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(PilotedIn(x, BBC Two) | PilotedIn(x, BBC Three)))\nTEXT: A show piloting on BBC Two or BBC Three is starred by a member of Pappy's.\nFOL: (PilotedIn(x, BBC Two) | PilotedIn(x, BBC Three)) -> MemberOfPappys(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -PilotedOn(x, BBCTwo | BBCThree))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -PilotedOn(x, BBCTwo | BBCThree))\nTEXT: A show piloting on BBC Two or BBC Three.\nFOL: PilotedOn(x, BBCTwo | BBCThree)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, MembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & PilotedOn(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") & UsedFor(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MemberOfPappys(x) | -PilotedOn(x, BBCTwo) & -PilotedOn(x, BBCThree))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MemberOfPappys(x) -> (-PilotedOn(x, BBCTwo) & -PilotedOn(x, BBCThree)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. ((MemberOfPappys(x) & PilotedOn(x, BBCTwo)) | (MemberOfPappys(x) & PilotedOn(x, BBCThree)) | (-MemberOfPappys(x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x) -> Starring(x, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & Channel(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Starring(x, Show(PilotedIn(y, July 2013) & Channel(y, BBCTwo) | PilotedIn(y, July 2013) & Channel(y, BBCThree))))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Starring(x, Show(PilotedIn(y, July 2013) & Channel(y, BBCTwo) | PilotedIn(y, July 2013) & Channel(y, BBCThree))))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & PilotedOn(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") & UsedFor(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOf(x, Pappy's) -> -Starring(x, Show(PilotedOn(_, BBCTwo) | PilotedOn(_, BBCThree))))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOf(x, Pappy's) -> -(Starring(x, Show(PilotedOn(_, BBCTwo) | PilotedOn(_, BBCThree)))))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x) -> Starring(x, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July2013) & On(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(TheSecretDudeSociety, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -((PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) & Starring(x, x)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -((PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) & Starring(x, x)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) | -Starring(x, x))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) | (PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) -> -Starring(x, x))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) | (PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) -> -Starring(x, x))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) | (PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)) -> -Starring(x, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x) -> Starring(x, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Piloted(x, _, BBC Two | BBC Three))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Piloted(x, _, BBC Two | BBC Three))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Piloted(x, _, BBC Two | BBC Three))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Piloted(x, _, BBC Two | BBC Three))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -Piloted(x, _, BBC Two | BBC Three))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(x) -> StarredIn(Badults, x)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July2013) & PilotedOn(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") & UsedFor(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MembersOfPappys(x) & StarredIn(_, x) & PilotedOn(_, BBCTwo) | MembersOfPappys(x) & StarredIn(_, x) & PilotedOn(_, BBCThree))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (-MembersOfPappys(x) | -exists y. (StarredIn(y, x) & PilotedOn(y, BBCTwo) | StarredIn(y, x) & PilotedOn(y, BBCThree)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 63,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: Stock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: Stock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: Stock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: Stock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: Stock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: Stock(ko)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 64,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Stock(ko) & GrowthStock(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & -GrowthCompanyStock(ko)) | (-CompanyStock(ko) & GrowthCompanyStock(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (Stock(ko) & GrowthStock(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: Stock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> VolatileStock(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (VolatileStock(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompanyStock(ko))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: Stock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 65,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> ((-CompanyStock(ko)) & -Volatile(ko))\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> ((-CompanyStock(ko)) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 66,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. ((-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-(BeginsWith34(x)) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 67,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> (34(x)))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. ((34(x)) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: 35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: 35(x) -> -34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: IstanbulPlate(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. ((-BeginsWith34(x)) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: IstanbulPlate(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> (BeginWith34(x)))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginWith35(x) -> -BeginWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. ((-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. ((-BeginsWith34(x) | -Istanbul(x)))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 68,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoneyForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoneyForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoneyForCollegeTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobsOnCampus(mary) & NeedToEarnMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoneyToHelpPayForCollegeTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoneyForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoneyForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoneyForCollegeTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobs(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobs(mary) & NeedMoneyToPayForTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToPayForTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoneyToPayForTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobsOnCampus(mary) & NeedToEarnMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoneyToHelpPayForCollegeTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoneyForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoneyForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoneyForCollegeTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToPayTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToPayTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToPayTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoneyToPayTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoneyToHelpPayForCollegeTuition(mary)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoneyForTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoneyForTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyForTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoneyForTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobsOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobs(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(people) | EnjoyDiningHallMeals(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> NotPickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedToEarnMoney(mary)) -> (NotPickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedToEarnMoney(mary)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (NotPickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoneyToHelpPayForCollegeTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoneyToHelpPayForCollegeTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoneyToHelpPayForCollegeTuition(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) | EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -Picky(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedMoney(mary)) -> (-Picky(mary) & -NeedMoney(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoney(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(someone) & -EnjoyDiningHallMealsAndRecipes(someone)) | (-OrderTakeoutFrequentlyInCollege(someone) & EnjoyDiningHallMealsAndRecipes(someone)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToPayForCollegeTuition(mary))\nTEXT: Mary needs to earn money to help pay for her college tuition.\nFOL: NeedMoneyToPayForCollegeTuition(mary)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 69,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendLotOfTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) | EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendALotOfTimeEatingAndCatchingUpWithFriends(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendALotOfTimeEatingAndCatchingUpWithFriends(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedMoney(mary)) -> (-PickyEater(mary) & -NeedMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendLotTimeEatingAndCatchingUp(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendALotOfTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendALotOfTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedMoney(mary)) -> (-PickyEater(mary) & -NeedMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x, campus) -> NeedToEarnMoney(x, collegeTuition))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x, college) -> StudentJob(x, campus))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(people, college) & -EnjoyDiningHall(people)) | (-OrderTakeoutFrequently(people, college) & EnjoyDiningHall(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEatingAndCatchingUp(x, campusDiningHalls))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary, campus) & NeedToEarnMoney(mary, collegeTuition)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary, collegeTuition))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEatingAndCatchingUp(mary, campusDiningHalls)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEatingAndCatchingUp(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobs(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> NotPicky(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (NotPicky(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: NotPicky(mary) & SpendTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyForTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyForTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyForTuition(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoneyForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(people) | EnjoyDiningHallMealsAndRecipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> NotPickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoneyForCollegeTuition(mary)) -> (NotPickyEater(mary) & -NeedToEarnMoneyForCollegeTuition(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: NotPickyEater(mary) & SpendALotOfTimeEatingAndCatchingUp(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(x) & -EnjoyDiningHallMealsAndRecipes(x)) | (-OrderTakeoutFrequentlyInCollege(x) & EnjoyDiningHallMealsAndRecipes(x)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendALotOfTimeEatingAndCatchingUpWithFriends(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeout(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> EatAndCatchUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedMoney(mary)) -> (-PickyEater(mary) & -NeedMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & EatAndCatchUp(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendALotOfTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendALotOfTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobs(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -Picky(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedMoney(mary)) -> (-Picky(mary) & -NeedMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -Picky(mary) & SpendTimeEating(mary)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) & SpendTimeEating(mary)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 70,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendLotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedMoney(mary)) -> (-PickyEater(mary) & -NeedMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) & SpendTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoneyForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoneyForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyForCollegeTuition(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) & SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) | EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedMoney(mary)) -> (-PickyEater(mary) & -NeedMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendTimeEating(mary)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) | EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(people) & -EnjoyDiningHall(people)) | (-OrderTakeoutFrequently(people) & EnjoyDiningHall(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendLotOfTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendLotOfTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) & SpendTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobsOnCampus(mary) & NeedToEarnMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) | (PickyEater(mary) & SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingInDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) & SpendTimeEatingInDiningHalls(mary)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendTimeEatingAndCatchingUp(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToPayTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToPayTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToPayTuition(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendLotOfTimeEatingAndCatchingUp(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) | (PickyEater(mary) & SpendTimeEating(mary))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobsOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) & SpendLotOfTimeEatingAndCatchingUpWithFriends(mary)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendLotTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: -PickyEater(mary) | (PickyEater(mary) & SpendLotTimeEating(mary))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) | EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) & SpendTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendLotOfTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobs(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) & SpendLotOfTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobsOnCampus(mary) & NeedToEarnMoneyToHelpPayForCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedToEarnMoneyToHelpPayForCollegeTuition(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendALotOfTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUpWithFriends(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyToHelpPayCollegeTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyToHelpPayCollegeTuition(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendALotOfTimeEatingAndCatchingUpWithFriends(mary)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) & SpendTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendALotOfTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendALotOfTimeEatingAndCatchingUp(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyForTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) | EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> SpendLotTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedMoneyForTuition(mary)) -> (-PickyEater(mary) & -NeedMoneyForTuition(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendLotTimeEatingAndCatchingUp(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> NotPicky(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (WorkInStudentJobs(mary) & NeedToEarnMoney(mary)) -> (NotPicky(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (NotPicky(mary) | (Picky(mary) -> SpendTimeEating(mary)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJobOnCampus(mary) & NeedToEarnMoney(mary)) -> (-PickyEater(mary) & -NeedToEarnMoney(mary))\nTEXT: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\nFOL: (-PickyEater(mary) | (PickyEater(mary) -> SpendTimeEating(mary)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 71,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 72,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 73,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 74,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 75,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 76,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeout(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeout(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeout(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ReceiveManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ReceiveManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ReceiveManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ReceiveManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreater9(subway) & -TakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 77,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreater9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 78,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ReceiveManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreater9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreater9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreater9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 79,
  "responses": [
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Read(x, y) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Person(harry) & Read(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadsBook(x) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x) -> Knowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Person(x) & Reads(x, y) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(Walden)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 80,
  "responses": [
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>\n\nNote: The FOL translation of \"Harry is smarter than before\" is a bit ambiguous, as it is not clear what \"before\" refers to. A more precise translation would be to introduce a variable for the time before Harry read the book, and use that variable in the comparison. However, this is not possible with the given information. Therefore, the translation provided is a simplified version that assumes \"before\" refers to a fixed point in time.",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadsBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Person(x) & ReadBook(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry) & -Smarter(before)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, Book(y)) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Book(walden))\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Read(x, Book) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry, Book(\"Walden\" by Henry Thoreau))\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>\n\nNote that the translation of \"Harry is smarter than before\" to FOL is not straightforward, as it involves a comparison between two entities (Harry and before). A more formal translation would be:\n\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>\n\nNote: Since \"before\" is not defined in the premises, the translation of the conclusion is not complete. The conclusion would be more accurately translated as \"Smarter(harry, before(harry))\" if \"before\" was defined as a function that takes a person as an argument and returns their state before reading the book.",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>\n\nHowever, the translation of \"Harry is smarter than before\" is not entirely accurate in FOL. The correct translation would be \"Smarter(harry, before)\" where 'before' is a specific person. But since we don't have a specific person representing 'before', we can represent 'before' as a constant, let's call it 'before'. But since we don't have any information about 'before', we can't evaluate this expression.\n\nIf we assume that 'before' represents Harry's state before reading the book, we can translate the conclusion as:\n\n TEXT: Harry is smarter than before.\nFOL: Smarter(harry, harry_before)\n\nHowever, this is still not entirely accurate in FOL, because we are using a variable (harry) and a constant (harry_before) in the same expression, which is not allowed in FOL. \n\nTo accurately translate the conclusion in FOL, we need more information about Harry's state before reading the book. But since we don't have any information about that, we can't evaluate the conclusion.\n\nSo, the correct translation of the premises and conclusion is:\n\n<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry) & Book(walden)\n</EVALUATE>\n\nAnd we can't evaluate the conclusion because it requires more information about Harry's state before reading the book.",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Person(x) & Read(x, Book(y)) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry, Book(walden))\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, Before(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>\n\nHowever, there is a problem with the conclusion. In the original text, it says \"Harry is smarter than before\", but the FOL translation should be \"Smarter(harry, before)\" where \"before\" is a variable that represents the time before Harry read the book \"Walden\". But \"before\" is not a defined variable. To correctly translate the conclusion, we need to define a variable for the time before Harry read the book \"Walden\". Let's assume the variable is \"before\". \n\nSo, the corrected FOL translation for the conclusion is:\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>\n\nNote: The FOL translation of the conclusion 'Harry is smarter than before' assumes that there is a constant 'before' representing the time before Harry read the book. If we assume that the time before is not explicitly defined, we can modify the conclusion to 'Smarter(harry)' without the second argument, as the comparison is not necessary.",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>\n\nNote: In the FOL translation of the conclusion, I assumed \"before\" as a constant representing the time period before Harry read the book. However, in a more formal setting, \"before\" would be a variable or a predicate, and the conclusion would be written as \"Smarter(harry, x) & Before(x, Read(harry))\".",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, \"Walden\")\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) & Book(y) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 81,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, Book) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Book)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> Knowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> Knowledge(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> Knowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> Knowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, Book(x)) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Book(walden))\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainsKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry) & Book(walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x) -> Knowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> Knowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, Book(y)) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Book(walden))\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainsKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Person(x) & ReadBook(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry) & Book(walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainsKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 82,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(output(x)) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(output(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)) for all x.\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(OUTPUT(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(OUTPUT(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)) for all x.\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(Output(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)) for all x.\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(Output(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)) for all x.\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(OUTPUT(x)) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(OUTPUT(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(output(x)) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(output(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: LanguageGenerationTask(x) | LanguageUnderstandingTask(x)\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 83,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(Output(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(machineTranslation))\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>\n\nBased on the FOL translations, we can see that the conclusion \"Machine translation is a language understanding task\" does not follow from the premises.\n\nTo see why, let's analyze the premises:\n\n1. All NLP tasks can be categorized as either language generation or language understanding tasks.\n2. If the output of an NLP task is a text sequence, then it is a language generation task.\n3. Machine translation is an NLP task.\n4. The output of machine translation is a text sequence.\n\nFrom premise 1, we know that machine translation must be either a language generation task or a language understanding task.\n\nFrom premise 2, we know that if the output of an NLP task is a text sequence, then it is a language generation task. Since the output of machine translation is a text sequence (premise 4), we can conclude that machine translation is a language generation task.\n\nTherefore, the conclusion \"Machine translation is a language understanding task\" does not follow from the premises.",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(Output(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(machineTranslation))\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>\n\nTo determine whether the conclusion follows from the premises, we need to evaluate the FOL expressions. \n\nFrom the first premise, we know that a natural language processing task is either a language generation task or a language understanding task. \n\nFrom the second premise, we know that if the output of a natural language processing task is a text sequence, then it is a language generation task. \n\nFrom the third premise, we know that machine translation is a natural language processing task. \n\nFrom the fourth premise, we know that the output of machine translation is a text sequence. \n\nUsing the second premise, we can conclude that machine translation is a language generation task. \n\nHowever, from the first premise, we also know that a natural language processing task is either a language generation task or a language understanding task. \n\nTherefore, we can conclude that machine translation is either a language generation task or a language understanding task. \n\nHowever, we cannot conclude that machine translation is a language understanding task. \n\nTherefore, the conclusion does not follow from the premises."
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP_Task(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP_Task(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP_Task(machine_translation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machine_translation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machine_translation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(Output(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(machineTranslation))\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessing(x) & TextSequence(OUTPUT(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessing(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(OUTPUT(machineTranslation))\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(OUTPUT(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(OUTPUT(machineTranslation))\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(OUTPUT(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machine_translation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(OUTPUT(machine_translation))\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machine_translation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(output(x)) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(output(machineTranslation))\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) & NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: LanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 84,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> RequiredDeposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (EqualDeposit(1 month's rent) | MoreDeposit(1 month's rent))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithFluffy(tom) & LessOrEqualDeposit(1500)) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreDeposit(1500, 2000)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessOrEqual(1500, 2000)) -> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: 2000 = MonthlyRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessOrEqual(1500, Deposit(theOliveGarden))) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(o) | MoreThanOneMonthRent(o))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessThan1500Deposit(theOliveGarden) -> WillRent(tom, theOliveGarden))\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan1500(2000)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & SecurityDeposit(theOliveGarden) <= 1500) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & NoMoreThan1500SecurityDeposit) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan1500(2000)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & MoreThan(1500, SecurityDeposit(theOliveGarden))) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(1500, 2000)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & DepositNoMoreThan1500(x) -> RentApartment(x, tom))\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan1500(2000)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(theOliveGarden, tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWith(fluffy, tom) & LessOrEqual(theOliveGarden, 1500)) <-> RentApartmentIn(theOliveGarden, tom)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentIn(theOliveGarden, tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & Deposit(theOliveGarden) <= 1500) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThanMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x) | MoreDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: TomWillRent(tom, theOliveGarden) <-> (AllowedToMoveIn(tom, fluffy) & LessOrEqualDeposit(theOliveGarden, 1500))\nTEXT: 2000$ is more than $1500.\nFOL: MoreDeposit(theOliveGarden, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: TomWillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (OneMonthRent = 2000) | (MoreThanOneMonthRent)\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & DepositNoMoreThan1500) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessOrEqual(1500, 2000)) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessEqual(1500, 2000)) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(1500, 2000)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, OneMonthsRent) | More(x, OneMonthsRent)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & SecurityDeposit(theOliveGarden) <= 1500) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) = x | MonthRent(x) < x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & SecurityDeposit(theOliveGarden) <= 1500) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) = x | MoreThan(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessThan(1500, SecurityDeposit(theOliveGarden))) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (EqualDeposit(2000) | MoreDeposit(2000))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessOrEqualDeposit(1500)) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x, OneMonthRent(x)) | MoreDeposit(x, OneMonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessThanDeposit(1500, OneMonthRent(theOliveGarden))) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithPet(tom, fluffy) & MoreThanMonthRent(theOliveGarden, 1500)) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThanMonthRent(theOliveGarden, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = SecurityDeposit(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithPet(tom, fluffy) & LessThanOrEqualTo1500(SecurityDeposit(theOliveGarden))) <-> RentApartmentInManagedBuilding(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThanMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartmentInManagedBuilding(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = Deposit(x) | Deposit(x) > MonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & Deposit(theOliveGarden) <= 1500) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000 is more than 1500.\nFOL: 2000 > 1500\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & Allowed(x, fluffy) & LessEqual(theOliveGarden, 1500)) <-> WillRent(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: WillRent(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualToOneMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithPet(tom, fluffy) & Deposit(theOliveGarden) & LessThanOrEqualTo1500(theOliveGarden)) <-> RentAnApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan1500(theOliveGarden)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentAnApartment(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & SecurityDeposit(x, 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThanOneMonthRent(theOliveGarden, 1500)\nTEXT: Tom will rent an apartment in The Olive Garden.\nFOL: RentApartment(tom, theOliveGarden)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 85,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) = x | MonthRent(x) < x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden, fluffy) & SecurityDeposit(theOliveGarden) <= 1500) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) = x | More(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & MoreOrEqual(1500, SecurityDeposit(x))) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, OneMonthsRent(x)) | More(x, OneMonthsRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & NotMoreThan(x, 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, 1 * MonthlyRent) | More(x, 1 * MonthlyRent)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & MoreOrEqual(SecurityDeposit(x), 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy) & RentApartment(tom, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & SecurityDeposit(theOliveGarden, 1500)) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThanOneMonthRent(theOliveGarden, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, fluffy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (OneMonthRent(x) -> (SecurityDeposit(x) | SecurityDeposit(x) & More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) <= 1500) <-> WillRent(x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthsRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit(x) & Deposit(x) <= 1500) <-> TomWillRent(x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (OneMonthRent(x) -> Deposit(x)) | (Deposit(x) & -OneMonthRent(x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit(x) <= 1500) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> ((OneMonthsRent(x) & -More(x)) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy, theOliveGarden) & LessOrEqual(1500, Deposit(theOliveGarden))) <-> AllowedToMoveIn(tom, fluffy, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, fluffy, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (MonthRent(x) = 1500 | MonthRent(x) > 1500))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & MonthRent(x) <= 1500) <-> Rent(x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (OneMonthRent() >= SecurityDeposit()) | (SecurityDeposit() > OneMonthRent())\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent() = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & SecurityDeposit() <= 1500) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (DepositEqualToOneMonthRent(x) | MoreThanOneMonthRent(x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy, theOliveGarden) & NoMoreThan1500Deposit(theOliveGarden)) <-> (ManagedBuilding(theOliveGarden) & AllowedToMoveIn(tom, fluffy, theOliveGarden) & DepositNoMoreThan1500(theOliveGarden))\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan1500(2000)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, fluffy, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & More(1500)) <-> (ManagedBuilding(x) & Deposit(x) & Deposit(x) <= 1500)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit(x) & -More(x, 1500)) -> WillRent(x, tom)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (OneMonthRent(oliveGarden) | MoreThanOneMonthRent(oliveGarden))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(oliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, oliveGarden, fluffy) & DepositNoMoreThan1500(oliveGarden)) <-> (ManagedBuilding(oliveGarden) & AllowedToMoveIn(tom, oliveGarden, fluffy) & DepositNoMoreThan1500(oliveGarden))\nTEXT: 2000$ is more than $1500.\nFOL: 1500 < 2000\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, oliveGarden, fluffy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(theOliveGarden, tom, fluffy) & DepositNoMoreThan1500(theOliveGarden)) <-> RentApartment(theOliveGarden, tom)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan1500(2000)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, tom, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden, fluffy) & Deposit(theOliveGarden) <= 1500) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & Allowed(x, fluffy) & Deposit(x) & -More(x, 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: Allowed(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (DepositEqualToOneMonthRent(x) | MoreThanOneMonthRent(x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy, x) & MoreThanDeposit(x, 1500)) <-> WillRent(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, fluffy, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) = x | More(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden, fluffy) & LessOrEqual(1500, SecurityDeposit(theOliveGarden))) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, theOliveGarden, fluffy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (OneMonthsRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & DepositNoMoreThan1500(x)) <-> WillRent(x, tom)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: 2000 = MonthlyRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden, fluffy) & LessEqual(1500, SecurityDeposit(theOliveGarden))) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy, theOliveGarden) & Deposit(theOliveGarden) & LessOrEqual(1500, Deposit(theOliveGarden))) <-> Rent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, fluffy, theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (Equal(x, OneMonthRent(x)) | More(x, OneMonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden, fluffy) & LessOrEqual(Deposit(theOliveGarden), 1500)) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, theOliveGarden, fluffy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = Deposit(x) | MoreThanDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessThanDeposit(1500)) <-> WillRent(tom)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\nFOL: AllowedToMoveIn(tom, fluffy)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 86,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x, 2000) | MoreDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & LessEqualDeposit(x, 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (EqualDeposit(theOliveGarden, 2000) | MoreDeposit(theOliveGarden, 2000))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (OneMonthRent == Deposit) | (Deposit > OneMonthRent)\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(oliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, oliveGarden, fluffy) & Deposit(oliveGarden) <= 1500) <-> RentApartment(tom, oliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (Deposit(oliveGarden) == 2000) | (Deposit(oliveGarden) > 2000)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) | -MonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & DepositNoMoreThan1500(x)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (MonthRent(theOliveGarden, 2000) | -MonthRent(theOliveGarden))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) | MoreThan(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithFluffy(tom) & LessThan(1500, SecurityDeposit(theOliveGarden))) <-> RentApartment(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (SecurityDeposit(theOliveGarden) = 2000 | MoreThan(SecurityDeposit(theOliveGarden), 2000))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit(x) & NotMore(x, 1500)) -> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (MonthRent(theOliveGarden, 2000) | More(theOliveGarden))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | -MonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit(x, 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (Deposit(theOliveGarden, 2000) | -Deposit(theOliveGarden, 2000))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToMonthRent(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualToMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & LessThanOrEqualTo1500(DepositRequired(x))) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan1500(2000)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (EqualToMonthRent(theOliveGarden) | MoreThanMonthRent(theOliveGarden))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & LessThanOrEqualDeposit(x, 1500)) <-> Rent(x, tom)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (Deposit(theOliveGarden) & LessThanOrEqualDeposit(theOliveGarden, 2000)) | MoreThanMonthRent(theOliveGarden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = 2000 | MoreThan2000(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & LessThan1500(DepositRequired(x))) <-> TomRents(x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (DepositRequired(theOliveGarden) = 2000 | MoreThan2000(DepositRequired(theOliveGarden)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(OliveGarden) = 2000) | Deposit(OliveGarden) > 2000\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit(x) <= 1500) <-> Rent(x) = 2000\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (Deposit(OliveGarden) = 2000) | Deposit(OliveGarden) > 2000\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. ((Deposit(x) & -MoreThanOneMonthRent(x)) | MoreThanOneMonthRent(x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit(x) & -MoreThanOneMonthRent(x, 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThanOneMonthRent(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: ((Deposit(theOliveGarden) & -MoreThanOneMonthRent(theOliveGarden, 2000)) | MoreThanOneMonthRent(theOliveGarden, 2000))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = 2000 | MoreThan2000(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & LessThan1500(DepositRequired(x))) <-> Rent(x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (MonthRent(theOliveGarden) = 2000 | MoreThan2000(DepositRequired(theOliveGarden)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessOrEqual(1500, 2000)) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (Equal(2000, 2000) | More(2000, 2000))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (OneMonthsRent() = SecurityDeposit()) | (SecurityDeposit() > OneMonthsRent())\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent() = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & SecurityDeposit() <= 1500) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (SecurityDeposit(theOliveGarden) = 2000) | (SecurityDeposit(theOliveGarden) > 2000)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnsTom(fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) <= 1500) <-> WillRentTom(x)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(theOliveGarden) = 2000 | MoreThanOneMonthRent(theOliveGarden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x, 2000) | MoreDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessThanDeposit(theOliveGarden, 1500)) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (EqualDeposit(theOliveGarden, 2000) | MoreDeposit(theOliveGarden, 2000))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. ((Deposit(x) & -MoreDeposit(x)) | MoreDeposit(x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MoreDeposit(theOliveGarden) & Deposit(theOliveGarden) & Rent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & -MoreThan1500Deposit(x)) <-> Rent(x)\nTEXT: $2000 is more than $1500.\nFOL: MoreThan1500Deposit(theOliveGarden)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: ((Deposit(theOliveGarden) & -MoreDeposit(theOliveGarden)) | MoreDeposit(theOliveGarden))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(oilveGarden) = 2000) | Deposit(oilveGarden) > 2000\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oilveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: 2000 = MonthlyRent(oilveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Pet(fluffy) & ManagedBuilding(oilveGarden) & Deposit(oilveGarden) <= 1500) <-> RentApartment(tom, oilveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (Deposit(oilveGarden) = 2000) | Deposit(oilveGarden) > 2000\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & LessOrEqual(x, 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: More(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (Equal(theOliveGarden, 2000) | More(theOliveGarden, 2000))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & SecurityDeposit(x, 1500)) <-> (RentsApartment(tom, x) & AllowedToMoveIn(tom, fluffy) & SecurityDeposit(x, 1500))\nTEXT: 2000$ is more than $1500.\nFOL: MoreThanOneMonthRent(theOliveGarden, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (SecurityDeposit(theOliveGarden, 2000) | MoreThanOneMonthRent(theOliveGarden, 2000))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) & (EqualDeposit(x, MonthlyRent) | MoreThanDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit(x) & LessThanOrEqualToDeposit(x, 1500)) <-> WillRent(x, tom)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (Deposit(theOliveGarden) & (EqualDeposit(theOliveGarden, 2000) | MoreThanDeposit(theOliveGarden)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. ((OneMonthRent(x) & -More(x)) | More(x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & DepositNoMoreThan1500(theOliveGarden)) <-> WillRent(tom, theOliveGarden)\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: ((OneMonthRent(theOliveGarden) = 2000 & -More(theOliveGarden)) | More(theOliveGarden))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) & -SecurityDeposit(x)) | -MonthRent(x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & OwnsTom(fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: ManagedBuilding(x) -> ((AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) <= 1500) & ((-AllowedToMoveIn(x, fluffy) & -SecurityDeposit(x) <= 1500))\nTEXT: 2000$ is more than $1500.\nFOL: 2000 > 1500\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: SecurityDeposit(theOliveGarden) = 2000 | SecurityDeposit(theOliveGarden) > 2000\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) & EqualDeposit(x, 2000)) | (DepositRequired(x) & MoreDeposit(x, 2000))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & Allowed(x, fluffy) & DepositNoMoreThan(x, 1500)) <-> RentApartment(tom, x)\nTEXT: 2000$ is more than $1500.\nFOL: MoreThan(2000, 1500)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (EqualDeposit(theOliveGarden, 2000) & -MoreThan(2000, 1500)) | (MoreDeposit(theOliveGarden, 2000))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (EqualsOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualsOneMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & LessThanOrEqualToOneMonthRent(x)) <-> (ManagedBuilding(x) & DepositRequired(x) & LessThanOrEqualToOneMonthRent(x))\nTEXT: 2000$ is more than $1500.\nFOL: MoreThanOneMonthRent(theOliveGarden)\nTEXT: The security deposit at the Olive Garden is either $2000 or more.\nFOL: (EqualsOneMonthRent(theOliveGarden) | MoreThanOneMonthRent(theOliveGarden))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 87,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 88,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(max, x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(max, x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimal(max, x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteOfMax(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteOfMax(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteOfMax(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka. \nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 89,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy. \nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Quokka(koala) -> (LoveToSleep(koala) | VeryFluffy(koala)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFluffy(x)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 90,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Man(x) -> (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Man(x) -> (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Man(x) -> (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) & -Evil(man)) | (-Kind(man) & Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Man(x) -> (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Person(x) & -Kind(x) | -Person(x) & Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) & -Evil(man)) | (-Kind(man) & Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Man(x) -> (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 91,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: kind(man) | evil(man)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: kind(man) | evil(man)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: kind(man) | evil(man)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 92,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: -Ugly(x) -> -Handsome(x)\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) & -Evil(man)) | (-Kind(man) & Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: -Ugly(person) -> -Handsome(person)\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: -Ugly(person) -> -Handsome(person)\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: -Ugly(x) -> -Handsome(x)\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: -Ugly(x) -> -Handsome(x)\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: (Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: -Ugly(x) -> -Handsome(x)\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: -Ugly(person) -> -Handsome(person)\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: Kind(x) | Evil(x)\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 93,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOut(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOut(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & DevelopStrongBonds(luke)) | (-TwinOrTriplet(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOut(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | (-TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((Twins(luke) & StrongBondsWithFamily(luke)) | (-Twins(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOut(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOut(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOut(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & DevelopStrongBonds(luke)) | (-TwinOrTriplet(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & DevelopStrongBonds(luke)) | (-TwinOrTriplet(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeHangingOut(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOut(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | (-TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOut(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeHangingOut(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOut(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeHangingOut(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & DevelopStrongBonds(luke)) | (-TwinOrTriplet(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinOrTriplet(luke) & StrongBonds(luke)) | (-TwinOrTriplet(luke) & -StrongBonds(luke))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinOrTriplet(luke) & StrongBonds(luke)) | (-TwinOrTriplet(luke) & -StrongBonds(luke))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((Twins(luke) & StrongBondsWithFamily(luke)) | (-Twins(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((Twins(luke) & StrongBondsWithFamily(luke)) | (-Twins(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((Twins(luke) & StrongBondsWithFamily(luke)) | (-Twins(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke spends a lot of time hanging out and playing with his siblings.\nFOL: SpendTimeWithSiblings(luke)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 94,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutAnnoyingSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutAnnoyingSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutAnnoyingSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> NotDevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | (-TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> NotStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBonds(luke)) | (-TwinsOrTriplets(luke) & -StrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBonds(luke)) | (-TwinsOrTriplets(luke) & -StrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((Twins(luke) & StrongBonds(luke)) | (-Twins(luke) & -StrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutAnnoyingSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBonds(luke)) | (-TwinsOrTriplets(luke) & -StrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | (-TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke complains often about annoying siblings.\nFOL: ComplainAboutSiblings(luke)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 95,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBonds(luke)) | (-TwinsOrTriplets(luke) & -StrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBonds(luke)) | (-TwinsOrTriplets(luke) & -StrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | (-TwinOrTriplet(luke) & -StrongBondsWithFamily(luke))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBonds(luke)) | (-TwinsOrTriplets(luke) & -StrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeHangingOutWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((Twins(luke) & DevelopStrongBonds(luke)) | (-Twins(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -Twins(luke) & -Triplets(luke) & -ComplainAboutAnnoyingSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | (-TwinOrTriplet(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBonds(luke)) | (-TwinsOrTriplets(luke) & -StrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & DevelopStrongBonds(luke)) | (-TwinOrTriplet(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainAboutAnnoyingSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & StrongBonds(luke)) | (-TwinOrTriplet(luke) & -StrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutAnnoyingSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -Triplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinOrTriplet(luke) & DevelopStrongBonds(luke)) | (-TwinOrTriplet(luke) & -DevelopStrongBonds(luke))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & DevelopStrongBonds(luke)) | (-TwinOrTriplet(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinOrTriplet(luke) & DevelopStrongBonds(luke)) | (-TwinOrTriplet(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & StrongBondsWithFamily(luke)) | (-TwinsOrTriplets(luke) & -StrongBondsWithFamily(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinOrTriplet(luke) & StrongBondsWithFamily(luke)) | (-TwinOrTriplet(luke) & -StrongBondsWithFamily(luke))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinOrTriplet(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: ((TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke)))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nFOL: (TwinsOrTriplets(luke) & DevelopStrongBonds(luke)) | (-TwinsOrTriplets(luke) & -DevelopStrongBonds(luke))\nTEXT: Luke is neither a twin nor triplet nor complains often about annoying siblings.\nFOL: -TwinsOrTriplets(luke) & -ComplainAboutSiblings(luke)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 96,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 97,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTX(x) & HasMine(x) & Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(MountainRangeInNMorTX(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> -Donated(Mine(x), x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) | MountainRangeInTexas(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(PicurisMountains) | MountainRangeInTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: VisitedBy(Onate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasMine(x) & Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & VisitedBy(Onate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(PicurisMountains) | MountainRangeInTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: VisitedOnate(JuanDeOnate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> all y. (-Mine(y) | -Donated(y)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & VisitedOnate(JuanDeOnate, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) | MountainRangeInTexas(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(SomeMine(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMorTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTX(x) & HasDonatedMine(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) | MountainRangeInTexas(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNewMexicoOrTexas(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(NMXTexas)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: VisitedOnate(PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasMine(x) & Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & VisitedOnate(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMorTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMorTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (-MountainRangeInTX(x) | -Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(PicurisMountains) | MountainRangeInTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(PicurisMountains, JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(MineIn(x), x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(x, JuanDeOnate))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(MountainsInNewMexico(MountainsInNewMexico | MountainsInTexas))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainsInTexas(x) -> exists y. (y & -Donated(y, x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainsInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) | MountainRangeInTexas(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: VisitedOnate(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & VisitedOnate(juanDeOnate, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(picurisMountains, juanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTX(x) & Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(x, juanDeOnate))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(NM) | PicurisMountains(TX)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(JuanDeOnate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(JuanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(PicurisMountains) | MountainRangeInTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(JuanDeOnate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(JuanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountainsInNMorTX\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(JuanDeOnate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(JuanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(InNewMexico(PicurisMountains) | InTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(JuanDeOnate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasMine(x) & Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(JuanDeOnate, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(PicurisMountains) | MountainRangeInTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(JuanDeOnate, PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(Mine(x), x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(JuanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMorTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTX(x) & HasDonatedMine(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(PicurisMountains) | MountainRangeInTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(PicurisMountains, JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (-MountainRangeInTexas(x) | -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(x, JuanDeOnate))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMorTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(picurisMountains, juanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTX(x) & Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(x, juanDeOnate))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) | MountainRangeInTexas(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasMine(x) & Donated(mine))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 98,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z, michael) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Shorter(peter, y) & Class(y, michael)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all z. (Man(z) & Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists z. (Man(z) & Taller(z, peter))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & InClass(z, michael) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists z. (Man(z) & InClass(z, michael) & Shorter(z, peter))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & InClass(x, michael) & Taller(x, peter))\n</EVALUATE>\n\nHowever, the FOL translation of the conclusion is incorrect because it says that there exists a man in Michael's class who is taller than Peter. The correct translation should be that Peter is shorter than a man in Michael's class, which is equivalent to saying that there exists a man in Michael's class who is taller than Peter.\n\nTo correctly translate the conclusion, we need to use the negation of the Taller predicate. The correct FOL translation of the conclusion is:\n\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & InClass(x, michael) & -Taller(peter, x))",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) -> Man(x)\nFOL: all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Taller(x, peter) -> Man(x)\nFOL: exists x. (Man(x) & Class(x, michael) & Taller(x, peter))\nFOL: all x. (Man(x) & Class(x, michael) -> Taller(michael, x))\nFOL: Taller(michael, x) & Taller(x, peter) -> Taller(michael, peter)\nFOL: -Taller(michael, peter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & Class(x, michael) & Taller(x, peter))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) -> Man(x)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: -Taller(peter, y) & Man(y) & Class(y, michael)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: -Taller(peter, z) & Man(z) & Class(z)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & Taller(x, michael) & Shorter(peter, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all z. (Man(z) & Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists z. (Man(z) & Taller(z, peter))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Taller(z, peter) & Class(z) & Man(z)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & InClass(x, michael) & Shorter(peter, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & InSameClass(x, michael) & Shorter(peter, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, y) for all y in his class\nFOL: all y. (Man(y) & InClass(y, michael) -> Taller(michael, y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: -Taller(peter, y) for some y in his class\nFOL: exists y. (Man(y) & InClass(y, michael) & -Taller(peter, y))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: -Taller(peter, y) & Man(y) & Class(y)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> -Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: -Taller(peter, y) & Man(y) & Class(y)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Class(michael_class) & Man(michael_class) & Shorter(peter, michael_class)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & InSameClass(z, michael) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists z. (Man(z) & InSameClass(z, michael) & Shorter(peter, z))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (BlockShooting(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & InClass(x, michael) & Shorter(peter, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x)  # Note: We assume x represents everyone else in Michael's class\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: -Taller(peter, x)  # Note: We assume x represents a man in Michael's class\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & Taller(x, michael) & Shorter(peter, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) & Class(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: Shorter(peter, x) & Class(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(x, c) & forall z. (Man(z) & Class(z) -> Taller(x, z)))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: exists x. (Man(x) & Class(x) & Taller(x, peter))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & InClass(z, michael) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: -Taller(peter, y) | -InClass(y, michael) \n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> Block(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) for all x in Michael's class\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> Block(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Peter is shorter than a man in Michael's class.\nFOL: -Taller(peter, y) for some y in Michael's class\n</EVALUATE>\n\nNote: The translation of the sentence \"Michael is a man who is taller than everyone else in his class\" is not a single FOL expression, but rather a set of FOL expressions, one for each person in Michael's class. This is because the sentence is a universal statement that applies to every person in Michael's class. \n\nHowever, in the FOL format used in the NLTK package, we need to write a single FOL expression. We can do this by using the exists quantifier and writing the FOL expression as:\n\nFOL: exists y. (Man(y) & Taller(michael, y))\n\nThis FOL expression says that there exists a person y in Michael's class such that Michael is taller than y."
   ]
  ]
 },
 {
  "index": 99,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) for all x\nFOL: all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: JumpWhenShooting(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) -> Man(x)) & forall y. Taller(michael, y)\nFOL: Man(michael) & forall y. (Taller(michael, y) -> (Man(y) & forall z. Taller(michael, z)))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: Jump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) for all x in his class\nFOL: Note: This statement is hard to translate into FOL as it contains \"everyone else in his class\". However, we can assume that the class is a set of men, and the statement is equivalent to: all x. (Man(x) & x!= michael -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a shooter who can jump when shooting.\nFOL: Shooter(windy) & JumpWhenShooting(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>\n\nNote: The first premise is a universal statement, but the second premise is a statement about a specific class, which is hard to translate into FOL. The translation provided is an assumption based on the given statement.",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> Block(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (-Jump(x) -> Block(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) -> -Taller(y, x)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJumpWhenShooting(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) -> Man(x)) -> all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a shooter who can jump when shooting.\nFOL: Shooter(windy) & JumpWhenShooting(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> -Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) & Class(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: JumpWhenShooting(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all y. (Man(y) & ClassMember(y, michael) -> Taller(michael, y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: JumpWhenShooting(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, y) | y = michael for all y\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJumpWhenShooting(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (BlockShooting(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> Block(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Shooter(x) & -JumpWhenShooting(x) -> Block(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all y. (Man(y) -> -Taller(y, michael))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Man(x) & Man(y) & Taller(x, y)) & (Man(y) & Man(z) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, y) for all y\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJump(x) & CanShoot(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: CanShoot(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all y. (Man(y) -> Taller(michael, y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: JumpWhenShooting(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> -Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: Jump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -Jump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: Jump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, y) for all y in his class\nHowever, in FOL, we cannot express \"everyone else in his class\" directly. We can express it as \"for all y in his class, y is not equal to Michael\". Therefore, the FOL translation is:\nFOL: Man(michael) & for all y in his class, (Man(y) & y!= michael) -> Taller(michael, y)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Windy is a shooter.\nFOL: Shooter(windy)\nTEXT: Windy can jump when shooting.\nFOL: CanJump(windy)\nTEXT: Windy is a great shooter.\nFOL: GreatShooter(windy)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 100,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> -Taller(z, michael))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlockShooting(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) & Man(x) & Man(y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x)  # Note: 'x' is a variable representing everyone else in his class, but in FOL, we cannot specify a variable that is a list or a set. Therefore, we use 'x' as a variable and assume that the FOL expression will be evaluated with the correct values for 'x'.\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>\n\nTo evaluate the conclusion, we need to use a theorem solver to check if the FOL expression for the conclusion follows from the FOL expressions for the premises. \n\nHowever, since we cannot directly use a theorem solver here, let's try to deduce the conclusion using logical reasoning.\n\nFrom the premises, we know that Michael is taller than everyone else in his class, and Peter is taller than Michael. By transitivity, we can conclude that Peter is taller than everyone else in his class, including Michael.\n\nWe also know that Michael can block any shooting from a person as long as the person does not jump when shooting. However, we also know that Michael cannot block Windy's shooting. This implies that Windy must be a shooter who can jump when shooting.\n\nSince Peter is taller than Michael, and Michael can block any shooting from a person as long as the person does not jump when shooting, we can conclude that Peter can block any shooting from a person as long as the person does not jump when shooting. Therefore, Peter can block Windy's shooting, as Windy is a shooter who can jump when shooting.\n\nTherefore, the conclusion \"Peter can block Windy's shooting\" follows from the premises.",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (BlockShooting(michael, x) & -JumpShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: BlockShooting(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x)  # x is a variable representing everyone else in his class\nFOL: all x. (Man(x) & Classmate(x, michael) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: BlockShooting(peter, windy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> Block(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> Block(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: Block(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> -Taller(z, michael))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlockShooting(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlockShooting(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -Jump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, x) for all x\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> -Taller(x, michael))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) for all x in Class\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, y) for all y in his class\nFOL: for all y in his class, Man(y) & Taller(michael, y)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlockShooting(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x)  # x represents everyone else in his class\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlockShooting(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> Block(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> -Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> Block(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: Block(peter, windy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, y) for all y\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlock(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJumpShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlockShooting(peter, windy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) -> -Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's shooting.\nFOL: CanBlockShooting(peter, windy)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 101,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfter(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: NamedAfter(Barutin, all x. (Island(x) & PartOfAntarctica(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOfSnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIslands(x) -> Antarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Antarctica(x) -> Barutin(x))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Antarctica(x) -> Barutin(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) -> NamedAfter(barutin, barutinCove)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(barutinCove) & OnCoast(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(southShetlandIslands) & MemberOf(snowIsland, southShetlandIslands) & MemberOf(greenwichIsland, southShetlandIslands) & MemberOf(deceptionIsland, southShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(southShetlandIslands) & PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(A, B) & LocatedIn(B, C)) -> LocatedIn(A, C)\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(barutin, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoastOf(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Include(southShetlandIslands, snowIsland) & Include(southShetlandIslands, greenwichIsland) & Include(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: NamedAfter(barutin, all x. (Island(x) & PartOf(x, antarctica)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin) & NamedAfter(Barutin, BarutinCove)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoastOf(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandIn(x, Antarctica) -> NamedAfter(x, Barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIslands(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: NamedAfter(barutin, all x. (Island(x) & PartOfAntarctica(x)))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: NamedAfter(barutin, all x. (Island(x) & PartOfAntarctica(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(SnowIsland, x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(Antarctica, SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandIn(Antarctica, x) -> Barutin(x))\n</EVALUATE>\n\nNote: In the FOL translation of the sentence \"Barutin is named after all islands in Antarctica\", the variable \"x\" represents the islands in Antarctica. This is a correct translation, but it's worth noting that the original sentence is somewhat ambiguous and could be interpreted in different ways.",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(y) & NamedAfter(y, x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) & MemberOf(x, SnowIsland) | MemberOf(x, GreenwichIsland) | MemberOf(x, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> PartOf(x, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z)\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) & -SnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> Antarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & Antarctica(x) -> Barutin(x))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & Antarctica(x) -> Barutin(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfter(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> PartOf(x, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: LocatedIn(A, B) & LocatedIn(B, C) -> LocatedIn(A, C)\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: NamedAfter(x, Barutin) & PartOf(x, Antarctica) -> all y. (Island(y) & PartOf(y, Antarctica) -> NamedAfter(y, Barutin))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all y. (Island(y) & PartOf(y, Antarctica) -> NamedAfter(y, Barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) & -x = SnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> Antarctica(x)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(A, B) & LocatedIn(B, C)) -> LocatedIn(A, C)\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: Barutin(x) -> all y. (Island(y) & Antarctica(y) -> Barutin(y))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all y. (Island(y) & Antarctica(y) -> Barutin(y))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin) & NamedAfter(BarutinCove, Barutin)\nFOL: NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(Barutin) & On(SnowIsland, BarutinCove)\nFOL: On(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Include(SouthShetlandIslands, SnowIsland) & Include(SouthShetlandIslands, GreenwichIsland) & Include(SouthShetlandIslands, DeceptionIsland)\nFOL: all x. (Include(SouthShetlandIslands, x) -> Member(x, SouthShetlandIslands))\nFOL: Member(SnowIsland, SouthShetlandIslands) & Member(GreenwichIsland, SouthShetlandIslands) & Member(DeceptionIsland, SouthShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: ConsideredPartOf(DeceptionIsland, Antarctica)\nFOL: all x. (ConsideredPartOf(x, Antarctica) -> PartOf(x, Antarctica))\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: LocatedIn(A, B) & LocatedIn(B, C) -> LocatedIn(A, C)\nFOL: LocatedIn(BarutinCove, SnowIsland) & LocatedIn(SnowIsland, SouthShetlandIslands) -> LocatedIn(BarutinCove, SouthShetlandIslands)\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\nFOL: all x. (Island(x) & PartOf(x, Antarctica) -> NamedAfter(Barutin, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin) & Barutin(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BaruinCove(x) -> SnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> Antarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Antarctica(x) -> Barutin(x))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Antarctica(x) -> Barutin(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(namedAfter(barutin))\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(on(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(include(snowIsland) & include(greenwichIsland) & include(deceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(partOf(antarctica))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (locatedIn(a, b) & locatedIn(b, c)) -> locatedIn(a, c)\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (island(x) & partOf(antarctica) -> namedAfter(barutin, x))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (island(x) & partOf(antarctica) -> namedAfter(barutin, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCoveNamedAfter(barutin) & BarutinCoveNamedAfter(barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCoveOnSnowIsland(barutinCove) & SouthwestCoastOfSnowIsland(snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(southShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandInAntarctica(x) -> BarutinNamedAfter(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) & -x = SnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> Antarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Antarctica(x) -> Barutin(x))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Antarctica(x) -> Barutin(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin) & NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(Barutin) & LocatedOn(BarutinCove, SnowIsland) & LocatedOn(SnowIsland, SouthwestCoast)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOfAntarctica(x) -> NamedAfter(Barutin, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(b) -> NamedAfterBarutin(b)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(b) & SouthwestCoastOf(s) & Island(s) & SameLocation(b, s)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (Island(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x))))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOfAntarctica(x) -> NamedAfterBarutin(x))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOfAntarctica(x) -> NamedAfterBarutin(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(barutin, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfterBarutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) & -LocatedIn(y, x) | LocatedIn(SnowIsland, x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> LocatedIn(Antarctica, x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (LocatedIn(Antarctica, x) -> NamedAfterBarutin(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCoveNamedAfter(barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCoveOnSnowIsland(barutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> Antarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Antarctica(x) -> BarutinNamedAfter(x))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Antarctica(x) -> BarutinNamedAfter(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: NamedAfter(barutin, allIslandsIn(antarctica))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfterBarutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(SnowIsland, x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOfAntarctica(x) -> NamedAfterBarutin(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) -> NamedAfter(barutin, barutinCove)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(barutinCove) & CoastOf(snowIsland, southwest)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(antarctica, southShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(antarctica, x) -> NamedAfter(barutin, x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 102,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(a, b) & LocatedIn(b, c)) -> LocatedIn(a, c)\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y, bulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedInBarutinCove(barutinCove) & LocatedInBulgaria(barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedInBarutinCove(barutinCove) & LocatedOnCoastOfSnowIsland(barutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> LocatedInAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedInAntarctica(x) & LocatedInBulgaria(x) & LocatedInBulgariaPlace(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIslands(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Cove(x) & LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfterBulgarianSettlement(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(SnowIsland, x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> PartOfAntarctica(x)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(B, A) & LocatedIn(B, C)) -> LocatedIn(C, A)\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (PartOfAntarctica(x) & NamedAfterBulgarianSettlement(x, y))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y, bulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedIn(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & LocatedIn(x, PlaceInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (snowIsland(x) | greenwichIsland(x) | deceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, PlaceInBulgaria()))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & NamedAfter(x, PlaceInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (NamedAfter(x, placeInBulgaria) & LocatedIn(x, antarctica))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedIn(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> LocatedIn(x, Antarctica))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & LocatedIn(x, PlaceInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & NamedAfter(x, PlaceInBulgaria))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfterBulgarianSettlement(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIslands(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (PartOfAntarctica(x) & Cove(x) & NamedAfterBulgarianSettlement(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfterBulgarianSettlement(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIslands(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (PartOfAntarctica(x) & Cove(x) & NamedAfterBulgarianSettlement(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, PlaceInBulgaria))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & NamedAfter(x,?y) & LocatedIn(?y, Bulgaria))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedInBarutinCove(barutinCove)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedInSnowIsland(barutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (PartOfAntarctica(x) & LocatedInBarutinCove(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfter(x, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnCoast(x, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOf(x, antarctica))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfterBulgarianSettlement(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(SnowIsland, x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) & MemberOf(SnowIsland, x) & MemberOf(GreenwichIsland, x) & MemberOf(DeceptionIsland, x)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> PartOfAntarctica(x)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(B, A) & LocatedIn(B, C)) -> LocatedIn(C, A)\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(Antarctica, x) & NamedAfterBulgarianSettlement(x, y))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedIn(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> Antarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & LocatedIn(x, PlaceInBulgaria))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 103,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(name) & NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(BarutinCove) & OnCoastOf(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(SouthShetlandIslands) & Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(SouthShetlandIslands) & PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin) & NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(SnowIsland) & OnCoast(SnowIsland, southwest)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIslands(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOfSnowIsland(BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: IncludesSnowIsland(SouthShetlandIslands) & IncludesGreenwichIsland(SouthShetlandIslands) & IncludesDeceptionIsland(SouthShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOf(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(y) & NamedAfter(y, x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> CoastOf(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOf(x, Antarctica))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, snowIsland) & Coast(southwest, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Include(southShetlandIslands, snowIsland) & Include(southShetlandIslands, greenwichIsland) & Include(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin) & NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(Barutin) & LocatedOn(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(SnowIsland) & SouthShetlandIslands(GreenwichIsland) & SouthShetlandIslands(DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(SnowIsland) & PartOf(DeceptionIsland, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOfSnowIsland(BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf( SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) & -SnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> Antarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is located in Barutin Cove.\nFOL: LocatedIn(barutin, barutinCove)\nTEXT: Barutin Cove is located in Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfterBarutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOfSnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: IncludesSnowIsland(southShetlandIslands) & IncludesGreenwichIsland(southShetlandIslands) & IncludesDeceptionIsland(southShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(southShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Include(southShetlandIslands, snowIsland) & Include(southShetlandIslands, greenwichIsland) & Include(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: ConsideredPartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOfSnowIsland(BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (Include(SnowIsland, SouthShetlandIslands) & Include(GreenwichIsland, SouthShetlandIslands) & Include(DeceptionIsland, SouthShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOfSnowIsland(BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (SouthShetlandIslands(SnowIsland) & SouthShetlandIslands(GreenwichIsland) & SouthShetlandIslands(DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(bulgarSettlement) & bulgarSettlement(barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(snowIsland) & SouthShetlandIslands(greenwichIsland) & SouthShetlandIslands(deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(b) -> NamedAfter(b, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(b) & SouthwestCoast(b) & SnowIsland(s) -> LocatedOn(b, s)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(s) & SnowIsland(s) & GreenwichIsland(g) & DeceptionIsland(d) -> Include(s, s, g, d)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(s) -> PartOf(s, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: LocatedIn(a, b) & LocatedIn(b, c) -> LocatedIn(a, c)\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & Barutin(barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOfSnowIsland(barutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\nTEXT: Barutin Cove is located in Barutin.\nFOL: LocatedIn(barutinCove, barutin)\nTEXT: Barutin is located in Snow Island.\nFOL: LocatedIn(barutin, snowIsland)\nTEXT: Snow Island is located in the South Shetland Islands.\nFOL: LocatedIn(snowIsland, southShetlandIslands)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoastOf(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOf(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(Antarctica, SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOf(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnTheCoastOf(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(b) -> Barutin(b)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(b) & SouthwestCoast(b, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> Antarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(y) & NamedAfter(y, x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoast(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\nTEXT: Barutin is located in Barutin Cove.\nFOL: LocatedIn(Barutin, BarutinCove)\nTEXT: Barutin Cove is located in Snow Island.\nFOL: LocatedIn(BaruinCove, SnowIsland)\nTEXT: Snow Island is located in South Shetland Islands.\nFOL: LocatedIn(SnowIsland, SouthShetlandIslands)\nTEXT: South Shetland Islands are located in Antarctica.\nFOL: LocatedIn(SouthShetlandIslands, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(barutinCove) & OnCoastOf(barutinCove, snowIsland) & SouthwestCoast(snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOfSnowIsland(BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: IncludesSnowIslandAndGreenwichAndDeception(SouthShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 104,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 105,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 106,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 107,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: (Not Airline(Greyhound)) -> Not Plane(Greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 108,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(x) & -Monkey(x) & -Bird(x)) | (Animal(x) & Monkey(x)) | (Animal(x) & Bird(x))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (Bird(x) & -Monkey(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-(Fly(rock) | Bird(rock)) -> (-Fly(rock) & -Breathe(rock)))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(x) & -Monkey(x)) | (Animal(x) & Bird(x))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Breathe(Rock)\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) | Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (Bird(x) & -Monkey(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (-Animal(monkey) & Bird(monkey))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(rock) & -Monkey(rock) & -Bird(rock)) | (Animal(rock) & Monkey(rock)) | (Animal(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (-Animal(monkey) & Bird(monkey))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (Bird(x) & -Monkey(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 109,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-(Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock)))\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (-Animal(monkey) & Bird(monkey))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Breathe(rock)\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(animal) | Bird(animal))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: Wings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(rock) & -Bird(rock)) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) | Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (Bird(x) & -Monkey(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(rock) & -Bird(rock)) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\nTEXT: Rock has wings.\nFOL: Wings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -(Fly(rock) | Bird(rock)) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (Bird(x) & -Monkey(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (Bird(x) & -Monkey(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-(Fly(rock) & -Bird(rock)) -> (-Fly(rock) & -Breathe(rock)))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Breathe(rock)\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-(Fly(rock) & -Bird(rock)) -> (-Fly(rock) & -Breathe(rock)))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 110,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-(Fly(rock) & -Bird(rock)) -> (-Fly(rock) & -Breathe(rock)))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (-Animal(monkey) & Bird(monkey))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (-Animal(monkey) & Bird(monkey))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(Rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(x) & -Monkey(x) & -Bird(x)) | (Animal(x) & Monkey(x) | Animal(x) & Bird(x))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(x) & -Monkey(x)) | (Animal(x) & Bird(x))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(x) & -Monkey(x) & -Bird(x)) | (Animal(x) & Monkey(x)) | (Animal(x) & Bird(x))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(Rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-(Fly(Rock) | Bird(Rock)) -> -(Fly(Rock) | Breathe(Rock)))\nTEXT: Rock does not have wings.\nFOL: -Wings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-(Fly(Rock) | Bird(Rock)) -> -(Fly(Rock) | Breathe(Rock)))\nTEXT: Rock does not have wings.\nFOL: -HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(Rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(Rock) & -Bird(Rock)) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (-Animal(monkey) & Bird(monkey))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(x) & -Monkey(x)) | (Animal(x) & Bird(x))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (Animal(bird) & -Monkey(bird))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 111,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) & -TravelToParisForHoneymoon(john)) | (-JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) & -JulyWedding(john)) -> TravelToParisForHoneymoon(john)\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john) & Wedding(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john)) | (-JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HasWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: HasWedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: WellAttended(john) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) & -TravelToParisForHoneymoon(john)) | (-JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> (JulyWedding(john) | TravelToParisForHoneymoon(john))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -WellAttended(john)) & TravelToParisForHoneymoon(john))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) -> (JulyWedding(john) | -TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: WellAttended(john) & Wedding(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: WellAttended(john) -> (JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -WellAttended(john)) & -TravelToParisForHoneymoon(john))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -TravelToParisForHoneymoon(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) & -JulyWedding(john)) -> TravelToParisForHoneymoon(john)\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: Wedding(john) & WellAttended(john) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: WellAttended(john) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has a wedding that is well-attended.\nFOL: Wedding(john) & WellAttended(john)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 112,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john) & Wedding(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -TravelToParisForHoneymoon(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john) & Wedding(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -WellAttended(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john) & Wedding(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: Wedding(john) & WellAttended(john) -> ((JulyWedding(john) & -TravelToParisForHoneymoon(john)) | (-JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john) & Wedding(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: Wedding(john) & WellAttended(john) -> (WeddingInJuly(john) | (-(WeddingInJuly(john)) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john)) | (TravelToParisForHoneymoon(john) & -JulyWedding(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: - (Wedding(john) & WellAttended(john))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) -> (JulyWedding(john) | TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -HaveWedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -TravelToParisForHoneymoon(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((July(john) | -WellAttended(john)) & TravelToParisForHoneymoon(john))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -TravelToParisForHoneymoon(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john) & Wedding(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -TravelToParisForHoneymoon(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: WellAttended(john) -> (JulyWedding(john) | (-JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john)) | (-JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -Wedding(john) | -WellAttended(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john) & WellAttended(john) -> (WeddingInJuly(john) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John does not have a wedding that is well-attended.\nFOL: -WellAttended(john) & HaveWedding(john)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 113,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -TravelToParisForHoneymoon(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HaveAtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john))\nTEXT: John has at least one child.\nFOL: AtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> (WeddingInJuly(john) | (Wedding(john) & -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john) & WellAttended(john) -> (WeddingInJuly(john) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john))\nTEXT: John has at least one child.\nFOL: AtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -WellAttended(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HasWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HasWedding(john) & WellAttended(john) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john))\nTEXT: John has at least one child.\nFOL: AtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HaveAtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HasWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john) & WellAttended(john) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -WellAttended(john)) & TravelToParisForHoneymoon(john))\nTEXT: John has at least one child.\nFOL: AtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HasWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: HasAtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: AtLeastOneChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((July(john) | -WellAttended(john)) & TravelToParisForHoneymoon(john))\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john))\nTEXT: John has at least one child.\nFOL: HasChild(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has at least one child.\nFOL: AtLeastOneChild(john)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 114,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: Wedding(john) & WellAttended(john) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -WellAttended(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -WellAttended(john)) | (TravelToParisForHoneymoon(john) & -WeddingInJuly(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -((Wedding(john) & WellAttended(john)) | (TravelToParisForHoneymoon(john) & -WellAttended(john)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: Wedding(john) & WellAttended(john) -> (JulyWedding(john) | -JulyWedding(john) & TravelToParisForHoneymoon(john))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((July(john) & -TravelToParisForHoneymoon(john)) | (-July(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -WellAttended(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: -HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: Wedding(john) & WellAttended(john) -> (July(john) | (-(July(john)) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) & -WellAttended(john)) | (TravelToParisForHoneymoon(john) & -WeddingInJuly(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((July(john) & -TravelToParisForHoneymoon(john)) | (-July(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -((Wedding(john) & WellAttended(john)) | (TravelToParisForHoneymoon(john)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) & -TravelToParisForHoneymoon(john)) | (-JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: WellAttended(john) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HasWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HasWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john)) | (-JulyWedding(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: Wedding(john) & WellAttended(john) -> ((July(john) & -TravelToParisForHoneymoon(john)) | (-July(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)) | (-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\nTEXT: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\nFOL: -WellAttended(john) & -TravelToParisForHoneymoon(john)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 115,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & Teeth(platypus))\n</EVALUATE>\n\nThe FOL translation of the conclusion \"Platypus are mammals with no teeth.\" is incorrect. It should be \"Mammal(platypus) & -Teeth(platypus)\".\n\nThe correct translation should be:\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -Teeth(platypus)\n</EVALUATE>\n\nThe conclusion does not logically follow from the premises. The premises state that some mammals have teeth, but platypus have no teeth. Therefore, it is not possible for platypus to be a mammal with teeth.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & -Teeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & Teeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HasTeeth(platypus))\n</EVALUATE>\n\nHowever, the FOL translation of \"Platypus are mammals with no teeth\" should be corrected to:\nFOL: (Mammal(platypus) & -HasTeeth(platypus))",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & Teeth(platypus))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & Teeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & Teeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HasTeeth(platypus)) | (Mammal(platypus) & -HasTeeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & Teeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus)) | (Mammal(platypus) & -HaveTeeth(platypus))\n</EVALUATE>\n\nHowever, in the conclusion, it is written that platypus are mammals with no teeth. This implies that platypus have no teeth, which contradicts the first premise which states that some mammals have teeth. This is a classic example of a fallacy of affirming the consequent. The conclusion does not necessarily follow from the premises."
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HasTeeth(platypus))\n</EVALUATE>\n\nNote: The FOL translation of the conclusion \"Platypus are mammals with no teeth\" is not correct because it should be \"Mammal(platypus) & -HasTeeth(platypus)\" to accurately represent the sentence.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & Teeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HasTeeth(platypus)\n</EVALUATE>\n\nNote that the FOL translation of the conclusion is incorrect. The correct translation is Mammal(platypus) & -HasTeeth(platypus), not Mammal(platypus) & HasTeeth(platypus). \n\nThe conclusion \"Platypus are mammals with no teeth\" can be derived from the premises, but the FOL translation of the conclusion is incorrect. The correct conclusion in FOL would be Mammal(platypus) & -HasTeeth(platypus).",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HasTeeth(platypus)\n</EVALUATE>\n\nNote: The translation of the conclusion \"Platypus are mammals with no teeth\" to FOL is incorrect as it is a conjunction of two predicates. The correct translation should be a conjunction of a predicate and its negation, i.e., Mammal(platypus) & -HasTeeth(platypus).",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HasTeeth(platypus)) | (Mammal(platypus) & -HasTeeth(platypus))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & Teeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HasTeeth(platypus)\n</EVALUATE>\n\nHowever, there seems to be a problem with the translation of the conclusion. The conclusion is \"Platypus are mammals with no teeth.\" but the FOL translation is \"Mammal(platypus) & HasTeeth(platypus)\". This is incorrect because it says platypus have teeth, but the premise says platypus have no teeth.\n\nThe correct FOL translation for the conclusion should be \"Mammal(platypus) & -HasTeeth(platypus)\".\n\nHere is the corrected EVALUATE tag:\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HasTeeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HasTeeth(platypus)) | (Mammal(platypus) & -HasTeeth(platypus))\n</EVALUATE>\n\nHowever, the FOL translation of the conclusion should be a direct translation, not an OR statement. The correct translation is:\n\n TEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HasTeeth(platypus)\n\nThis is because the conclusion states that platypus are mammals with no teeth, which means that the two properties are both true of platypus.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & Teeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & Teeth(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>\n\nHowever, the FOL translation of the conclusion \"Platypus are mammals with no teeth\" is incorrect because it implies that platypus have teeth, which contradicts the premise that platypus have no teeth. The correct FOL translation of the conclusion should be:\n\nFOL: Mammal(platypus) & -HaveTeeth(platypus)\n\nTherefore, the conclusion does not logically follow from the premises.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & Teeth(platypus)\n</EVALUATE>\n\nHowever, the FOL translation for \"Platypus are mammals with no teeth\" should be corrected to \"Mammal(platypus) & -Teeth(platypus)\".\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -Teeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HasTeeth(platypus)\n</EVALUATE>\n\nNote: The FOL translation of the conclusion is incorrect because it states that platypus have teeth, which contradicts the premise that platypus have no teeth. The correct translation should be Mammal(platypus) & -HasTeeth(platypus). \n\nThe correct <EVALUATE> block should be:\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HasTeeth(platypus)\n</EVALUATE>\n\nHowever, this still does not necessarily follow from the premises. The conclusion is a conjunction of two statements: that platypus are mammals, and that platypus have no teeth. However, from the premises, we only know that platypus are mammals, and that platypus have no teeth. We do not have any information about the relationship between the two properties. Therefore, we cannot conclude that platypus are mammals with no teeth.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & -Teeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus))\n</EVALUATE>\n\nHowever, it seems that the FOL translation for the conclusion should be (Mammal(platypus) & -HaveTeeth(platypus)).\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & -HaveTeeth(platypus))\n</EVALUATE>\n\nTo determine whether the conclusion follows from the premises, we need to check if the FOL translation of the conclusion is a logical consequence of the FOL translations of the premises.\n\nThe premises are:\n\n1. exists x. (Mammal(x) & HaveTeeth(x))\n2. -HaveTeeth(platypus)\n3. Mammal(platypus)\n4. HaveTeeth(humans)\n\nThe conclusion is:\n\n(Mammal(platypus) & -HaveTeeth(platypus))\n\nFrom premises 2 and 3, we can conclude that platypus is a mammal with no teeth."
   ]
  ]
 },
 {
  "index": 116,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 117,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Teeth(x))\nTEXT: Platypus have no teeth.\nFOL: -Teeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: Teeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 118,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: all x. (Space(x) -> Vacuum(x))\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: all x. (Space(x) -> Vacuum(x))\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 119,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) & HouseholdAppliance(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Space(Vacuum(space))\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Space(Vacuum(space))\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 120,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Sucks(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Sucks(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Sucks(x))\nTEXT: Space is a vacuum.\nFOL: all x. (Space(x) -> Vacuum(x))\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Sucks(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Sucks(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: ~Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Sucks(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Sucks(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Sucks(x))\nTEXT: Space is a vacuum.\nFOL: all x. (Space(x) -> Vacuum(x))\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (HouseholdAppliance(x) -> (Duster(x) & -Sucks(x)))\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Sucks(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Sucks(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Sucks(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Sucks(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Sucks(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Sucks(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: all x. (Space(x) -> Vacuum(x))\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) & HouseholdAppliance(x) -> -Suck(x))\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 121,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 122,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) & -Yellow(ben)) | (-Ugly(ben) & Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) & -Yellow(ben)) | (-Ugly(ben) & Yellow(ben))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 123,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 124,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(DomesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, Aurochs, 1920)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) -> Resemble(Extinct(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingDomesticAnimals\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _) & Extinct(_))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(ArtificialSelection)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(_))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(animalThatIsResembledBy(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(hekkCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(hekkCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y, z) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(domesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & -Alive(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s) & Resemble(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBackIn1920s(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(artificialSelection) & SelectiveBreeding(artificialSelection) & DomesticAnimal(artificialSelection)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle) & Resemble(heckCattle, aurochs) & Year(1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, Extinct))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(DomesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, Aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(HeckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(Aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(Extinct(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(Resemble(x, _)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(artificialSelection) & DeliberateSelectiveBreeding(artificialSelection) & DomesticAnimal(x) -> ArtificialSelectionBySelectiveBreeding(x)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s) & Resemble(aurochs, heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Extinct(z) & Resemble(z, x))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingDomesticAnimals\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s) & Resemble(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedingBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(animalThatIsResembling))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s) & Resemble(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _) & Resemble(x, ExtinctAnimal(_)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(ArtificialSelectionBySelectiveBreedingOfDomesticAnimals)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(_))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(ArtificialSelection)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(resemblanceOf(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(hekkCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(hekkCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(DomesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(hekkCattle, 1920, Aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(hekkCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, Extinct) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedingBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(ArtificialSelectionBySelectiveBreedingOfDomesticAnimals)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(Resemble(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 125,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DomesticAnimal(x) & DeliberateSelectiveBreeding(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Resemble(x, ExtinctAnimal(_)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Resemble(x, Extinct(_)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Animal(x) & -Animal(y) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingDomesticAnimals(ArtificialSelectionBySelectiveBreedingDomesticAnimals)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(isFormOf, artificialSelection)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(_))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Animal(y) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedingBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(DomesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, Aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(HeckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(Aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y, z) & Animal(y) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(Aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Animal(y) & -Extinct(y) & exists z. (BredBack(z, y) & Extinct(y)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Resemble(x, Extinct(_)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y, z) & Animal(x) & Animal(y) & Extinct(y) & Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Extinct(y) & Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(ArtificialSelection, DeliberateSelectiveBreeding)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Resemble(x, Extinct))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s) & Resemble(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, Extinct(x)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y, z) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Resemble(x, Extinct(_)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & InThe1920s(1920s) & Resemble(aurochs, heckCattle)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Animal(x) & -Extinct(x) & Resemble(x, y) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Resemble(x, Extinct(_)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 126,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studys(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studys(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studys(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 127,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studys(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studys(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(jerry) & -Teaches(jerry)) | (-Studies(jerry) & Teaches(jerry))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studies(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studys(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studys(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 128,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(x) | Teach(x)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teach(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (-Young(rose) & Student(rose))\nTEXT: Rose is a human or a manager.\nFOL: (Human(rose) & -Manager(rose)) | (-Human(rose) & Manager(rose))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(x) | Teaches(x)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 129,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(x) | Teach(x)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teach(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (-Young(rose) & Student(rose))\nTEXT: Rose is a human or Jerry is a manager.\nFOL: (Human(rose) & -Manager(jerry)) | (-Human(rose) & Manager(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (-Young(rose) & Student(rose))\nTEXT: Rose is a human or Jerry is a manager.\nFOL: (Human(rose) & -Manager(jerry)) | (-Human(rose) & Manager(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studying(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studying(x) | Teaching(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaching(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaching(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studying(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studying(x) | Teaching(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaching(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaching(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (-Young(rose) & Student(rose))\nTEXT: Rose is a human or Jerry is a manager.\nFOL: (Human(rose) & -Manager(jerry)) | (-Human(rose) & Manager(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 130,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(x) | Teaches(x)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studying(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studying(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(x) | Teaches(x)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 131,
  "responses": [
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & all x. (Book(x) & PublishedBy(newVesselPress, x) -> TranslatedFromEnglish(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) & PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & all x. (PublishedBy(newVesselPress, x) -> TranslatedFromEnglish(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & Specialize(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & all x. (PublishingHouse(x) & TranslatesForeignLiterature(x) -> TranslatesIntoEnglish(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishingHouse(NewVesselPress) & PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiterature(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & Specialize(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializesIn(NewVesselPress, ForeignLiteratureToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & specializes(NewVesselPress, ForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & all x. (PublishingHouse(x) & SpecializeInTranslation(x) -> SpecializeInEnglishTranslation(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & all x. (PublishedBy(newVesselPress, x) -> TranslatedFromEnglish(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & Specialize(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & all x. (PublishedBy(NewVesselPress, x) -> TranslatedFromForeignLanguage(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromForeignLanguage(NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & Specialize(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 132,
  "responses": [
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeInTranslation(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & all x. (PublishedBy(newVesselPress, x) -> TranslatedFromEnglish(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> TranslatedFromEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiteratureIntoEnglish(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & all x. (ForeignLiterature(x) & TranslatedIntoEnglish(x) -> Specializes(NewVesselPress, x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & all x. (Publishing(x, newVesselPress) -> ForeignLiterature(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (Publishing(x, newVesselPress) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: Publishing(neapolitanChronicles, newVesselPress)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: Publishing(palaceOfFlies, newVesselPress)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: Publishing(harryPotter, newVesselPress)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & all x. (ForeignLiterature(x) & TranslatedIntoEnglish(x) -> PublishingHouse(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeInTranslatingForeignLiterature(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & all x. (PublishingHouse(x) & TranslatesForeignLiterature(x) -> TranslatesIntoEnglish(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializesIn(NewVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiteratureIntoEnglish(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiteratureIntoEnglish(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 133,
  "responses": [
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, Italian)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, PalaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, PalaceOfFlies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesInTranslation(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiterature(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, Italian)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & Specialize(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiterature(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiteratureIntoEnglish(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, Italian)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, Italian)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & all x. (PublishingHouse(x) & TranslatesForeignLiterature(x) -> SpecializesInTranslatingForeignLiteratureIntoEnglish(x))\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & Specialize(newVesselPress, TranslatingForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, Italian)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 134,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> LargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> TidyAndOrganizeHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganizeHome(x) -> -GoToBedLate(x) & WakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpAfterNoon(remy) & TidyAndOrganizeHome(remy)) | (-GoToBedLate(remy) & -WakeUpAfterNoon(remy) & -TidyAndOrganizeHome(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStore(remy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate(x) & WakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStore(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganizeSpaces(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & TidyAndOrganizeSpaces(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -TidyAndOrganizeSpaces(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganizeSpaces(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & TidyAndOrganizeSpaces(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -TidyAndOrganizeSpaces(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStore(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy visits the office supply store regularly.\nFOL: VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 135,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: HaveFullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpacesInHome(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpacesInHome(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: HaveFullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -(GoToBedLate(x) & WakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpAfterNoon(remy) & SpendFreeTimeTidying(remy)) | (-GoToBedLate(remy) & -WakeUpAfterNoon(remy) & -SpendFreeTimeTidying(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStore(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> SpendFreeTimeTidyingOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingOrganizing(x) -> -GoToBedLateWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateWakeUpAfterNoon(remy) & SpendFreeTimeTidyingOrganizing(remy)) | (-GoToBedLateWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: HaveFullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: HaveFullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpacesInHome(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpacesInHome(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: HaveFullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpacesInHome(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpacesInHome(remy)))\nTEXT: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\nFOL: FullyStockedAndImpressiveHomeOffice(remy) & VisitOfficeSupplyStoreRegularly(remy)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 136,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -HaveFullyStockedAndImpressiveHomeOffice(remy)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | -(GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> -(SpendFreeTimeTidyingAndOrganizing(remy) | FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | -(GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> -(SpendFreeTimeTidyingAndOrganizing(remy) | FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (-(GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy)) | VisitOfficeSupplyStoreRegularly(remy)) -> -(SpendFreeTimeTidyingAndOrganizingSpaces(remy) | FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -HaveFullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizingSpaces(remy) & -HaveFullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | -(GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> -(SpendFreeTimeTidyingAndOrganizing(remy) & HaveFullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizingSpaces(remy) & -HaveFullyStockedAndImpressiveHomeOffice(remy)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (-(GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy)) | -VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLate(remy) & WakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLate(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStore(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizingSpaces(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizingSpaces(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizingSpaces(remy) & -FullyStockedAndImpressiveHomeOffice(remy)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -(GoToBedLate(x) & WakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpAfterNoon(remy) & SpendFreeTimeTidying(remy)) | (-GoToBedLate(remy) & -WakeUpAfterNoon(remy) & -SpendFreeTimeTidying(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLate(remy) & WakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> -(SpendFreeTimeTidying(remy) & FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLate(remy) & -WakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: ((GoToBedLate(remy) & WakeUpEveryDayAfterNoon(remy)) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpEveryDayAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpEveryDayAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpEveryDayAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAndWakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \nFOL: ((GoToBedLateAndWakeUpAfterNoon(remy) & SpendFreeTimeTidyingAndOrganizing(remy)) | (-GoToBedLateAndWakeUpAfterNoon(remy) & -SpendFreeTimeTidyingAndOrganizing(remy)))\nTEXT: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\nFOL: (GoToBedLateAndWakeUpAfterNoon(remy) | VisitOfficeSupplyStoreRegularly(remy)) -> (-SpendFreeTimeTidyingAndOrganizing(remy) & -FullyStockedAndImpressiveHomeOffice(remy))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 137,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 138,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkingInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobByUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobUniversity(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobByUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: PartTimeJobUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 139,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobUniversity(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobByUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (DavidInstructor(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> DavidInstructor(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobByUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkingInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkingInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkingInLab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobOfferedByUniversity(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 140,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (TakeDatabaseCourse(james) & -PartTimeJobOfferedByUniversity(james)) | (-TakeDatabaseCourse(james) & PartTimeJobOfferedByUniversity(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) | UniversityPartTimeJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityJob(james)) | (-DatabaseCourse(james) & UniversityJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityJob(james)) | (-Database(james) & UniversityJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) | UniversityJob(james))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityJob(james)) | (-DatabaseCourse(james) & UniversityJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (TakeDatabaseCourse(james) & -PartTimeJobUniversity(james)) | (-TakeDatabaseCourse(james) & PartTimeJobUniversity(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityPartTimeJob(james)) | (-DatabaseCourse(james) & UniversityPartTimeJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -PartTimeJobUniversity(james)) | (-DatabaseCourse(james) & PartTimeJobUniversity(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityJob(james)) | (-Database(james) & UniversityJob(james))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university. \nFOL: (DatabaseCourse(james) & -UniversityPartTimeJob(james)) | (-DatabaseCourse(james) & UniversityPartTimeJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (TakeDatabaseCourse(james) & -PartTimeJobByUniversity(james)) | (-TakeDatabaseCourse(james) & PartTimeJobByUniversity(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (TakeDatabaseCourse(james) | UniversityPartTimeJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityPartTimeJob(james)) | (-DatabaseCourse(james) & UniversityPartTimeJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityJob(james)) | (-DatabaseCourse(james) & UniversityJob(james))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityJob(james)) | (-Database(james) & UniversityJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) | UniversityJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -PartTimeJobUniversity(james)) | (-DatabaseCourse(james) & PartTimeJobUniversity(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityJob(james)) | (-DatabaseCourse(james) & UniversityJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityPartTimeJob(james)) | (-DatabaseCourse(james) & UniversityPartTimeJob(james))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) | UniversityJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -PartTimeJobUniversity(james)) | (-DatabaseCourse(james) & PartTimeJobUniversity(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityJob(james)) | (-Database(james) & UniversityJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. ((UniversityPartTimeJob(x) & -Library(x)) -> False)\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityPartTimeJob(james)) | (-Database(james) & UniversityPartTimeJob(james))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityPartTimeJob(james)) | (-DatabaseCourse(james) & UniversityPartTimeJob(james))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 141,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 142,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & AccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & AccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & AccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikeMusic(george) -> WantToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikeMusic(george) & AccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikeMusic(george) -> WantToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikeMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> GeorgeWantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram(george) -> GeorgeCanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose(george) & GeorgeWantsToCompose(george)) -> GeorgeWillCompose(george)\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic(george) & GeorgeHasAccessToProgram(george)) -> GeorgeWillCompose(george)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george) -> WillCompose(george))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 143,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CantCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -(CanCompose(george)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-WillCompose(george) -> -CanCompose(george))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikeMusic(george) -> WantToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CanNotCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -(CanCompose(george)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CantCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -(CanCompose(george)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CantCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CantCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikeMusic(george) -> WantToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CantCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -(CanCompose(george)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CanNotCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-WillCompose(george) -> -CanCompose(george))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CantCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-WillCompose(george) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-WillCompose(george) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CantCompose(george))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 144,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 145,
  "responses": [
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & Hour(breakingBad, 8))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & Hour(breakingBad, 8)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & Hour(breakingBad, 8)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour8(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & Hour8(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(8, x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & Hour(8, breakingBad)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 146,
  "responses": [
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: (RealityTVShow(breakingBad) & Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnMondayAt8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnMondayAt8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesOnMonday8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnTV(breakingBad) & Monday(breakingBad) & Hour(breakingBad, 8)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTVShow(breakingBad) | (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnTV(breakingBad) & Monday(breakingBad) & Hour(breakingBad, 8)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: (RealityTV(breakingBad) & Monday(8pm) & RosesGivenOutOnTV(8pm) & OnTV(8pm))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnTV(breakingBad) & Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: (RealityTVShow(breakingBad) | (RealityTVShow(breakingBad) -> -Monday(breakingBad) | -Hour(breakingBad, 8) | -RoseGivenOutOnTV(breakingBad))) & (-RealityTVShow(breakingBad) -> Monday(breakingBad) & Hour(breakingBad, 8) & RoseGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & Hour(breakingBad, 8) & RosesOnTV(breakingBad))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnMondayAt8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: (RealityTVShow(breakingBad) & Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RoseGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 147,
  "responses": [
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & Hour(breakingBad, 8))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & Hour(breakingBad, 8)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & Hour(breakingBad, 8))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & Hour(breakingBad, 8)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & Hour(breakingBad, 8))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & Hour(breakingBad, 8)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & Hour(breakingBad, 8))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(someTime) & Hour(someTime, 8))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(someTime) & Hour(someTime, 8))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & Hour(x, 8) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(when) & Hour(when, 8))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(when) & Hour(when, 8))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 148,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichScmidt) & NaziReichstagMember(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) | Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) | Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: ((German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 149,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: Member(heinrichScmidt, PrussianStateParliament) & Member(heinrichScmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & Member(x, PrussianStateParliament) & Member(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichScmidt, PrussianStateParliament) & MemberOf(heinrichScmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichScmidt, PrussianStateParliament) & MemberOf(heinrichScmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichSchmidt, PrussianStateParliament) & MemberOf(heinrichSchmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 150,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (-Politician(x) | -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (-Politician(x) | -MemberOfNaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (-Politician(x) | -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: -Politician(x) | -NaziReichstag(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (-Politician(x) | -NaziReichstag(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 151,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> -Cholangiocarcinoma(colorectalCancer))\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> -Cholangiocarcinoma(colorectalCancer))\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> -Cholangiocarcinoma(colorectalCancer))\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectalCancer)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 152,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\nFOL: (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) & MildFlu(colorectalCancer))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 153,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: ((-MildFlu(colorectalCancer) & -Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: - (MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: ((-MildFlu(colorectalCancer) & -Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: - (MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: ((-MildFlu(colorectalCancer) & -Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: ((-MildFlu(colorectalCancer) & -Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: ((-MildFlu(colorectalCancer) & -Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -(MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\nFOL: -((MildFlu(colorectalCancer) & Cholangiocarcinoma(colorectalCancer)) -> (BileDuctCancer(colorectalCancer) | Cholangiocarcinoma(colorectalCancer)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 154,
  "responses": [
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(olympicGames) & InTokyo(olympicGames)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(UnitedStates, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(usa, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWon(usa, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(olympicGames) & In(tokyo, olympicGames)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(wonBy(theUnitedStates), tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInOlympicGames(UnitedStates, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(unitedStates, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo. \nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event. \nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInOlympicGames(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(wonBy(theUnitedStates), tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: InTokyo(lastOlympicGames)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonBy(UnitedStates, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTheLastGames(usa, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonBy(unitedStates, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 155,
  "responses": [
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -OlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(usa, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -OlympicGames(tokyo)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(lastOlympicGames) & InTokyo(lastOlympicGames)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTokyo(UnitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -InTokyo(lastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonBy(usa, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWon(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(usa, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWon(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(usa, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(lastOlympicGames) & Location(lastOlympicGames, tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: Location(tokyo, mostMedalsWonBy(us))\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Location(lastOlympicGames, tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsInTokyo(unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: all x. (OlympicGames(x) -> SportingEvent(x))\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(x) -> InTokyo(x)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -InTokyo(LastOlympicGames)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 156,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(lastOlympicGames) & Location(lastOlympicGames, tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInLocation(unitedStates, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonInLocation(unitedStates, lastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(x), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(tokyo), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWon(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(tokyo), unitedStates)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(lastOlympicGames) & Location(lastOlympicGames, tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonBy(us, LastOlympicGames(tokyo))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames(lastOlympicGames) & Location(lastOlympicGames, tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: WonMostMedals(in tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: WonMostMedals(in lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames, unitedStates)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(tokyo), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(tokyo), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTheGames(unitedStates, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonInTheGames(unitedStates, LastOlympicGames(tokyo))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(tokyo), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonIn(LastOlympicGames(), unitedStates)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(x), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWon(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(x), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonIn(LastOlympicGames(), unitedStates)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonIn(LastOlympicGames(tokyo), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(x), unitedStates)\n</EVALUATE>\n\nHowever, the FOL translation of the conclusion is not valid because the variable 'x' in the expression LastOlympicGames(x) is not bound to any value. In first-order logic, a variable must be bound to a value in order to be used in a formula.\n\nTo fix this, we need to make the conclusion more specific. Since we know that the last Olympic games was in Tokyo, we can replace 'x' with 'tokyo' in the conclusion.\n\n<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(tokyo), unitedStates)\n</EVALUATE>\n\nNow, the FOL translation of the conclusion is valid.",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTheEvent(unitedStates, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonInTheEvent(unitedStates, LastOlympicGames(tokyo))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames(tokyo), unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 157,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 158,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, LGA)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x, y) & Arrival(x, y) -> -Equal(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Fly(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>\n\nNote that the FOL translation of \"The departure and arrival can not be the same airport\" is not directly equivalent to the original sentence. The original sentence implies that the departure and arrival airports are always different, which is equivalent to the FOL translation \"all x y. (Fly(x, y) -> -Fly(x, y))\". This FOL translation states that for any two airports x and y, if x flies to y, then x does not fly from y.",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Depart(x, y) & Arrival(x, y) -> - SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, LGA)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) & Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Fly(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, LGA)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>\n\nNote that the FOL translation for the sentence \"The departure and arrival can not be the same airport\" assumes that the departure and arrival airports are the second and third arguments of the Fly predicate, respectively. However, this assumption may not be correct if the original sentence was intended to have a different meaning.",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) & FlyFrom(x, y) -> -FlyTo(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Arrival(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>\n\nTo evaluate whether the conclusion follows from the premises, we need to determine if the FOL translation of the conclusion is a logical consequence of the FOL translations of the premises.\n\nThe FOL translation of the conclusion is \"Fly(susan, lga)\". The FOL translation of the first premise is \"Fly(susan, lga)\" which is the same as the conclusion. The FOL translation of the second premise is \"all x y. (Fly(x, y) -> -SameAirport(x, y))\" which does not provide any information about Susan or LGA airport. The FOL translation of the third premise is \"Fly(john, lga)\" which does not provide any information about Susan.\n\nTherefore, the conclusion \"Susan flies from LGA airport\" does not logically follow from the premises."
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Arrival(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) & Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) & Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) & Fly(x, y) -> -SameAirport(x, y))\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Fly(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) & Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) & Fly(x, y) -> -SameAirport(x, y))\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, LGA)\n</EVALUATE>\n\nHowever, to evaluate the conclusion, we need to use the first premise and the second premise to get the same airport for Susan and John. Then we can use the second premise to get the same airport for Susan and John. \n\nThe first premise states that Susan flies to LGA airport. The second premise states that the departure and arrival can not be the same airport. However, the third premise states that John flies from LGA airport, which means LGA airport is the departure airport for John. Then we can conclude that LGA airport is not the arrival airport for Susan, because the departure and arrival can not be the same airport. \n\nHowever, we can conclude that Susan flies from LGA airport, because Susan flies to LGA airport and LGA airport is the departure airport for John.\n\nThe FOL translation of the conclusion is: Fly(susan, LGA).\n\nHowever, the FOL translation of the first premise is: Fly(susan, LGA). The FOL translation of the third premise is: Fly(john, LGA). The FOL translation of the second premise is: all x y. (Fly(x, y) & Fly(x, y) -> -SameAirport(x, y)). \n\nWe can conclude that Fly(susan, LGA) and Fly(john, LGA) and -SameAirport(susan, john). \n\nWe can also conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> -SameAirport(susan, john).\n\nHowever, the FOL translation of the conclusion is: Fly(susan, LGA). We can conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> -SameAirport(susan, john). \n\nWe can also conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> Fly(susan, LGA).\n\nThe FOL translation of the conclusion is: Fly(susan, LGA). We can conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> Fly(susan, LGA).\n\nWe can also conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> Fly(susan, LGA) and -SameAirport(susan, john).\n\nThe FOL translation of the conclusion is: Fly(susan, LGA). We can conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> Fly(susan, LGA) and -SameAirport(susan, john).\n\nHowever, we can conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) and -SameAirport(susan, john).\n\nThe FOL translation of the conclusion is: Fly(susan, LGA). We can conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) and -SameAirport(susan, john).\n\nWe can also conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) and -SameAirport(susan, john) and Fly(susan, LGA).\n\nThe FOL translation of the conclusion is: Fly(susan, LGA). We can conclude that Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) -> Fly(susan, LGA) and -SameAirport(susan, john) and -Fly(susan, LGA) and -SameAirport(susan, john) and Fly(susan,"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Fly(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x, y) & Arrival(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, LGA)\n</EVALUATE>\n\nTo evaluate the conclusion, we need to determine if it follows from the premises. The conclusion \"Susan flies from LGA airport\" is not logically entailed by the premises. The first premise states that Susan flies to LGA airport, and the third premise states that John flies from LGA airport. However, there is no information that links Susan's flight to LGA airport to John's flight from LGA airport. The second premise only talks about the departure and arrival being different airports, but it does not provide any information about Susan's flight. Therefore, we cannot conclude that Susan flies from LGA airport based on the given premises.",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -SameAirport(x, y))\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, LGA)\n</EVALUATE>\n\nNote: Since \"SameAirport(x, y)\" is not explicitly defined in the premises, we cannot determine whether the conclusion follows from the premises using a theorem solver.",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Fly(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>\n\nNote: The FOL translation of \"The departure and arrival can not be the same airport.\" is a bit tricky. In first-order logic, we can represent this statement as \"all x y. (Fly(x, y) -> -Fly(x, y))\", which means that for any x (the departure airport) and any y (the arrival airport), if x and y are the same airport (Fly(x, y)), then it is not the case that x and y are the same airport (-Fly(x, y)). This is a bit of a hack, but it's a common way to represent this kind of statement in first-order logic.",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Fly(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>\n\nHowever, the FOL translation of the sentence \"The departure and arrival can not be the same airport.\" is not correct. The correct translation is:\nFOL: all x y. (Fly(x, y) -> -Fly(y, x))\n\nThe corrected <EVALUATE> is:\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Fly(y, x))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, lga)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 159,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(lga, susan)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x, y) & Arrival(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(lga, john)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(lga, john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) & Fly(x, y) -> -True)\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: John flies to LGA airport.\nFOL: Fly(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -SameAirport(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -same(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -same(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -Eq(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -Identical(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, LGA)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -SameAirport(y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -SameAirport(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x, y) & Arrival(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, LGA)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x, y) & Arrival(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -Identical(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -SameAirport(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Depart(x, y) & Arrival(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Depart(x, y) & Arrival(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -eq(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(lga, susan)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Departure(x, y) & Arrival(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(lga, john)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(lga, john)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -SameAirport(y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 160,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 161,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 162,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom)))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom)))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -((Grumpy(tom) & MeanToAnimals(tom)) & (-Grumpy(tom) & -AnimalLover(tom))) \n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 163,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x)) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, FamilyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, FamilyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer) & Writer(writer)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, writer)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, writer)\nTEXT: [BG] Boston is an American city.\nFOL: American(city)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(writer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, FamilySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 164,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, familySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, FamilyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: podcast(FamilySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(FamilySecrets)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. ((Novel(x) & WrittenBy(y, x)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(podcastFamilySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: podcast(podcastFamilySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. ((Novel(x) & WrittenBy(y, x)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: podcast(podcastFamilySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets) & Podcast(familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(podcastFamilySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets) & Podcast(familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: podcast(podcastFamilySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, FamilyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(FamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a podcast.\nFOL: Podcast(familySecrets)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, FamilyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(FamilySecrets)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 165,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, FamilyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, FamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcastFamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, FamilyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 166,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 167,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 168,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 169,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 170,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: - (American(yuri) & BasketballPlayer(yuri)) | BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: - (American(yuri) & BasketballPlayer(yuri)) | (American(yuri) -> BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 171,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 172,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(Leaderboard) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992) = steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Belgium(x) & InSixWayTie(x, duMaurierClassic1992))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(descampe) & Leaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992) = steinhauer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(Some(y, x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, Steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(leaderboard) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (Member(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(duMaurierClassic1992, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(duMaurierClassic1992, x) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992, steinhauer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & SixWayTie(x) & FromBelgium(some y. InTie(x, y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, Steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & FromBelgium(SomeoneInSixWayTie(1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> ParticipatedIn(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(leaderboard) & exists x. (FromBelgium(x) & InSixWayTie(x, leaderboard))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (ParticipantInSixWayTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> ParticipatedIn(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(LeaderboardOf1992DuMaurierClassic) & exists x. (MemberOfSixWayTie(x, LeaderboardOf1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboardOf1992DuMaurierClassic(descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboardOf1992DuMaurierClassic(x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, Steinhauer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(someoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic) = Steinhauer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (OnLeaderboard(1992DuMaurierClassic, x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> ParticipatedIn(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & SixWayTie(x) & FromBelgium(some(y) | x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992) = steinhauer\n</EVALUATE>\n\nNote: In the original premise, the sentence \"There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\" is a bit ambiguous. I translated it to \"exists x. (Leaderboard(x) & SixWayTie(x) & FromBelgium(some(y) | x))\" to capture the idea that there is a six-way tie on the leaderboard and at least one person in the tie is from Belgium. This translation assumes that the six-way tie is a set of people, and that the person from Belgium is one of the people in the tie.",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic) = steinhauer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(someoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992, steinhauer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(leaderboard) & exists x. (FromBelgium(x) & InSixWayTie(x, leaderboard))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & SixWayTie(x) & FromBelgium(someoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992) = Steinhauer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & FromBelgium(LeaderboardPerson)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> ParticipatedIn(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, Steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(duMaurierClassic1992) & exists x. (OnLeaderboard(x, duMaurierClassic1992) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(leaderboard) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(Steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & SixWayTie(x) & FromBelgium(someoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> ParticipatedIn(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992) = Steinhauer\n</EVALUATE>\n\nNote: I assumed that the FOL translation for \"There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium\" is \"exists x. (Leaderboard(x) & SixWayTie(x) & FromBelgium(someoneInTie(x)))\". This is because the sentence describes the existence of a six-way tie on the leaderboard, and the fact that one of the people in the tie is from Belgium.\n\nAlso, I assumed that the FOL translation for \"Steinhauer was not the winner of the 1992 du Maurier Classic\" is \"-Winner(duMaurierClassic1992) = Steinhauer\". This is because the sentence describes the negation of the fact that Steinhauer is the winner of the 1992 du Maurier Classic.",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & FromBelgium(SomeoneInTie(1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> ParticipatedIn(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(leaderboard) & exists x. (InSixWayTie(x, leaderboard) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992, steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(some y. InTie(x, y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> ParticipatedIn(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic, Steinhauer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(SomeoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(duMaurierClassic1992, steinhauer)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 173,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassicLeaderboard) & exists x. (InSixWayTie(x, 1992DuMaurierClassicLeaderboard) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassicLeaderboard)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassicLeaderboard) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, 1992DuMaurierClassicLeaderboard)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(duMaurierClassic1992) & exists x. (InSixWayTie(x, duMaurierClassic1992) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, duMaurierClassic1992)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (ParticipantInSixWayTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: ParticipantInSixWayTie(descampe, 1992DuMaurierClassic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (InSixWayTie(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, Leaderboard(duMaurierClassic1992))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(some(y) & Member(x, y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Leaderboard(descampe, duMaurierClassic1992) & Member(x, leaderboard(descampe, duMaurierClassic1992)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (InSixWayTie(y, x) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, Leaderboard(descampe, 1992DuMaurierClassic))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (InSixWayTie(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(Leaderboard(1992DuMaurierClassic), descampe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (FromBelgium(x) & InSixWayTie(x, 1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, 1992DuMaurierClassic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (Member(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Leaderboard(descampe, x) & SixWayTie(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (InTie(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InTie(Leaderboard(1992DuMaurierClassic), descampe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (ParticipantInTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & OnLeaderboard(Descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: ParticipantInTie(Descampe, 1992DuMaurierClassic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (Member(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (SixWayTie(x) & Member(x, descampe))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (FromBelgium(x) & InSixWayTie(x, 1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> ParticipatedIn(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, 1992DuMaurierClassic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(leaderboardDuMaurierClassic1992) & exists x. (Belgium(x) & InSixWayTie(x, leaderboardDuMaurierClassic1992))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(descampe) & OnLeaderboard(descampe, leaderboardDuMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, leaderboardDuMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, leaderboardDuMaurierClassic1992)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(some y. Member(x, y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Member(sixWayTie, descampe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (InTie(y, x) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InTie(descampe, Leaderboard(1992DuMaurierClassic))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (FromBelgium(x) & InSixWayTie(x, 1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> ParticipatedIn(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, 1992DuMaurierClassic)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & FromBelgium(TieMember(1992DuMaurierClassic, 1))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(1992DuMaurierClassic, descampe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(leaderboard) & exists x. (InSixWayTie(x, leaderboard) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, leaderboard)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(leaderboard1992duMaurierClassic) & exists x. (Belgium(x) & InSixWayTie(x, leaderboard1992duMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(descampe) & Leaderboard(descampe, leaderboard1992duMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, leaderboard1992duMaurierClassic) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, leaderboard1992duMaurierClassic)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (Member(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Leaderboard(descampe, x) & SixWayTie(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(oneOfSixWayTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: InSixWayTie(descampe, leaderboardOf(duMaurierClassic1992))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(SomeoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Leaderboard(descampe, 1992DuMaurierClassic) & SixWayTie(LeaderboardOf(1992DuMaurierClassic))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(SomeoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: SixWayTie(Leaderboard(1992DuMaurierClassic)) & FromBelgium(SomeoneInTie(Leaderboard(1992DuMaurierClassic)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (Member(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: exists x. (Leaderboard(descampe, x) & SixWayTie(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 174,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (-Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi)))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) & Legs(kiKi)) | (-Jump(kiKi) & -Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> (-Terricolous(kiKi) | Terricolous(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) & HasLegs(kiKi)) | (-Jumps(kiKi) & -HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Leg(kiki) -> (Terricolous(kiki) | Leg(kiki))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiki)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) & -HasLegs(kiKi)) | (-Jumps(kiKi) & HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) & -Legs(kiKi)) | (-Jump(kiKi) & -Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) & HasLegs(kiKi)) | (-Jumps(kiKi) & -HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(kiKi) & -HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> Terricolous(kiki) | HasLegs(kiki)\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> (-Terricolous(kiKi) | -Leg(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Legs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -Legs(kiKi) -> Terricolous(kiKi) | Legs(kiKi)\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> Terricolous(kiKi) | HasLegs(kiKi)\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 175,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> ((Terricolous(kiKi) | Legs(kiKi)))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Barks(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> Terricolous(kiki) | Legs(kiki)\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiki) & Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> ((Terricolous(kiKi) | Legs(kiKi)))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Leg(kiki) -> (Terricolous(kiki) | Leg(kiki))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiki) & Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) & Leg(kiKi)) | (-Jump(kiKi) & -Leg(kiKi)) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(kiKi) & -Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> ((Terricolous(kiKi) | Leg(kiKi)))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Barks(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> ((Terricolous(kiKi) | Legs(kiKi)))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Barks(kiKi) & Dog(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> (-Terricolous(kiKi) | -Leg(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Legs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiki) | Legs(kiki)) -> (Terricolous(kiki) | Legs(kiki))\nTEXT: KiKi barks.\nFOL: Barks(kiki)\nTEXT: KiKi is a dog.\nFOL: Dog(kiki)\nTEXT: KiKi barks and is a dog.\nFOL: Barks(kiki) & Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> Terricolous(kiKi) | Legs(kiKi)\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (-Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: (Barks(kiKi) & Dog(kiKi))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 176,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Legs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Legs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> Terricolous(kiki) | HasLegs(kiki)\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-(Jumps(kiKi) & HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi)))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) & Leg(kiKi)) | (-Jump(kiKi) & -Leg(kiKi)) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiki) & HasLegs(kiki)) | (-Jumps(kiki) & -HasLegs(kiki)) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiki) & -Dog(kiki)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> Terricolous(kiKi) | Leg(kiKi)\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) & Legs(kiKi)) | (-Jump(kiKi) & -Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiki) & -Dog(kiki)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> Terricolous(kiki) | HasLegs(kiki)\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (-Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-(Jumps(kiKi) & HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi)))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Leg(kiKi)) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 177,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nFOL: all x. (CommonlyKnownAs(x, y) -> x = y)\nFOL: Ailton = AiltonSilva\nFOL: AiltonSilva = Ailton\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nFOL: BrazillianFootballer(Ailton) & PlaysFor(Ailton, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nFOL: all x. (FootballClub(x) & FootballClub(y) -> x = y)\nFOL: Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, Nautico) -> -Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameAs(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazilian(x) | -PlaysFor(x, Nautico)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazilian(x) & PlaysFor(Nautico, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailton, 1995) & Ailton(Silva, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(ailton) & Footballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailton, 1995) & CommonlyKnownAs(ailton, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, nautico) -> -Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailton, 1995) & CommonlyKnownAs(ailton, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(ailton) & Footballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, nautico) -> -Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(Ailton, 1995) & AiltonSilva(Ailton) -> Ailton(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: AiltonSilva(Ailton) & Brazilian(Ailton) & Footballer(Ailton) & PlaysFor(Ailton, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, Nautico) -> -Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, nautico) -> -Brazilian(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) -> CommonlyKnownAs(ailton, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameAs(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazilian(nautico)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(ailtonSilva, 1995) & CommonlyKnown(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, nautico) -> -Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(ailtonSilva, 1995) & SameAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazilian(x) | -PlaysFor(x, nautico)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & (nautico = braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazilian(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & (PlaysForNautico(x) -> PlaysForBraga(x))\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazilian(x) & PlaysForNautico(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, Nautico) -> -Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, AiltonSilva) & Ailton(AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(Nautico, x) -> -Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) -> Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(braga, ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(nautico, ailtonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazilian(x) & PlaysFor(nautico, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, nautico) -> -Brazilian(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailton, 1995) & CommonlyKnownAs(ailton, \"Ailton\")\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameAs(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, nautico) -> -Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, nautico) -> -Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & FootballClub(y) & x!= y & x = Nautico & y = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazilian(x) & PlaysForNautico(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) & CommonlyKnownAs(ailton, Ailton)\nFOL: AiltonSilva(ailton) -> Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOutTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazilian(x) | -PlaysFor(x, nautico)\nFOL: all x. (PlaysFor(x, nautico) -> -Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -Brazillian(playsFor(_, nautico))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 178,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & PartnerClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) & AiltonSilva(x) -> x\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & FootballClub(y) & x = y -> Nautico(x) & Braga(y)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -FootballClub(x) & AiltonSilva(x) -> x\n</EVALUATE>\n\nNote: The FOL translation for the conclusion is not correct. The correct translation should be:\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysForFootballClub(x) & AiltonSilva(x) -> x",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & CommonlyKnownAs(x, Ailton)\nFOL: all x. ((AiltonSilva(x) & BornIn1995(x) & CommonlyKnownAs(x, Ailton)) -> Ailton(x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: Ailton(x) & FootballPlayer(x) & LoanedToBraga(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: AiltonSilva(x) & BrazillianFootballer(x) & PlaysForNautico(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: Nautico(x) & FootballClub(x) & FootballClub(y) & Braga(y) & x!= y\nFOL: all z. (FootballClub(z) & FootballClub(w) & z!= w -> Nautico(z) | Braga(w))\nTEXT: Fluminense is a football club.\nFOL: Fluminense(x) & FootballClub(x)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -AiltonSilva(x) & PlaysForFootballClub(x)\nFOL: all x. (AiltonSilva(x) -> -PlaysForFootballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & AlongWith(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(_, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(ailtonSilva, 1995) & CommonlyKnown(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(x, 1995) & x = Ailton -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOut(x, Braga) & x = Ailton -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & FootballerFor(x, Nautico) & x = AiltonSilva -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & x = Nautico & FootballClub(y) & y = Braga -> x = y\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -FootballPlayerFor(AiltonSilva, x) & FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & FootballPlayer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & AlongWith(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysFor(Fluminense, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(AiltonSilva, 1995) & CommonName(AiltonSilva, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameAs(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(Fluminense, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva does not play for a football club.\nFOL: -FootballClub(x) & AiltonSilva(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & x = Nautico | x = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -AiltonSilva(x) | -FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & x = Nautico & x = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -AiltonSilva(x) | -FootballClub(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & Ailton(x)\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x) & Ailton(x)\nFOL: FootballPlayer(x) & Ailton(x) & LoanedOutToBraga(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) & AiltonSilva(x)\nFOL: BrazillianFootballer(x) & AiltonSilva(x) & PlaysForNautico(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & Nautico(x) & FootballClub(y) & Braga(y) & x!= y\nFOL: FootballClub(x) & Nautico(x) & FootballClub(y) & Braga(y) & x = y\nTEXT: Fluminense is a football club.\nFOL: FootballClub(x) & Fluminense(x)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -FootballClub(x) & AiltonSilva(x)\nFOL: AiltonSilva(x) -> -FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & PartnerClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>\n\nNote: I used 'footballClub' as a placeholder for any football club, since the conclusion is about Ailton Silva not playing for a football club in general, not specifically Nautico or Braga.",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x) & Ailton(x) \nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) & AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -FootballClub(x) & AiltonSilva(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & Partner(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & AlongWith(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & x = Ailton -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x) & x = Ailton -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) & x = AiltonSilva -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & x = Nautico & FootballClub(y) & y = Braga -> Nautico(x) & Braga(y)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -FootballClub(x) & x = AiltonSilva\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) & CommonlyKnownAs(x, Ailton) -> Ailton(y)\nFOL: AiltonSilva(y) & BornIn(1995, y) & CommonlyKnownAs(y, Ailton) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutTo(x, Braga) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysFor(x, Nautico) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & FootballClub(y) & x!= y & x = Nautico & y = Braga\nFOL: FootballClub(x) & FootballClub(y) & x!= y & x = Braga & y = Nautico\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub(x))\n</EVALUATE>\n\nNote: The FOL translation of the sentence \"Ailton Silva, born in 1995, is commonly known as Ailton\" is not straightforward, as it involves quantification over variables. I provided two possible translations, both of which are equivalent but use different variables.\n\nAlso, the FOL translation of the sentence \"Nautico is a football club along with Braga\" is not entirely accurate, as it implies that Nautico and Braga are the same football club. A more accurate translation would be:\n\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico!= Braga\n\nHowever, this translation is not exactly what you would write in FOL, as it involves a negation of equality. In FOL, we would typically write this as:\n\nFOL: FootballClub(Nautico) & FootballClub(Braga) & - (Nautico = Braga)\n\nBut this is not exactly what you would write in a logic module like NLTK."
   ]
  ]
 },
 {
  "index": 179,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & (nautico = braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n</EVALUATE>\n\nNote: The FOL translation of the conclusion is not correct in this case. The conclusion should be translated to \"LoanedOutToFootballClub(ailton)\".",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutTo(x, braga) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysFor(x, nautico) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutTo(Ailton, footballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x) & Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) & AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & Nautico(x) & FootballClub(y) & Braga(y) & x = y\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(Ailton)\n</EVALUATE>\n\nHowever, the FOL translation of the given premises and conclusion is not correct. The FOL translation should be in the format of the Python NLTK package logic module. Here is the correct FOL translation:\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton) & Ailton(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutToBraga(Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysForNautico(AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(Ailton)\n</EVALUATE>\n\nHowever, the FOL translation of the given premises and conclusion is not correct. The FOL translation should be in the format of the Python NLTK package logic module. Here is the correct FOL translation:\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton) & Ailton(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutToBraga(Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysForNautico(AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(Ailton)\n</EVALUATE>\n\nHowever, we can see that the FOL translation of the given premises and conclusion is not correct. The correct FOL translation should be:\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton) & Ailton(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutToBraga(Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysForNautico(AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(Ailton)\n</EVALUATE>\n\nHowever, we can see that the FOL translation of the given premises and conclusion is not correct. The correct FOL translation should be:\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) &",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & Nautico(x) & Braga(y) & x = y\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(ailton)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) & CommonlyKnownAs(ailton, Ailton)\nFOL: AiltonSilva(ailton) -> Ailton(ailton)\nFOL: BornIn(1995, ailton)\nFOL: CommonlyKnownAs(ailton, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nFOL: BrazillianFootballer(AiltonSilva)\nFOL: Footballer(AiltonSilva)\nFOL: PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club.\nFOL: FootballClub(Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameFootballClub(Nautico, Braga)\nFOL: FootballClub(Nautico)\nFOL: FootballClub(Braga)\nFOL: SameFootballClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(ailton, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) -> Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(braga, ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: AiltonSilva(ailton) & BrazilianFootballer(ailton) & PlaysFor(nautico, ailton)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedTo(x, ailton))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(ailton, 1995) -> CommonlyKnownAs(ailton, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailton) & PlaysFor(ailton, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & SameAs(x, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameAs(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(ailtonSilva, 1995) & CommonName(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedTo(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & CommonlyKnownAs(x, Ailton)\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton) & CommonlyKnownAs(Ailton, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x)\nFOL: FootballPlayer(Ailton) & LoanedOutToBraga(Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x)\nFOL: BrazillianFootballer(AiltonSilva) & PlaysForNautico(AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & FootballClub(Braga) & AlongWith(x, Braga)\nFOL: FootballClub(Nautico) & FootballClub(Braga) & AlongWith(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(x)\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutToFootballClub(Ailton)\n</EVALUATE>\n\nNote that the translation of \"Ailton Silva, born in 1995, is commonly known as Ailton\" is not straightforward, as it involves a proper noun (Ailton Silva) and a common noun (Ailton). However, based on the context, we can assume that Ailton Silva is the same person as Ailton. Therefore, the FOL translation is AiltonSilva(Ailton) & BornIn1995(Ailton) & CommonlyKnownAs(Ailton, Ailton)."
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equal(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & AlongWith(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(ailton, 1995) & CommonlyKnownAs(ailton, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) -> Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: AiltonSilva(ailton) & Brazillian(ailton) & Footballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(ailton, footballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> Ailton\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> Ailton(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameTeam(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(Ailton, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & AlongWith(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(Ailton, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedTo(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailton, 1995) & AiltonSilva(ailton) -> Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: AiltonSilva(ailton) & Brazillian(ailton) & Footballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 180,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameTeam(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(Fluminense, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(x, 1995) & CommonlyKnownAs(x, Ailton) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutTo(x, Braga) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysFor(x, Nautico) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & FootballClub(y) & x!= y & (x = Nautico & y = Braga) | (x = Braga & y = Nautico)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: AiltonSilva(x) & PlayedFor(x, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(AiltonSilva, 1995) & CommonName(AiltonSilva, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(1995, ailtonSilva) -> Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & PlaysFor(AiltonSilva, Nautico) & PlaysFor(Ailton, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & Nautico(x) & FootballClub(y) & Braga(y) & x!= y\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedForFluminense(ailtonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> Ailton(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(ailton, 1995) -> CommonlyKnownAs(ailton, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailton) & PlaysFor(ailton, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & (Nautico = Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: AiltonSilva(ailton) & PlayedFor(ailton, Fluminense)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & CommonlyKnownAs(x, Ailton) \nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & FootballPlayer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameTeam(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) & SameAs(x, Ailton) \nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(Fluminense, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(ailtonSilva, 1995) & Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameAs(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(1995, ailtonSilva) -> CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(braga, ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(nautico, ailtonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(fluminense, ailtonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x) & Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) & AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & Nautico(x) & FootballClub(y) & Braga(y) & x = y\nTEXT: Fluminense is a football club.\nFOL: FootballClub(x) & Fluminense(x)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedForFluminense(x) & AiltonSilva(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> Ailton(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(x, 1995) -> CommonlyKnownAs(x, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOut(x, Braga) -> x = Ailton\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysFor(x, Nautico) -> x = AiltonSilva\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & x = Nautico -> FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) & Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutTo(x, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysFor(x, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> Ailton\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & FootballPlayer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & FootballClub(y) & x!= y & (x = Nautico | y = Nautico) & (x = Braga | y = Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: AiltonSilva(x) & PlayedForFluminense(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 181,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, FootballClub(X))\n</EVALUATE>\n\nPlease note that the FOL translation of the last sentence is incomplete, as we don't know which football club Ailton was loaned out to. However, in the format you specified, we need to provide a FOL translation for all sentences, so I've included a placeholder \"FootballClub(X)\" for the unknown football club.",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(1995, ailtonSilva) -> Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & NauticoIsAlongWithBraga(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, FootballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & FootballPlayerFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & Partner(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedTo(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: BornIn(ailtonSilva, 1995) & LoanedOut(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> Ailton(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameTeam(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x) & Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) & AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & Nautico(x) & FootballClub(y) & Braga(y) & x = y\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: AiltonSilva(x) & LoanedOutToFootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: AiltonSilva(Ailton) & LoanedOut(Ailton, X) & FootballClub(X)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & AlongWith(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) & CommonlyKnownAs(x, Ailton)\nFOL: all x. ((AiltonSilva(x) & BornIn1995(x) & CommonlyKnownAs(x, Ailton)) -> x = Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, y) & FootballClub(y)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & AlongWith(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(x, 1995) & Ailton(x)\nFOL: all x. (AiltonSilva(x) & BornIn(x, 1995) -> Ailton(x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutTo(x, braga)\nFOL: FootballPlayer(x) & Ailton(x) & LoanedOutTo(x, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysFor(x, nautico)\nFOL: AiltonSilva(x) & BrazillianFootballer(x) & PlaysFor(x, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nFOL: FootballClub(x) & x = nautico | x = braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: AiltonSilva(x) & LoanedOutTo(x, y)\nFOL: exists y. (AiltonSilva(x) & LoanedOutTo(x, y) & FootballClub(y))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) -> CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: AiltonSilva(Ailton) & LoanedOut(Ailton, X) & FootballClub(X)\n</EVALUATE>\n\nNote: The FOL translation of the conclusion is not straightforward because it contains a variable X which represents a football club. This is a problem because the conclusion is supposed to follow from the premises, but the premises do not provide any information about which football club Ailton was loaned out to. Therefore, it is not possible to determine whether the conclusion follows from the premises using a theorem solver.",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & Ailton(x) & LoanedOutTo(x, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & AiltonSilva(x) & PlaysFor(x, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & Partner(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: AiltonSilva(x) & LoanedOutTo(x, y) & FootballClub(y)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameTeam(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOutTo(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedTo(FootballClub(x), AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOutTo(x, AiltonSilva) & FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & FootballPlayer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, footballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameAs(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn1995(x) -> Ailton(x)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedOutToBraga(x) -> Ailton(x)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysForNautico(x) -> AiltonSilva(x)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & nautico = braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: AiltonSilva(x) & LoanedOutToFootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(1995, x) & CommonlyKnownAs(Ailton, x)\nFOL: AiltonSilva(x) & BornIn(1995, x) -> CommonlyKnownAs(Ailton, x)  # Simplified to a biconditional\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, x) & FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(x) & BornIn(x, 1995) & CommonlyKnownAs(x, Ailton) \nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(x) & LoanedTo(x, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(x) & PlaysFor(x, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(x) & x = Nautico & x = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: AiltonSilva(x) & LoanedTo(x, y) & FootballClub(y)\n</EVALUATE>\n\nNote that the above FOL translation of the sentence \"Ailton Silva was loaned out to a football club\" is not a valid FOL sentence. It should be translated into a more precise FOL sentence, such as:\n\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: AiltonSilva(x) & exists y. (LoanedTo(x, y) & FootballClub(y))",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & Member(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedTo(ailtonSilva, footballClub)\n</EVALUATE>"
   ]
  ]
 }
]